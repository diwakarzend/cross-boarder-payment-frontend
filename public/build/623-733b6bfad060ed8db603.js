/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkreact_boiler_plate"] = self["webpackChunkreact_boiler_plate"] || []).push([[623],{

/***/ 6623:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ DashBoard_DashBoard)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./node_modules/react-redux/es/index.js + 19 modules\nvar es = __webpack_require__(4494);\n// EXTERNAL MODULE: ./src/utils/Request.js\nvar Request = __webpack_require__(6195);\n// EXTERNAL MODULE: ./src/utils/urls.js\nvar urls = __webpack_require__(2418);\n// EXTERNAL MODULE: ./src/Components/BreadCrumb/BreadCrumb.js + 2 modules\nvar BreadCrumb = __webpack_require__(3851);\n// EXTERNAL MODULE: ./node_modules/styled-components/dist/styled-components.browser.esm.js + 4 modules\nvar styled_components_browser_esm = __webpack_require__(5458);\n;// CONCATENATED MODULE: ./src/Components/CircularProgressBar/style.js\nvar _templateObject;\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n/* harmony default export */ const style = (styled_components_browser_esm/* default.svg */.ZP.svg(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n.circle-background,\\n.circle-progress {\\n  fill: none;\\n}\\n\\n.circle-background {\\n  stroke: #ddd;\\n}\\n\\n.circle-progress {\\n  stroke: \", \";\\n  stroke-linecap: round;\\n  stroke-linejoin: round;\\n}\\n\\n.circle-text {\\n  font-size: 14px;\\n  font-weight: bold;\\n  fill: \", \";\\n}\\n\"])), function (props) {\n  return props.strokeColor ? \"\".concat(props.strokeColor) : '#4d94ff';\n}, function (props) {\n  return props.strokeColor ? \"\".concat(props.strokeColor) : '#4d94ff';\n}));\n;// CONCATENATED MODULE: ./src/Components/CircularProgressBar/CircularProgressBar.js\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\nvar CircularProgressBar = /*#__PURE__*/function (_React$Component) {\n  _inherits(CircularProgressBar, _React$Component);\n\n  var _super = _createSuper(CircularProgressBar);\n\n  function CircularProgressBar(props) {\n    var _this;\n\n    _classCallCheck(this, CircularProgressBar);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(CircularProgressBar, [{\n    key: \"render\",\n    value: function render() {\n      // Size of the enclosing square\n      var sqSize = this.props.sqSize; // SVG centers the stroke width on the radius, subtract out so circle fits in square\n\n      var radius = (this.props.sqSize - this.props.strokeWidth) / 2; // Enclose cicle in a circumscribing square\n\n      var viewBox = \"0 0 \".concat(sqSize, \" \").concat(sqSize); // Arc length at 100% coverage is the circle circumference\n\n      var dashArray = radius * Math.PI * 2; // Scale 100% coverage overlay with the actual percent\n\n      var dashOffset = dashArray - dashArray * this.props.percentage / 100;\n      return /*#__PURE__*/react.createElement(style, {\n        width: this.props.sqSize,\n        height: this.props.sqSize,\n        strokeColor: this.props.strokeColor,\n        viewBox: viewBox\n      }, /*#__PURE__*/react.createElement(\"circle\", {\n        className: \"circle-background\",\n        cx: this.props.sqSize / 2,\n        cy: this.props.sqSize / 2,\n        r: radius,\n        strokeWidth: \"\".concat(this.props.strokeWidth, \"px\")\n      }), /*#__PURE__*/react.createElement(\"circle\", {\n        className: \"circle-progress\",\n        cx: this.props.sqSize / 2,\n        cy: this.props.sqSize / 2,\n        r: radius,\n        strokeWidth: \"\".concat(this.props.strokeWidth, \"px\") // Start progress marker at 12 O'Clock\n        ,\n        transform: \"rotate(-90 \".concat(this.props.sqSize / 2, \" \").concat(this.props.sqSize / 2, \")\"),\n        style: {\n          strokeDasharray: dashArray,\n          strokeDashoffset: dashOffset\n        }\n      }), /*#__PURE__*/react.createElement(\"text\", {\n        className: \"circle-text\",\n        x: \"50%\",\n        y: \"50%\",\n        dy: \".3em\",\n        textAnchor: \"middle\"\n      }, \"\".concat(this.props.percentage, \"%\")));\n    }\n  }]);\n\n  return CircularProgressBar;\n}(react.Component);\n\nCircularProgressBar.defaultProps = {\n  sqSize: 100,\n  percentage: 25,\n  strokeWidth: 5\n};\n/* harmony default export */ const CircularProgressBar_CircularProgressBar = ((/* unused pure expression or super */ null && (CircularProgressBar)));\n;// CONCATENATED MODULE: ./src/Components/CircularProgressBar/index.js\n\n// EXTERNAL MODULE: ./src/utils/api.js\nvar api = __webpack_require__(2456);\n// EXTERNAL MODULE: ./src/lib/Chart/Chart.min.js\nvar Chart_min = __webpack_require__(4213);\n// EXTERNAL MODULE: ./src/Components/Dashboard/PtmVendor/style.js\nvar PtmVendor_style = __webpack_require__(7936);\n// EXTERNAL MODULE: ./node_modules/react-google-charts/dist/index.js\nvar dist = __webpack_require__(6887);\n;// CONCATENATED MODULE: ./src/Components/Dashboard/PtmVendor/UPIWidget.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar fontCss = {\n  fontSize: \"20px\",\n  textAlign: \"center\",\n  fontWeight: \"bold\",\n  color: \"#53505f\"\n};\nfunction UPIWidget(_ref) {\n  var _ref$data = _ref.data,\n      data = _ref$data === void 0 ? {} : _ref$data,\n      graphInfo = _ref.graphInfo,\n      changeMerhcantHandler = _ref.changeMerhcantHandler;\n  var graphData = graphInfo.graphData,\n      options = graphInfo.options;\n\n  var _useState = (0,react.useState)([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      vendorList = _useState2[0],\n      setVendorList = _useState2[1];\n\n  var userData = (0,es/* useSelector */.v9)(function (state) {\n    var _state$login;\n\n    return (state === null || state === void 0 ? void 0 : (_state$login = state.login) === null || _state$login === void 0 ? void 0 : _state$login.userData) || {};\n  });\n  var isVendor = false;\n\n  if ((userData === null || userData === void 0 ? void 0 : userData.role) === \"PTM_VENDOR\") {\n    isVendor = true;\n  }\n\n  (0,react.useEffect)(function () {\n    (0,api/* getUserByVendorRole */.h6)().then(function (res) {\n      var _res$data;\n\n      if (res !== null && res !== void 0 && (_res$data = res.data) !== null && _res$data !== void 0 && _res$data.data) {\n        var _res$data2;\n\n        setVendorList(res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.data);\n      }\n    });\n  }, []);\n  console.log(\"statusReportstatusReport\", data);\n  var totalTranscation = 0;\n  var successInfo = \"\";\n  var failedInfo = \"\";\n  var pendingInfo = \"\";\n\n  if (Array.isArray(data)) {\n    data.forEach(function (item) {\n      totalTranscation += +item.count;\n    });\n    successInfo = data.filter(function (item) {\n      return item.status == \"SUCCESS\";\n    });\n    successInfo = successInfo[0];\n    failedInfo = data.filter(function (item) {\n      return item.status == \"DONE\";\n    });\n    failedInfo = failedInfo[0];\n    pendingInfo = data.filter(function (item) {\n      return item.status == \"INITIATED\";\n    });\n    pendingInfo = pendingInfo[0];\n  }\n\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(PtmVendor_style/* UpiCollectionsStyle */.v, {\n    className: \"card-wrapper flex-column mb-4\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"upi-n-qr-collection row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"flex item-center\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"left flex item-center\"\n  }, /*#__PURE__*/react.createElement(\"h4\", {\n    className: \"card-title\"\n  }, \"UPI & QR Collections\"), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"status flex item-center\"\n  }, /*#__PURE__*/react.createElement(\"span\", {\n    className: \"upi\"\n  }, \"UPI\"), /*#__PURE__*/react.createElement(\"span\", {\n    className: \"QR\"\n  }, \"QR\"))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"right flex\"\n  }, /*#__PURE__*/react.createElement(\"button\", {\n    className: \"primary-btn\"\n  }, /*#__PURE__*/react.createElement(\"a\", {\n    href: \"/payin-transaction\",\n    style: {\n      color: \"#fff\",\n      textDecoration: \"none\"\n    }\n  }, \"View Transactions\")), !isVendor && /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"select\", {\n    name: \"userId\",\n    className: \"form-control\",\n    id: \"exampleFormControlSelect1\",\n    onChange: changeMerhcantHandler\n  }, /*#__PURE__*/react.createElement(\"option\", {\n    value: \"\"\n  }, \"Select Merchant\"), vendorList.map(function (vendor) {\n    return /*#__PURE__*/react.createElement(\"option\", {\n      key: vendor === null || vendor === void 0 ? void 0 : vendor.uuid,\n      value: (vendor === null || vendor === void 0 ? void 0 : vendor.uuid) + \",\" + (vendor === null || vendor === void 0 ? void 0 : vendor.userName)\n    }, \"\".concat(vendor.firstName || \"-\", \" \").concat(vendor.lastName || \"\"));\n  }))))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"cahrtTextWrap flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"chart-container\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"container-pie-chart flex space-between item-center\"\n  }, /*#__PURE__*/react.createElement(dist/* Chart */.kL, {\n    chartType: \"Bar\",\n    width: \"850px\",\n    \"max-width\": \"100%\",\n    height: \"400px\",\n    data: graphData,\n    options: options\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"right-container\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info-wrapper\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/rupees-yellow.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text first\"\n  }, \"Transactions\"), /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, totalTranscation))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/verified.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text second\"\n  }, \"Success\"), /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, successInfo && successInfo[\"count\"]))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/reject.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text third\"\n  }, \"Failed\"), /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, failedInfo && failedInfo[\"count\"]))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/history.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text fourth\"\n  }, \"Pending\"), /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, pendingInfo && pendingInfo[\"count\"]))))))))));\n}\n// EXTERNAL MODULE: ./node_modules/react-csv/index.js\nvar react_csv = __webpack_require__(3461);\n// EXTERNAL MODULE: ./node_modules/moment/moment.js\nvar moment = __webpack_require__(381);\n;// CONCATENATED MODULE: ./src/Components/Dashboard/PtmVendor/PayoutWidget.js\n\n\n\n\n\n\nvar chartConfig = __webpack_require__(1635);\n\n\n\n\nvar PayoutWidget_fontCss = {\n  fontSize: \"20px\",\n  textAlign: \"center\",\n  fontWeight: \"bold\",\n  color: \"#53505f\"\n};\nfunction PayoutWidget(_ref) {\n  var data = _ref.data,\n      graphInfo = _ref.graphInfo;\n  var graphData = graphInfo.graphData,\n      options = graphInfo.options;\n  console.log(\"statusReportstatusReport\", data, graphInfo);\n  var totalTransactionCount = 0;\n  var totalTransactionAmount = 0;\n  var rejectedInfo, successInfo, failedInfo;\n\n  if (Array.isArray(data)) {\n    data.filter(function (item) {\n      totalTransactionCount += item[\"count\"];\n      totalTransactionAmount += item[\"totalTransaction\"];\n    });\n    rejectedInfo = data.filter(function (item) {\n      return item.status == \"REJECTED\";\n    });\n    successInfo = data.filter(function (item) {\n      return item.status == \"DONE\";\n    });\n  }\n\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(PtmVendor_style/* UpiCollectionsStyle */.v, {\n    className: \"card-wrapper flex-column mb-4\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"upi-n-qr-collection row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"flex item-center\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"left flex item-center\"\n  }, /*#__PURE__*/react.createElement(\"h4\", {\n    className: \"card-title\"\n  }, \"PAYOUT\")), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"right flex\"\n  }, /*#__PURE__*/react.createElement(\"button\", {\n    className: \"primary-btn\"\n  }, /*#__PURE__*/react.createElement(\"a\", {\n    href: \"/payout-transaction\",\n    style: {\n      color: \"#fff\",\n      textDecoration: \"none\"\n    }\n  }, \"View Transactions\")))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"cahrtTextWrap flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"chart-container\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"container-pie-chart flex space-between item-center\"\n  }, /*#__PURE__*/react.createElement(dist/* Chart */.kL, {\n    chartType: \"Bar\",\n    width: \"850px\",\n    \"max-width\": \"100%\",\n    height: \"400px\",\n    data: graphData,\n    options: options\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"right-container\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info-wrapper\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/rupees-yellow.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text first\"\n  }, \"Transactions\"), /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, totalTransactionCount))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/verified.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text second\"\n  }, \"Total Amount\"), /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, \"\\u20B9 \", totalTransactionAmount))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/reject.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text fourth\"\n  }, \"Cancelled\"), /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, rejectedInfo && rejectedInfo[0] && rejectedInfo[0].count))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/history.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text third\"\n  }, \"Completed\"), /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, successInfo && successInfo[0] && successInfo[0].count))))))))));\n}\n;// CONCATENATED MODULE: ./src/Components/Dashboard/PtmVendor/PTPWidget.js\n\n\n\n\n\n\nvar PTPWidget_chartConfig = __webpack_require__(1635);\n\n\n\n\nvar PTPWidget_fontCss = {\n  fontSize: \"20px\",\n  textAlign: \"center\",\n  fontWeight: \"bold\",\n  color: \"#53505f\"\n};\nfunction PTPWidget(_ref) {\n  var data = _ref.data,\n      graphInfo = _ref.graphInfo;\n  var graphData = graphInfo.graphData,\n      options = graphInfo.options;\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(PtmVendor_style/* UpiCollectionsStyle */.v, {\n    className: \"card-wrapper flex-column mb-4\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"upi-n-qr-collection row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"flex item-center\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"left flex item-center\"\n  }, /*#__PURE__*/react.createElement(\"h4\", {\n    className: \"card-title\"\n  }, \"P2P\")), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"right flex\"\n  }, /*#__PURE__*/react.createElement(\"button\", {\n    className: \"primary-btn\"\n  }, /*#__PURE__*/react.createElement(\"a\", {\n    href: \"/p2p-transaction\",\n    style: {\n      color: \"#fff\",\n      textDecoration: \"none\"\n    }\n  }, \"View Transactions\")))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"cahrtTextWrap flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"chart-container\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"container-pie-chart flex space-between item-center\"\n  }, /*#__PURE__*/react.createElement(dist/* Chart */.kL, {\n    chartType: \"Bar\",\n    width: \"850px\",\n    \"max-width\": \"100%\",\n    height: \"400px\",\n    data: graphData,\n    options: options\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"right-container\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info-wrapper\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/rupees-yellow.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text first\"\n  }, \"Total Count\"), /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, data === null || data === void 0 ? void 0 : data.totalCount))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/verified.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text second\"\n  }, \"Total Credited Count\"), /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, data === null || data === void 0 ? void 0 : data.totalCreditedCount))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/reject.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text fourth\"\n  }, \"Total Synced Count\"), /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, data === null || data === void 0 ? void 0 : data.totalSyncedCount))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left flex space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/history.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text third\"\n  }, \"Total Amount\"), /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, \"\\u20B9 \", data === null || data === void 0 ? void 0 : data.totalTransactionSum))))))))));\n}\n// EXTERNAL MODULE: ./src/actions/Login.js\nvar Login = __webpack_require__(3594);\n// EXTERNAL MODULE: ./src/utils/common.js\nvar common = __webpack_require__(2667);\n;// CONCATENATED MODULE: ./src/Pages/DashBoard/style.js\nvar style_templateObject;\n\nfunction style_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\nvar DashboardWrapper = styled_components_browser_esm/* default.div */.ZP.div(style_templateObject || (style_templateObject = style_taggedTemplateLiteral([\"\\n    &.analysis-and-statistics {\\n        .transaction-analysis {\\n            margin-right: 24px;\\n            flex: 0 0 70%;\\n            max-width: 70%;\\n        }\\n        .overall-statistics {\\n            flex: 1;\\n            .card-body {\\n                padding: 10px;\\n            }\\n            .overall-chart {\\n                width: 180px;\\n                margin: 0 auto;\\n                padding-top: 16px;\\n                strong {\\n                    margin-left: 24px;\\n                }\\n            }\\n        }\\n    }\\n\"])));\n;// CONCATENATED MODULE: ./src/Pages/DashBoard/DashBoard.js\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DashBoard_slicedToArray(arr, i) { return DashBoard_arrayWithHoles(arr) || DashBoard_iterableToArrayLimit(arr, i) || DashBoard_unsupportedIterableToArray(arr, i) || DashBoard_nonIterableRest(); }\n\nfunction DashBoard_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction DashBoard_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return DashBoard_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return DashBoard_arrayLikeToArray(o, minLen); }\n\nfunction DashBoard_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction DashBoard_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction DashBoard_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n // import { fetchMonthlyReports, fetchReportsFailure } from \"../../actions/payout\";\n\n\n\n\n\n\n\n\n\n\n\nvar currentDate = (0,common/* getCurrentDate */.Ux)();\nvar initFilters = {\n  dateTo: \"\",\n  dateFrom: \"\",\n  pagination: {\n    pageNo: 1,\n    pageSize: 100\n  },\n  status: null,\n  txnRefId: null,\n  txnType: null,\n  userId: null,\n  utrNumber: null,\n  vendorCode: null\n};\nvar DashBoard_fontCss = {\n  fontSize: \"20px\",\n  textAlign: \"center\",\n  fontWeight: \"bold\",\n  color: \"#53505f\"\n};\nvar payloadUPIGraph = {\n  dateFrom: currentDate,\n  dateTo: currentDate // requestVpaId: \"string\",\n  // status: \"string\",\n  // txnId: \"string\",\n  // userId: \"string\",\n\n};\nvar payloadPayoutGraph = {\n  dateFrom: currentDate,\n  dateTo: currentDate // accountNumber: \"string\",\n  // clientId: \"string\",\n  // route: \"string\",\n  // status: \"string\",\n  // txnId: \"string\",\n  // vendorId: \"string\",\n\n};\nvar payloadPTPGraph = {\n  fromDate: currentDate,\n  toDate: currentDate\n};\nvar payloadP2PReports = {\n  fromDate: currentDate,\n  toDate: currentDate\n};\nvar payloadPayoutReports = {\n  dateFrom: currentDate,\n  dateTo: currentDate\n};\nvar payloadUpiCollectReports = {\n  dateFrom: currentDate,\n  dateTo: currentDate\n};\nconsole.log(\"getCurrentDate\", (0,common/* getCurrentDate */.Ux)());\n\nvar DashBoard = function DashBoard(props) {\n  var _payout$statusTranscR;\n\n  var payout = props.payout;\n\n  var _useState = (0,react.useState)(_objectSpread({}, initFilters)),\n      _useState2 = DashBoard_slicedToArray(_useState, 2),\n      filters = _useState2[0],\n      setFilters = _useState2[1];\n\n  var _useState3 = (0,react.useState)(\"\"),\n      _useState4 = DashBoard_slicedToArray(_useState3, 2),\n      ptpTransactionDetails = _useState4[0],\n      setPTPTransactionDetails = _useState4[1];\n\n  var _useState5 = (0,react.useState)(\"today\"),\n      _useState6 = DashBoard_slicedToArray(_useState5, 2),\n      duration = _useState6[0],\n      setDuration = _useState6[1];\n\n  var _useState7 = (0,react.useState)([]),\n      _useState8 = DashBoard_slicedToArray(_useState7, 2),\n      upiGraph = _useState8[0],\n      setUpiGraph = _useState8[1];\n\n  var _useState9 = (0,react.useState)([]),\n      _useState10 = DashBoard_slicedToArray(_useState9, 2),\n      payoutGraph = _useState10[0],\n      setPayoutGraph = _useState10[1];\n\n  var _useState11 = (0,react.useState)([]),\n      _useState12 = DashBoard_slicedToArray(_useState11, 2),\n      ptpGraph = _useState12[0],\n      setPTPGraph = _useState12[1];\n\n  var _useState13 = (0,react.useState)(\"\"),\n      _useState14 = DashBoard_slicedToArray(_useState13, 2),\n      rblAccount = _useState14[0],\n      setRblAccount = _useState14[1];\n\n  var _useState15 = (0,react.useState)(\"\"),\n      _useState16 = DashBoard_slicedToArray(_useState15, 2),\n      payoutReports = _useState16[0],\n      setPayoutReports = _useState16[1];\n\n  var _useState17 = (0,react.useState)(\"\"),\n      _useState18 = DashBoard_slicedToArray(_useState17, 2),\n      upiCollectReports = _useState18[0],\n      setUpiCollectReports = _useState18[1];\n\n  var statusReport = {};\n  var userWallet = (0,es/* useSelector */.v9)(function (state) {\n    var _state$login;\n\n    return state === null || state === void 0 ? void 0 : (_state$login = state.login) === null || _state$login === void 0 ? void 0 : _state$login.userWallet;\n  });\n  var transactionReport = \"\";\n\n  if (payout && payout.statusTranscReport && payout.statusTranscReport.data && Array.isArray(payout.statusTranscReport.data)) {\n    transactionReport = payout.statusTranscReport.data.filter(function (item) {\n      return item.status.toLowerCase() == \"done\";\n    });\n    transactionReport = transactionReport[0];\n  } // const totalTransaction = statusReport\n  //   ? parseInt(statusReport.DONE) +\n  //     parseInt(statusReport.FAIL) +\n  //     parseInt(statusReport.REJECTED)\n  //   : \"\";\n\n\n  var fontCss = {\n    fontSize: \"20px\",\n    textAlign: \"center\",\n    fontWeight: \"bold\"\n  };\n\n  var changeMerhcantHandler = function changeMerhcantHandler(e) {\n    console.log(\"e.target;\", e.target.value);\n    var vendorInfo = e.target.value;\n    var vendorInfoArr = vendorInfo.split(\",\");\n    var uuId = vendorInfoArr[0];\n    var userId = vendorInfoArr[1];\n    fetchPTPTransactionDetails(_objectSpread(_objectSpread({}, payloadP2PReports), {}, {\n      userId: userId\n    }));\n    renderUPIGraph(_objectSpread(_objectSpread({}, payloadUPIGraph), {}, {\n      userId: uuId\n    }));\n    renderPayoutGraph(_objectSpread(_objectSpread({}, payloadPayoutGraph), {}, {\n      vendorId: uuId\n    }));\n    renderPTPGraph(_objectSpread(_objectSpread({}, payloadPTPGraph), {}, {\n      userId: uuId\n    }));\n    invokePayoutReports(_objectSpread(_objectSpread({}, payloadPayoutReports), {}, {\n      userId: userId\n    }));\n    invokeUPICollectReports(_objectSpread(_objectSpread({}, payloadUpiCollectReports), {}, {\n      userId: userId\n    }));\n  };\n\n  var handleDurationCick = function handleDurationCick(duration, event) {\n    event.preventDefault();\n    console.log(\"event\", duration, event);\n    renderUPIGraph({\n      duration: duration\n    });\n    renderPayoutGraph({\n      duration: duration\n    });\n    renderPTPGraph({\n      duration: duration\n    });\n    setDuration(duration);\n  };\n\n  var getRBLBalance = function getRBLBalance() {\n    var successFn = function successFn(response) {\n      if (response !== null && response !== void 0 && response.success) {\n        console.log(\"response111\", response);\n        setRblAccount(response.metaInfo);\n      }\n    };\n\n    var errorFn = function errorFn(error) {};\n\n    var api = new Request/* default */.Z(\"\", successFn, errorFn);\n    return api.get(urls/* default.login.BASE_URL */.Z.login.BASE_URL + urls/* default.Wallet.RBL_WALLET_SUMMARY */.Z.Wallet.RBL_WALLET_SUMMARY);\n  };\n\n  var renderUPIGraph = function renderUPIGraph(payloadUPIGraph) {\n    (0,api/* getUPIGraph */.dX)(payloadUPIGraph).then(function (res) {\n      var _res$data, _res$data2;\n\n      console.log(\"resqqq\", res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.data);\n      setUpiGraph(res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.data);\n    });\n  };\n\n  var renderPayoutGraph = function renderPayoutGraph(payloadPayoutGraph) {\n    (0,api/* getPayoutGraph */.KD)(payloadPayoutGraph).then(function (res) {\n      var _res$data3;\n\n      // console.log(\"resqqq\", res?.data?.data);\n      setPayoutGraph(res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : _res$data3.data);\n    });\n  };\n\n  var renderPTPGraph = function renderPTPGraph(payloadPTPGraph) {\n    (0,api/* getPTPGraph */.nN)(payloadPTPGraph).then(function (res) {\n      var _res$data4;\n\n      // console.log(\"resqqq\", res?.data?.data);\n      setPTPGraph(res === null || res === void 0 ? void 0 : (_res$data4 = res.data) === null || _res$data4 === void 0 ? void 0 : _res$data4.data);\n    });\n  };\n\n  var fetchPTPTransactionDetails = function fetchPTPTransactionDetails(payload) {\n    (0,api/* getPTPUserTxnDetails */.p4)(payload).then(function (res) {\n      var _res$data5;\n\n      if (res !== null && res !== void 0 && (_res$data5 = res.data) !== null && _res$data5 !== void 0 && _res$data5.data) {\n        var _res$data6;\n\n        setPTPTransactionDetails((res === null || res === void 0 ? void 0 : (_res$data6 = res.data) === null || _res$data6 === void 0 ? void 0 : _res$data6.data) || null);\n      }\n    });\n  };\n\n  var invokePayoutReports = function invokePayoutReports(payloadPayoutReports) {\n    (0,api/* fetchPayoutReports */.Lb)(payloadPayoutReports).then(function (res) {\n      var _res$data7;\n\n      console.log(\"res111\", res);\n      setPayoutReports(res === null || res === void 0 ? void 0 : (_res$data7 = res.data) === null || _res$data7 === void 0 ? void 0 : _res$data7.data);\n    });\n  };\n\n  var invokeUPICollectReports = function invokeUPICollectReports(payloadUpiCollectReports) {\n    (0,api/* fetchUPICollectReports */.A8)(payloadUpiCollectReports).then(function (res) {\n      var _res$data8;\n\n      console.log(\"res111\", res);\n      setUpiCollectReports(res === null || res === void 0 ? void 0 : (_res$data8 = res.data) === null || _res$data8 === void 0 ? void 0 : _res$data8.data);\n    });\n  };\n\n  (0,react.useEffect)(function () {\n    var dispatch = props.dispatch,\n        payout = props.payout;\n    dispatch((0,Login/* fetchUserWalletIfNeeded */.b0)());\n    getRBLBalance();\n    fetchPTPTransactionDetails(payloadP2PReports);\n    renderUPIGraph(payloadUPIGraph);\n    renderPayoutGraph(payloadPayoutGraph);\n    renderPTPGraph(payloadPTPGraph);\n    invokePayoutReports(payloadPayoutReports);\n    invokeUPICollectReports(payloadUpiCollectReports);\n  }, []);\n  var login = props.login; //const userPermissions = getUserPermissions(login);\n\n  var statusTranscReport = payout === null || payout === void 0 ? void 0 : (_payout$statusTranscR = payout.statusTranscReport) === null || _payout$statusTranscR === void 0 ? void 0 : _payout$statusTranscR.data; // console.log(\"dashboard\", statusTranscReport, statusReport);\n\n  var changeHandler = function changeHandler(e) {\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value;\n\n    var _filters = JSON.parse(JSON.stringify(filters));\n\n    _filters[name] = value;\n    setFilters(_filters);\n  };\n\n  var submitDateHandler = function submitDateHandler() {\n    console.log(\"filters\", filters.dateFrom, filters.dateTo);\n    renderUPIGraph(_objectSpread(_objectSpread({}, payloadUPIGraph), {}, {\n      dateFrom: filters.dateFrom,\n      dateTo: filters.dateTo\n    }));\n    renderPayoutGraph(_objectSpread(_objectSpread({}, payloadPayoutGraph), {}, {\n      dateFrom: filters.dateFrom,\n      dateTo: filters.dateTo\n    }));\n    renderPTPGraph(_objectSpread(_objectSpread({}, payloadPTPGraph), {}, {\n      fromDate: filters.dateFrom,\n      toDate: filters.dateTo\n    }));\n    fetchPTPTransactionDetails({\n      fromDate: filters.dateFrom,\n      toDate: filters.dateTo\n    });\n  };\n\n  console.log(\"upiGraphupiGraph\", upiGraph);\n  var graphUPI = [];\n  var graphPayout = [];\n  var graphPTP = [];\n\n  if (upiGraph && Array.isArray(upiGraph)) {\n    upiGraph.forEach(function (item) {\n      graphUPI.push([item.date.split(\"-\")[2], +item.transactionAmout]);\n    });\n  }\n\n  if (payoutGraph && Array.isArray(payoutGraph)) {\n    payoutGraph.forEach(function (item) {\n      graphPayout.push([item.date.split(\"-\")[2], +item.transactionAmout]);\n    });\n  }\n\n  if (ptpGraph && Array.isArray(ptpGraph)) {\n    ptpGraph.forEach(function (item) {\n      graphPTP.push([item.date.split(\"-\")[2], +item.transactionAmout]);\n    });\n  }\n\n  var upiGraphInfo = [[\"Days\", \"UPI&QR\"]].concat(graphUPI);\n  var payoutGraphInfo = [[\"Days\", \"Payout\"]].concat(graphPayout);\n  var p2pGraphInfo = [[\"Days\", \"PTP\"]].concat(graphPTP);\n  console.log(\"graphUPI\", upiGraphInfo);\n  var options = {\n    legend: {\n      position: \"none\"\n    },\n    colors: [\"#ff6600\"]\n  };\n  var optionsPayoutGraph = {\n    legend: {\n      position: \"none\"\n    },\n    colors: [\"green\"]\n  };\n  var optionsP2pGraph = {\n    legend: {\n      position: \"none\"\n    },\n    colors: [\"#6495ED\"]\n  };\n  console.log(\"payoutReports\", payoutReports);\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(BreadCrumb/* default */.Z, {\n    heading: \"Dashboard\"\n  }), /*#__PURE__*/react.createElement(PtmVendor_style/* UpiCollectionsStyle */.v, null, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"wallet-wrapper\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"flex list\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"image\"\n  }, /*#__PURE__*/react.createElement(\"img\", {\n    src: \"/images/rupees.png\",\n    alt: \"rupess\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"label\"\n  }, \"Wallet Balance:\"), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"value\"\n  }, \"\\u20B9 \", userWallet && userWallet[\"MAIN_WALLET\"]))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"flex items-center list\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"label\"\n  }, \"RBL Bank:\"), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"value\"\n  }, \"\\u20B9 \", rblAccount.balance)), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"refresh\"\n  }, /*#__PURE__*/react.createElement(\"button\", {\n    onClick: getRBLBalance\n  }, /*#__PURE__*/react.createElement(\"i\", {\n    className: \"fa fa-refresh\",\n    \"aria-hidden\": \"true\"\n  })))))), /*#__PURE__*/react.createElement(PtmVendor_style/* UpiCollectionsStyle */.v, {\n    className: \"card-header lr0 flex item-center space-between dir-col-in-mobile\"\n  }, /*#__PURE__*/react.createElement(\"form\", {\n    className: \"filter-table flex item-center space-between\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"left flex item-center\"\n  }, /*#__PURE__*/react.createElement(\"button\", {\n    className: \"border-btn\".concat(duration == \"today\" ? \" active\" : \"\"),\n    onClick: function onClick(event) {\n      return handleDurationCick(\"today\", event);\n    }\n  }, \"Today\"), /*#__PURE__*/react.createElement(\"button\", {\n    className: \"border-btn\".concat(duration == \"thismonth\" ? \" active\" : \"\"),\n    onClick: function onClick(event) {\n      return handleDurationCick(\"thismonth\", event);\n    }\n  }, \"This Month\"), /*#__PURE__*/react.createElement(\"button\", {\n    className: \"border-btn\".concat(duration == \"thisweek\" ? \" active\" : \"\"),\n    onClick: function onClick(event) {\n      return handleDurationCick(\"thisweek\", event);\n    }\n  }, \"This Week\"), /*#__PURE__*/react.createElement(\"button\", {\n    className: \"border-btn\".concat(duration == \"lastmonth\" ? \" active\" : \"\"),\n    onClick: function onClick(event) {\n      return handleDurationCick(\"lastmonth\", event);\n    }\n  }, \"Last Month\")), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"right flex item-center\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-wrapper flex item-center\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"input\", {\n    name: \"dateFrom\",\n    type: \"date\",\n    className: \"form-control\",\n    placeholder: \"Enter From Date\",\n    onChange: changeHandler,\n    value: filters === null || filters === void 0 ? void 0 : filters.dateFrom\n  })), /*#__PURE__*/react.createElement(\"span\", null, \"To\"), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"input\", {\n    name: \"dateTo\",\n    type: \"date\",\n    className: \"form-control\",\n    placeholder: \"Enter To Date\",\n    onChange: changeHandler,\n    value: filters === null || filters === void 0 ? void 0 : filters.dateTo\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\",\n    onClick: submitDateHandler,\n    style: {\n      padding: \"10px\"\n    }\n  }, /*#__PURE__*/react.createElement(\"i\", {\n    className: \"fa fa-paper-plane\",\n    \"aria-hidden\": \"true\"\n  })))))), /*#__PURE__*/react.createElement(UPIWidget, {\n    data: upiCollectReports,\n    getRBLBalance: getRBLBalance,\n    graphInfo: {\n      graphData: upiGraphInfo,\n      options: options\n    },\n    changeMerhcantHandler: changeMerhcantHandler\n  }), /*#__PURE__*/react.createElement(PayoutWidget, {\n    data: payoutReports,\n    graphInfo: {\n      graphData: payoutGraphInfo,\n      options: optionsPayoutGraph\n    }\n  }), /*#__PURE__*/react.createElement(PTPWidget, {\n    data: ptpTransactionDetails,\n    graphInfo: {\n      graphData: p2pGraphInfo,\n      options: optionsP2pGraph\n    }\n  }),  false && /*#__PURE__*/0);\n};\n\nfunction mapStateToProps(state) {\n  return _objectSpread({}, state);\n}\n\n/* harmony default export */ const DashBoard_DashBoard = ((0,es/* connect */.$j)(mapStateToProps)(DashBoard));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6623\n");

/***/ }),

/***/ 4213:
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * Chart.js\n * http://chartjs.org/\n * Version: 2.4.0\n *\n * Copyright 2016 Nick Downie\n * Released under the MIT license\n * https://github.com/chartjs/Chart.js/blob/master/LICENSE.md\n */\n!function (t) {\n  if (\"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\") module.exports = t();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else { var e; }\n}(function () {\n  return function t(e, a, i) {\n    function n(r, l) {\n      if (!a[r]) {\n        if (!e[r]) {\n          var s = undefined;\n          if (!l && s) return require(r, !0);\n          if (o) return o(r, !0);\n          var d = new Error(\"Cannot find module '\" + r + \"'\");\n          throw d.code = \"MODULE_NOT_FOUND\", d;\n        }\n\n        var u = a[r] = {\n          exports: {}\n        };\n        e[r][0].call(u.exports, function (t) {\n          var a = e[r][1][t];\n          return n(a ? a : t);\n        }, u, u.exports, t, e, a, i);\n      }\n\n      return a[r].exports;\n    }\n\n    for (var o = undefined, r = 0; r < i.length; r++) {\n      n(i[r]);\n    }\n\n    return n;\n  }({\n    1: [function (t, e, a) {}, {}],\n    2: [function (t, e, a) {\n      function i(t) {\n        if (t) {\n          var e = /^#([a-fA-F0-9]{3})$/,\n              a = /^#([a-fA-F0-9]{6})$/,\n              i = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/,\n              n = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/,\n              o = /(\\w+)/,\n              r = [0, 0, 0],\n              l = 1,\n              s = t.match(e);\n\n          if (s) {\n            s = s[1];\n\n            for (var d = 0; d < r.length; d++) {\n              r[d] = parseInt(s[d] + s[d], 16);\n            }\n          } else if (s = t.match(a)) {\n            s = s[1];\n\n            for (var d = 0; d < r.length; d++) {\n              r[d] = parseInt(s.slice(2 * d, 2 * d + 2), 16);\n            }\n          } else if (s = t.match(i)) {\n            for (var d = 0; d < r.length; d++) {\n              r[d] = parseInt(s[d + 1]);\n            }\n\n            l = parseFloat(s[4]);\n          } else if (s = t.match(n)) {\n            for (var d = 0; d < r.length; d++) {\n              r[d] = Math.round(2.55 * parseFloat(s[d + 1]));\n            }\n\n            l = parseFloat(s[4]);\n          } else if (s = t.match(o)) {\n            if (\"transparent\" == s[1]) return [0, 0, 0, 0];\n            if (r = y[s[1]], !r) return;\n          }\n\n          for (var d = 0; d < r.length; d++) {\n            r[d] = v(r[d], 0, 255);\n          }\n\n          return l = l || 0 == l ? v(l, 0, 1) : 1, r[3] = l, r;\n        }\n      }\n\n      function n(t) {\n        if (t) {\n          var e = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/,\n              a = t.match(e);\n\n          if (a) {\n            var i = parseFloat(a[4]),\n                n = v(parseInt(a[1]), 0, 360),\n                o = v(parseFloat(a[2]), 0, 100),\n                r = v(parseFloat(a[3]), 0, 100),\n                l = v(isNaN(i) ? 1 : i, 0, 1);\n            return [n, o, r, l];\n          }\n        }\n      }\n\n      function o(t) {\n        if (t) {\n          var e = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/,\n              a = t.match(e);\n\n          if (a) {\n            var i = parseFloat(a[4]),\n                n = v(parseInt(a[1]), 0, 360),\n                o = v(parseFloat(a[2]), 0, 100),\n                r = v(parseFloat(a[3]), 0, 100),\n                l = v(isNaN(i) ? 1 : i, 0, 1);\n            return [n, o, r, l];\n          }\n        }\n      }\n\n      function r(t) {\n        var e = i(t);\n        return e && e.slice(0, 3);\n      }\n\n      function l(t) {\n        var e = n(t);\n        return e && e.slice(0, 3);\n      }\n\n      function s(t) {\n        var e = i(t);\n        return e ? e[3] : (e = n(t)) ? e[3] : (e = o(t)) ? e[3] : void 0;\n      }\n\n      function d(t) {\n        return \"#\" + x(t[0]) + x(t[1]) + x(t[2]);\n      }\n\n      function u(t, e) {\n        return 1 > e || t[3] && t[3] < 1 ? c(t, e) : \"rgb(\" + t[0] + \", \" + t[1] + \", \" + t[2] + \")\";\n      }\n\n      function c(t, e) {\n        return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), \"rgba(\" + t[0] + \", \" + t[1] + \", \" + t[2] + \", \" + e + \")\";\n      }\n\n      function h(t, e) {\n        if (1 > e || t[3] && t[3] < 1) return f(t, e);\n        var a = Math.round(t[0] / 255 * 100),\n            i = Math.round(t[1] / 255 * 100),\n            n = Math.round(t[2] / 255 * 100);\n        return \"rgb(\" + a + \"%, \" + i + \"%, \" + n + \"%)\";\n      }\n\n      function f(t, e) {\n        var a = Math.round(t[0] / 255 * 100),\n            i = Math.round(t[1] / 255 * 100),\n            n = Math.round(t[2] / 255 * 100);\n        return \"rgba(\" + a + \"%, \" + i + \"%, \" + n + \"%, \" + (e || t[3] || 1) + \")\";\n      }\n\n      function g(t, e) {\n        return 1 > e || t[3] && t[3] < 1 ? p(t, e) : \"hsl(\" + t[0] + \", \" + t[1] + \"%, \" + t[2] + \"%)\";\n      }\n\n      function p(t, e) {\n        return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), \"hsla(\" + t[0] + \", \" + t[1] + \"%, \" + t[2] + \"%, \" + e + \")\";\n      }\n\n      function m(t, e) {\n        return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), \"hwb(\" + t[0] + \", \" + t[1] + \"%, \" + t[2] + \"%\" + (void 0 !== e && 1 !== e ? \", \" + e : \"\") + \")\";\n      }\n\n      function b(t) {\n        return k[t.slice(0, 3)];\n      }\n\n      function v(t, e, a) {\n        return Math.min(Math.max(e, t), a);\n      }\n\n      function x(t) {\n        var e = t.toString(16).toUpperCase();\n        return e.length < 2 ? \"0\" + e : e;\n      }\n\n      var y = t(6);\n      e.exports = {\n        getRgba: i,\n        getHsla: n,\n        getRgb: r,\n        getHsl: l,\n        getHwb: o,\n        getAlpha: s,\n        hexString: d,\n        rgbString: u,\n        rgbaString: c,\n        percentString: h,\n        percentaString: f,\n        hslString: g,\n        hslaString: p,\n        hwbString: m,\n        keyword: b\n      };\n      var k = {};\n\n      for (var S in y) {\n        k[y[S]] = S;\n      }\n    }, {\n      6: 6\n    }],\n    3: [function (t, e, a) {\n      var i = t(5),\n          n = t(2),\n          o = function o(t) {\n        if (t instanceof o) return t;\n        if (!(this instanceof o)) return new o(t);\n        this.values = {\n          rgb: [0, 0, 0],\n          hsl: [0, 0, 0],\n          hsv: [0, 0, 0],\n          hwb: [0, 0, 0],\n          cmyk: [0, 0, 0, 0],\n          alpha: 1\n        };\n        var e;\n        if (\"string\" == typeof t) {\n          if (e = n.getRgba(t)) this.setValues(\"rgb\", e);else if (e = n.getHsla(t)) this.setValues(\"hsl\", e);else {\n            if (!(e = n.getHwb(t))) throw new Error('Unable to parse color from string \"' + t + '\"');\n            this.setValues(\"hwb\", e);\n          }\n        } else if (\"object\" == _typeof(t)) if (e = t, void 0 !== e.r || void 0 !== e.red) this.setValues(\"rgb\", e);else if (void 0 !== e.l || void 0 !== e.lightness) this.setValues(\"hsl\", e);else if (void 0 !== e.v || void 0 !== e.value) this.setValues(\"hsv\", e);else if (void 0 !== e.w || void 0 !== e.whiteness) this.setValues(\"hwb\", e);else {\n          if (void 0 === e.c && void 0 === e.cyan) throw new Error(\"Unable to parse color from object \" + JSON.stringify(t));\n          this.setValues(\"cmyk\", e);\n        }\n      };\n\n      o.prototype = {\n        rgb: function rgb() {\n          return this.setSpace(\"rgb\", arguments);\n        },\n        hsl: function hsl() {\n          return this.setSpace(\"hsl\", arguments);\n        },\n        hsv: function hsv() {\n          return this.setSpace(\"hsv\", arguments);\n        },\n        hwb: function hwb() {\n          return this.setSpace(\"hwb\", arguments);\n        },\n        cmyk: function cmyk() {\n          return this.setSpace(\"cmyk\", arguments);\n        },\n        rgbArray: function rgbArray() {\n          return this.values.rgb;\n        },\n        hslArray: function hslArray() {\n          return this.values.hsl;\n        },\n        hsvArray: function hsvArray() {\n          return this.values.hsv;\n        },\n        hwbArray: function hwbArray() {\n          var t = this.values;\n          return 1 !== t.alpha ? t.hwb.concat([t.alpha]) : t.hwb;\n        },\n        cmykArray: function cmykArray() {\n          return this.values.cmyk;\n        },\n        rgbaArray: function rgbaArray() {\n          var t = this.values;\n          return t.rgb.concat([t.alpha]);\n        },\n        hslaArray: function hslaArray() {\n          var t = this.values;\n          return t.hsl.concat([t.alpha]);\n        },\n        alpha: function alpha(t) {\n          return void 0 === t ? this.values.alpha : (this.setValues(\"alpha\", t), this);\n        },\n        red: function red(t) {\n          return this.setChannel(\"rgb\", 0, t);\n        },\n        green: function green(t) {\n          return this.setChannel(\"rgb\", 1, t);\n        },\n        blue: function blue(t) {\n          return this.setChannel(\"rgb\", 2, t);\n        },\n        hue: function hue(t) {\n          return t && (t %= 360, t = 0 > t ? 360 + t : t), this.setChannel(\"hsl\", 0, t);\n        },\n        saturation: function saturation(t) {\n          return this.setChannel(\"hsl\", 1, t);\n        },\n        lightness: function lightness(t) {\n          return this.setChannel(\"hsl\", 2, t);\n        },\n        saturationv: function saturationv(t) {\n          return this.setChannel(\"hsv\", 1, t);\n        },\n        whiteness: function whiteness(t) {\n          return this.setChannel(\"hwb\", 1, t);\n        },\n        blackness: function blackness(t) {\n          return this.setChannel(\"hwb\", 2, t);\n        },\n        value: function value(t) {\n          return this.setChannel(\"hsv\", 2, t);\n        },\n        cyan: function cyan(t) {\n          return this.setChannel(\"cmyk\", 0, t);\n        },\n        magenta: function magenta(t) {\n          return this.setChannel(\"cmyk\", 1, t);\n        },\n        yellow: function yellow(t) {\n          return this.setChannel(\"cmyk\", 2, t);\n        },\n        black: function black(t) {\n          return this.setChannel(\"cmyk\", 3, t);\n        },\n        hexString: function hexString() {\n          return n.hexString(this.values.rgb);\n        },\n        rgbString: function rgbString() {\n          return n.rgbString(this.values.rgb, this.values.alpha);\n        },\n        rgbaString: function rgbaString() {\n          return n.rgbaString(this.values.rgb, this.values.alpha);\n        },\n        percentString: function percentString() {\n          return n.percentString(this.values.rgb, this.values.alpha);\n        },\n        hslString: function hslString() {\n          return n.hslString(this.values.hsl, this.values.alpha);\n        },\n        hslaString: function hslaString() {\n          return n.hslaString(this.values.hsl, this.values.alpha);\n        },\n        hwbString: function hwbString() {\n          return n.hwbString(this.values.hwb, this.values.alpha);\n        },\n        keyword: function keyword() {\n          return n.keyword(this.values.rgb, this.values.alpha);\n        },\n        rgbNumber: function rgbNumber() {\n          var t = this.values.rgb;\n          return t[0] << 16 | t[1] << 8 | t[2];\n        },\n        luminosity: function luminosity() {\n          for (var t = this.values.rgb, e = [], a = 0; a < t.length; a++) {\n            var i = t[a] / 255;\n            e[a] = 0.03928 >= i ? i / 12.92 : Math.pow((i + 0.055) / 1.055, 2.4);\n          }\n\n          return 0.2126 * e[0] + 0.7152 * e[1] + 0.0722 * e[2];\n        },\n        contrast: function contrast(t) {\n          var e = this.luminosity(),\n              a = t.luminosity();\n          return e > a ? (e + 0.05) / (a + 0.05) : (a + 0.05) / (e + 0.05);\n        },\n        level: function level(t) {\n          var e = this.contrast(t);\n          return e >= 7.1 ? \"AAA\" : e >= 4.5 ? \"AA\" : \"\";\n        },\n        dark: function dark() {\n          var t = this.values.rgb,\n              e = (299 * t[0] + 587 * t[1] + 114 * t[2]) / 1e3;\n          return 128 > e;\n        },\n        light: function light() {\n          return !this.dark();\n        },\n        negate: function negate() {\n          for (var t = [], e = 0; 3 > e; e++) {\n            t[e] = 255 - this.values.rgb[e];\n          }\n\n          return this.setValues(\"rgb\", t), this;\n        },\n        lighten: function lighten(t) {\n          var e = this.values.hsl;\n          return e[2] += e[2] * t, this.setValues(\"hsl\", e), this;\n        },\n        darken: function darken(t) {\n          var e = this.values.hsl;\n          return e[2] -= e[2] * t, this.setValues(\"hsl\", e), this;\n        },\n        saturate: function saturate(t) {\n          var e = this.values.hsl;\n          return e[1] += e[1] * t, this.setValues(\"hsl\", e), this;\n        },\n        desaturate: function desaturate(t) {\n          var e = this.values.hsl;\n          return e[1] -= e[1] * t, this.setValues(\"hsl\", e), this;\n        },\n        whiten: function whiten(t) {\n          var e = this.values.hwb;\n          return e[1] += e[1] * t, this.setValues(\"hwb\", e), this;\n        },\n        blacken: function blacken(t) {\n          var e = this.values.hwb;\n          return e[2] += e[2] * t, this.setValues(\"hwb\", e), this;\n        },\n        greyscale: function greyscale() {\n          var t = this.values.rgb,\n              e = 0.3 * t[0] + 0.59 * t[1] + 0.11 * t[2];\n          return this.setValues(\"rgb\", [e, e, e]), this;\n        },\n        clearer: function clearer(t) {\n          var e = this.values.alpha;\n          return this.setValues(\"alpha\", e - e * t), this;\n        },\n        opaquer: function opaquer(t) {\n          var e = this.values.alpha;\n          return this.setValues(\"alpha\", e + e * t), this;\n        },\n        rotate: function rotate(t) {\n          var e = this.values.hsl,\n              a = (e[0] + t) % 360;\n          return e[0] = 0 > a ? 360 + a : a, this.setValues(\"hsl\", e), this;\n        },\n        mix: function mix(t, e) {\n          var a = this,\n              i = t,\n              n = void 0 === e ? 0.5 : e,\n              o = 2 * n - 1,\n              r = a.alpha() - i.alpha(),\n              l = ((o * r === -1 ? o : (o + r) / (1 + o * r)) + 1) / 2,\n              s = 1 - l;\n          return this.rgb(l * a.red() + s * i.red(), l * a.green() + s * i.green(), l * a.blue() + s * i.blue()).alpha(a.alpha() * n + i.alpha() * (1 - n));\n        },\n        toJSON: function toJSON() {\n          return this.rgb();\n        },\n        clone: function clone() {\n          var t,\n              e,\n              a = new o(),\n              i = this.values,\n              n = a.values;\n\n          for (var r in i) {\n            i.hasOwnProperty(r) && (t = i[r], e = {}.toString.call(t), \"[object Array]\" === e ? n[r] = t.slice(0) : \"[object Number]\" === e ? n[r] = t : console.error(\"unexpected color value:\", t));\n          }\n\n          return a;\n        }\n      }, o.prototype.spaces = {\n        rgb: [\"red\", \"green\", \"blue\"],\n        hsl: [\"hue\", \"saturation\", \"lightness\"],\n        hsv: [\"hue\", \"saturation\", \"value\"],\n        hwb: [\"hue\", \"whiteness\", \"blackness\"],\n        cmyk: [\"cyan\", \"magenta\", \"yellow\", \"black\"]\n      }, o.prototype.maxes = {\n        rgb: [255, 255, 255],\n        hsl: [360, 100, 100],\n        hsv: [360, 100, 100],\n        hwb: [360, 100, 100],\n        cmyk: [100, 100, 100, 100]\n      }, o.prototype.getValues = function (t) {\n        for (var e = this.values, a = {}, i = 0; i < t.length; i++) {\n          a[t.charAt(i)] = e[t][i];\n        }\n\n        return 1 !== e.alpha && (a.a = e.alpha), a;\n      }, o.prototype.setValues = function (t, e) {\n        var a,\n            n = this.values,\n            o = this.spaces,\n            r = this.maxes,\n            l = 1;\n        if (\"alpha\" === t) l = e;else if (e.length) n[t] = e.slice(0, t.length), l = e[t.length];else if (void 0 !== e[t.charAt(0)]) {\n          for (a = 0; a < t.length; a++) {\n            n[t][a] = e[t.charAt(a)];\n          }\n\n          l = e.a;\n        } else if (void 0 !== e[o[t][0]]) {\n          var s = o[t];\n\n          for (a = 0; a < t.length; a++) {\n            n[t][a] = e[s[a]];\n          }\n\n          l = e.alpha;\n        }\n        if (n.alpha = Math.max(0, Math.min(1, void 0 === l ? n.alpha : l)), \"alpha\" === t) return !1;\n        var d;\n\n        for (a = 0; a < t.length; a++) {\n          d = Math.max(0, Math.min(r[t][a], n[t][a])), n[t][a] = Math.round(d);\n        }\n\n        for (var u in o) {\n          u !== t && (n[u] = i[t][u](n[t]));\n        }\n\n        return !0;\n      }, o.prototype.setSpace = function (t, e) {\n        var a = e[0];\n        return void 0 === a ? this.getValues(t) : (\"number\" == typeof a && (a = Array.prototype.slice.call(e)), this.setValues(t, a), this);\n      }, o.prototype.setChannel = function (t, e, a) {\n        var i = this.values[t];\n        return void 0 === a ? i[e] : a === i[e] ? this : (i[e] = a, this.setValues(t, i), this);\n      }, \"undefined\" != typeof window && (window.Color = o), e.exports = o;\n    }, {\n      2: 2,\n      5: 5\n    }],\n    4: [function (t, e, a) {\n      function i(t) {\n        var e,\n            a,\n            i,\n            n = t[0] / 255,\n            o = t[1] / 255,\n            r = t[2] / 255,\n            l = Math.min(n, o, r),\n            s = Math.max(n, o, r),\n            d = s - l;\n        return s == l ? e = 0 : n == s ? e = (o - r) / d : o == s ? e = 2 + (r - n) / d : r == s && (e = 4 + (n - o) / d), e = Math.min(60 * e, 360), 0 > e && (e += 360), i = (l + s) / 2, a = s == l ? 0 : 0.5 >= i ? d / (s + l) : d / (2 - s - l), [e, 100 * a, 100 * i];\n      }\n\n      function n(t) {\n        var e,\n            a,\n            i,\n            n = t[0],\n            o = t[1],\n            r = t[2],\n            l = Math.min(n, o, r),\n            s = Math.max(n, o, r),\n            d = s - l;\n        return a = 0 == s ? 0 : d / s * 1e3 / 10, s == l ? e = 0 : n == s ? e = (o - r) / d : o == s ? e = 2 + (r - n) / d : r == s && (e = 4 + (n - o) / d), e = Math.min(60 * e, 360), 0 > e && (e += 360), i = s / 255 * 1e3 / 10, [e, a, i];\n      }\n\n      function o(t) {\n        var e = t[0],\n            a = t[1],\n            n = t[2],\n            o = i(t)[0],\n            r = 1 / 255 * Math.min(e, Math.min(a, n)),\n            n = 1 - 1 / 255 * Math.max(e, Math.max(a, n));\n        return [o, 100 * r, 100 * n];\n      }\n\n      function l(t) {\n        var e,\n            a,\n            i,\n            n,\n            o = t[0] / 255,\n            r = t[1] / 255,\n            l = t[2] / 255;\n        return n = Math.min(1 - o, 1 - r, 1 - l), e = (1 - o - n) / (1 - n) || 0, a = (1 - r - n) / (1 - n) || 0, i = (1 - l - n) / (1 - n) || 0, [100 * e, 100 * a, 100 * i, 100 * n];\n      }\n\n      function s(t) {\n        return G[JSON.stringify(t)];\n      }\n\n      function d(t) {\n        var e = t[0] / 255,\n            a = t[1] / 255,\n            i = t[2] / 255;\n        e = e > 0.04045 ? Math.pow((e + 0.055) / 1.055, 2.4) : e / 12.92, a = a > 0.04045 ? Math.pow((a + 0.055) / 1.055, 2.4) : a / 12.92, i = i > 0.04045 ? Math.pow((i + 0.055) / 1.055, 2.4) : i / 12.92;\n        var n = 0.4124 * e + 0.3576 * a + 0.1805 * i,\n            o = 0.2126 * e + 0.7152 * a + 0.0722 * i,\n            r = 0.0193 * e + 0.1192 * a + 0.9505 * i;\n        return [100 * n, 100 * o, 100 * r];\n      }\n\n      function u(t) {\n        var e,\n            a,\n            i,\n            n = d(t),\n            o = n[0],\n            r = n[1],\n            l = n[2];\n        return o /= 95.047, r /= 100, l /= 108.883, o = o > 0.008856 ? Math.pow(o, 1 / 3) : 7.787 * o + 16 / 116, r = r > 0.008856 ? Math.pow(r, 1 / 3) : 7.787 * r + 16 / 116, l = l > 0.008856 ? Math.pow(l, 1 / 3) : 7.787 * l + 16 / 116, e = 116 * r - 16, a = 500 * (o - r), i = 200 * (r - l), [e, a, i];\n      }\n\n      function c(t) {\n        return W(u(t));\n      }\n\n      function h(t) {\n        var e,\n            a,\n            i,\n            n,\n            o,\n            r = t[0] / 360,\n            l = t[1] / 100,\n            s = t[2] / 100;\n        if (0 == l) return o = 255 * s, [o, o, o];\n        a = 0.5 > s ? s * (1 + l) : s + l - s * l, e = 2 * s - a, n = [0, 0, 0];\n\n        for (var d = 0; 3 > d; d++) {\n          i = r + 1 / 3 * -(d - 1), 0 > i && i++, i > 1 && i--, o = 1 > 6 * i ? e + 6 * (a - e) * i : 1 > 2 * i ? a : 2 > 3 * i ? e + (a - e) * (2 / 3 - i) * 6 : e, n[d] = 255 * o;\n        }\n\n        return n;\n      }\n\n      function f(t) {\n        var e,\n            a,\n            i = t[0],\n            n = t[1] / 100,\n            o = t[2] / 100;\n        return 0 === o ? [0, 0, 0] : (o *= 2, n *= 1 >= o ? o : 2 - o, a = (o + n) / 2, e = 2 * n / (o + n), [i, 100 * e, 100 * a]);\n      }\n\n      function p(t) {\n        return o(h(t));\n      }\n\n      function m(t) {\n        return l(h(t));\n      }\n\n      function v(t) {\n        return s(h(t));\n      }\n\n      function x(t) {\n        var e = t[0] / 60,\n            a = t[1] / 100,\n            i = t[2] / 100,\n            n = Math.floor(e) % 6,\n            o = e - Math.floor(e),\n            r = 255 * i * (1 - a),\n            l = 255 * i * (1 - a * o),\n            s = 255 * i * (1 - a * (1 - o)),\n            i = 255 * i;\n\n        switch (n) {\n          case 0:\n            return [i, s, r];\n\n          case 1:\n            return [l, i, r];\n\n          case 2:\n            return [r, i, s];\n\n          case 3:\n            return [r, l, i];\n\n          case 4:\n            return [s, r, i];\n\n          case 5:\n            return [i, r, l];\n        }\n      }\n\n      function y(t) {\n        var e,\n            a,\n            i = t[0],\n            n = t[1] / 100,\n            o = t[2] / 100;\n        return a = (2 - n) * o, e = n * o, e /= 1 >= a ? a : 2 - a, e = e || 0, a /= 2, [i, 100 * e, 100 * a];\n      }\n\n      function k(t) {\n        return o(x(t));\n      }\n\n      function S(t) {\n        return l(x(t));\n      }\n\n      function w(t) {\n        return s(x(t));\n      }\n\n      function M(t) {\n        var e,\n            a,\n            i,\n            n,\n            o = t[0] / 360,\n            l = t[1] / 100,\n            s = t[2] / 100,\n            d = l + s;\n\n        switch (d > 1 && (l /= d, s /= d), e = Math.floor(6 * o), a = 1 - s, i = 6 * o - e, 0 != (1 & e) && (i = 1 - i), n = l + i * (a - l), e) {\n          default:\n          case 6:\n          case 0:\n            r = a, g = n, b = l;\n            break;\n\n          case 1:\n            r = n, g = a, b = l;\n            break;\n\n          case 2:\n            r = l, g = a, b = n;\n            break;\n\n          case 3:\n            r = l, g = n, b = a;\n            break;\n\n          case 4:\n            r = n, g = l, b = a;\n            break;\n\n          case 5:\n            r = a, g = l, b = n;\n        }\n\n        return [255 * r, 255 * g, 255 * b];\n      }\n\n      function C(t) {\n        return i(M(t));\n      }\n\n      function D(t) {\n        return n(M(t));\n      }\n\n      function I(t) {\n        return l(M(t));\n      }\n\n      function A(t) {\n        return s(M(t));\n      }\n\n      function T(t) {\n        var e,\n            a,\n            i,\n            n = t[0] / 100,\n            o = t[1] / 100,\n            r = t[2] / 100,\n            l = t[3] / 100;\n        return e = 1 - Math.min(1, n * (1 - l) + l), a = 1 - Math.min(1, o * (1 - l) + l), i = 1 - Math.min(1, r * (1 - l) + l), [255 * e, 255 * a, 255 * i];\n      }\n\n      function P(t) {\n        return i(T(t));\n      }\n\n      function F(t) {\n        return n(T(t));\n      }\n\n      function _(t) {\n        return o(T(t));\n      }\n\n      function R(t) {\n        return s(T(t));\n      }\n\n      function V(t) {\n        var e,\n            a,\n            i,\n            n = t[0] / 100,\n            o = t[1] / 100,\n            r = t[2] / 100;\n        return e = 3.2406 * n + -1.5372 * o + r * -0.4986, a = n * -0.9689 + 1.8758 * o + 0.0415 * r, i = 0.0557 * n + o * -0.204 + 1.057 * r, e = e > 0.0031308 ? 1.055 * Math.pow(e, 1 / 2.4) - 0.055 : e = 12.92 * e, a = a > 0.0031308 ? 1.055 * Math.pow(a, 1 / 2.4) - 0.055 : a = 12.92 * a, i = i > 0.0031308 ? 1.055 * Math.pow(i, 1 / 2.4) - 0.055 : i = 12.92 * i, e = Math.min(Math.max(0, e), 1), a = Math.min(Math.max(0, a), 1), i = Math.min(Math.max(0, i), 1), [255 * e, 255 * a, 255 * i];\n      }\n\n      function L(t) {\n        var e,\n            a,\n            i,\n            n = t[0],\n            o = t[1],\n            r = t[2];\n        return n /= 95.047, o /= 100, r /= 108.883, n = n > 0.008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116, o = o > 0.008856 ? Math.pow(o, 1 / 3) : 7.787 * o + 16 / 116, r = r > 0.008856 ? Math.pow(r, 1 / 3) : 7.787 * r + 16 / 116, e = 116 * o - 16, a = 500 * (n - o), i = 200 * (o - r), [e, a, i];\n      }\n\n      function O(t) {\n        return W(L(t));\n      }\n\n      function B(t) {\n        var e,\n            a,\n            i,\n            n,\n            o = t[0],\n            r = t[1],\n            l = t[2];\n        return 8 >= o ? (a = 100 * o / 903.3, n = 7.787 * (a / 100) + 16 / 116) : (a = 100 * Math.pow((o + 16) / 116, 3), n = Math.pow(a / 100, 1 / 3)), e = 0.008856 >= e / 95.047 ? e = 95.047 * (r / 500 + n - 16 / 116) / 7.787 : 95.047 * Math.pow(r / 500 + n, 3), i = 0.008859 >= i / 108.883 ? i = 108.883 * (n - l / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(n - l / 200, 3), [e, a, i];\n      }\n\n      function W(t) {\n        var e,\n            a,\n            i,\n            n = t[0],\n            o = t[1],\n            r = t[2];\n        return e = Math.atan2(r, o), a = 360 * e / 2 / Math.PI, 0 > a && (a += 360), i = Math.sqrt(o * o + r * r), [n, i, a];\n      }\n\n      function z(t) {\n        return V(B(t));\n      }\n\n      function N(t) {\n        var e,\n            a,\n            i,\n            n = t[0],\n            o = t[1],\n            r = t[2];\n        return i = r / 360 * 2 * Math.PI, e = o * Math.cos(i), a = o * Math.sin(i), [n, e, a];\n      }\n\n      function E(t) {\n        return B(N(t));\n      }\n\n      function H(t) {\n        return z(N(t));\n      }\n\n      function U(t) {\n        return Z[t];\n      }\n\n      function j(t) {\n        return i(U(t));\n      }\n\n      function q(t) {\n        return n(U(t));\n      }\n\n      function Y(t) {\n        return o(U(t));\n      }\n\n      function X(t) {\n        return l(U(t));\n      }\n\n      function K(t) {\n        return u(U(t));\n      }\n\n      function J(t) {\n        return d(U(t));\n      }\n\n      e.exports = {\n        rgb2hsl: i,\n        rgb2hsv: n,\n        rgb2hwb: o,\n        rgb2cmyk: l,\n        rgb2keyword: s,\n        rgb2xyz: d,\n        rgb2lab: u,\n        rgb2lch: c,\n        hsl2rgb: h,\n        hsl2hsv: f,\n        hsl2hwb: p,\n        hsl2cmyk: m,\n        hsl2keyword: v,\n        hsv2rgb: x,\n        hsv2hsl: y,\n        hsv2hwb: k,\n        hsv2cmyk: S,\n        hsv2keyword: w,\n        hwb2rgb: M,\n        hwb2hsl: C,\n        hwb2hsv: D,\n        hwb2cmyk: I,\n        hwb2keyword: A,\n        cmyk2rgb: T,\n        cmyk2hsl: P,\n        cmyk2hsv: F,\n        cmyk2hwb: _,\n        cmyk2keyword: R,\n        keyword2rgb: U,\n        keyword2hsl: j,\n        keyword2hsv: q,\n        keyword2hwb: Y,\n        keyword2cmyk: X,\n        keyword2lab: K,\n        keyword2xyz: J,\n        xyz2rgb: V,\n        xyz2lab: L,\n        xyz2lch: O,\n        lab2xyz: B,\n        lab2rgb: z,\n        lab2lch: W,\n        lch2lab: N,\n        lch2xyz: E,\n        lch2rgb: H\n      };\n      var Z = {\n        aliceblue: [240, 248, 255],\n        antiquewhite: [250, 235, 215],\n        aqua: [0, 255, 255],\n        aquamarine: [127, 255, 212],\n        azure: [240, 255, 255],\n        beige: [245, 245, 220],\n        bisque: [255, 228, 196],\n        black: [0, 0, 0],\n        blanchedalmond: [255, 235, 205],\n        blue: [0, 0, 255],\n        blueviolet: [138, 43, 226],\n        brown: [165, 42, 42],\n        burlywood: [222, 184, 135],\n        cadetblue: [95, 158, 160],\n        chartreuse: [127, 255, 0],\n        chocolate: [210, 105, 30],\n        coral: [255, 127, 80],\n        cornflowerblue: [100, 149, 237],\n        cornsilk: [255, 248, 220],\n        crimson: [220, 20, 60],\n        cyan: [0, 255, 255],\n        darkblue: [0, 0, 139],\n        darkcyan: [0, 139, 139],\n        darkgoldenrod: [184, 134, 11],\n        darkgray: [169, 169, 169],\n        darkgreen: [0, 100, 0],\n        darkgrey: [169, 169, 169],\n        darkkhaki: [189, 183, 107],\n        darkmagenta: [139, 0, 139],\n        darkolivegreen: [85, 107, 47],\n        darkorange: [255, 140, 0],\n        darkorchid: [153, 50, 204],\n        darkred: [139, 0, 0],\n        darksalmon: [233, 150, 122],\n        darkseagreen: [143, 188, 143],\n        darkslateblue: [72, 61, 139],\n        darkslategray: [47, 79, 79],\n        darkslategrey: [47, 79, 79],\n        darkturquoise: [0, 206, 209],\n        darkviolet: [148, 0, 211],\n        deeppink: [255, 20, 147],\n        deepskyblue: [0, 191, 255],\n        dimgray: [105, 105, 105],\n        dimgrey: [105, 105, 105],\n        dodgerblue: [30, 144, 255],\n        firebrick: [178, 34, 34],\n        floralwhite: [255, 250, 240],\n        forestgreen: [34, 139, 34],\n        fuchsia: [255, 0, 255],\n        gainsboro: [220, 220, 220],\n        ghostwhite: [248, 248, 255],\n        gold: [255, 215, 0],\n        goldenrod: [218, 165, 32],\n        gray: [128, 128, 128],\n        green: [0, 128, 0],\n        greenyellow: [173, 255, 47],\n        grey: [128, 128, 128],\n        honeydew: [240, 255, 240],\n        hotpink: [255, 105, 180],\n        indianred: [205, 92, 92],\n        indigo: [75, 0, 130],\n        ivory: [255, 255, 240],\n        khaki: [240, 230, 140],\n        lavender: [230, 230, 250],\n        lavenderblush: [255, 240, 245],\n        lawngreen: [124, 252, 0],\n        lemonchiffon: [255, 250, 205],\n        lightblue: [173, 216, 230],\n        lightcoral: [240, 128, 128],\n        lightcyan: [224, 255, 255],\n        lightgoldenrodyellow: [250, 250, 210],\n        lightgray: [211, 211, 211],\n        lightgreen: [144, 238, 144],\n        lightgrey: [211, 211, 211],\n        lightpink: [255, 182, 193],\n        lightsalmon: [255, 160, 122],\n        lightseagreen: [32, 178, 170],\n        lightskyblue: [135, 206, 250],\n        lightslategray: [119, 136, 153],\n        lightslategrey: [119, 136, 153],\n        lightsteelblue: [176, 196, 222],\n        lightyellow: [255, 255, 224],\n        lime: [0, 255, 0],\n        limegreen: [50, 205, 50],\n        linen: [250, 240, 230],\n        magenta: [255, 0, 255],\n        maroon: [128, 0, 0],\n        mediumaquamarine: [102, 205, 170],\n        mediumblue: [0, 0, 205],\n        mediumorchid: [186, 85, 211],\n        mediumpurple: [147, 112, 219],\n        mediumseagreen: [60, 179, 113],\n        mediumslateblue: [123, 104, 238],\n        mediumspringgreen: [0, 250, 154],\n        mediumturquoise: [72, 209, 204],\n        mediumvioletred: [199, 21, 133],\n        midnightblue: [25, 25, 112],\n        mintcream: [245, 255, 250],\n        mistyrose: [255, 228, 225],\n        moccasin: [255, 228, 181],\n        navajowhite: [255, 222, 173],\n        navy: [0, 0, 128],\n        oldlace: [253, 245, 230],\n        olive: [128, 128, 0],\n        olivedrab: [107, 142, 35],\n        orange: [255, 165, 0],\n        orangered: [255, 69, 0],\n        orchid: [218, 112, 214],\n        palegoldenrod: [238, 232, 170],\n        palegreen: [152, 251, 152],\n        paleturquoise: [175, 238, 238],\n        palevioletred: [219, 112, 147],\n        papayawhip: [255, 239, 213],\n        peachpuff: [255, 218, 185],\n        peru: [205, 133, 63],\n        pink: [255, 192, 203],\n        plum: [221, 160, 221],\n        powderblue: [176, 224, 230],\n        purple: [128, 0, 128],\n        rebeccapurple: [102, 51, 153],\n        red: [255, 0, 0],\n        rosybrown: [188, 143, 143],\n        royalblue: [65, 105, 225],\n        saddlebrown: [139, 69, 19],\n        salmon: [250, 128, 114],\n        sandybrown: [244, 164, 96],\n        seagreen: [46, 139, 87],\n        seashell: [255, 245, 238],\n        sienna: [160, 82, 45],\n        silver: [192, 192, 192],\n        skyblue: [135, 206, 235],\n        slateblue: [106, 90, 205],\n        slategray: [112, 128, 144],\n        slategrey: [112, 128, 144],\n        snow: [255, 250, 250],\n        springgreen: [0, 255, 127],\n        steelblue: [70, 130, 180],\n        tan: [210, 180, 140],\n        teal: [0, 128, 128],\n        thistle: [216, 191, 216],\n        tomato: [255, 99, 71],\n        turquoise: [64, 224, 208],\n        violet: [238, 130, 238],\n        wheat: [245, 222, 179],\n        white: [255, 255, 255],\n        whitesmoke: [245, 245, 245],\n        yellow: [255, 255, 0],\n        yellowgreen: [154, 205, 50]\n      },\n          G = {};\n\n      for (var Q in Z) {\n        G[JSON.stringify(Z[Q])] = Q;\n      }\n    }, {}],\n    5: [function (t, e, a) {\n      var i = t(4),\n          n = function n() {\n        return new d();\n      };\n\n      for (var o in i) {\n        n[o + \"Raw\"] = function (t) {\n          return function (e) {\n            return \"number\" == typeof e && (e = Array.prototype.slice.call(arguments)), i[t](e);\n          };\n        }(o);\n\n        var r = /(\\w+)2(\\w+)/.exec(o),\n            l = r[1],\n            s = r[2];\n        n[l] = n[l] || {}, n[l][s] = n[o] = function (t) {\n          return function (e) {\n            \"number\" == typeof e && (e = Array.prototype.slice.call(arguments));\n            var a = i[t](e);\n            if (\"string\" == typeof a || void 0 === a) return a;\n\n            for (var n = 0; n < a.length; n++) {\n              a[n] = Math.round(a[n]);\n            }\n\n            return a;\n          };\n        }(o);\n      }\n\n      var d = function d() {\n        this.convs = {};\n      };\n\n      d.prototype.routeSpace = function (t, e) {\n        var a = e[0];\n        return void 0 === a ? this.getValues(t) : (\"number\" == typeof a && (a = Array.prototype.slice.call(e)), this.setValues(t, a));\n      }, d.prototype.setValues = function (t, e) {\n        return this.space = t, this.convs = {}, this.convs[t] = e, this;\n      }, d.prototype.getValues = function (t) {\n        var e = this.convs[t];\n\n        if (!e) {\n          var a = this.space,\n              i = this.convs[a];\n          e = n[a][t](i), this.convs[t] = e;\n        }\n\n        return e;\n      }, [\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function (t) {\n        d.prototype[t] = function (e) {\n          return this.routeSpace(t, arguments);\n        };\n      }), e.exports = n;\n    }, {\n      4: 4\n    }],\n    6: [function (t, e, a) {\n      e.exports = {\n        aliceblue: [240, 248, 255],\n        antiquewhite: [250, 235, 215],\n        aqua: [0, 255, 255],\n        aquamarine: [127, 255, 212],\n        azure: [240, 255, 255],\n        beige: [245, 245, 220],\n        bisque: [255, 228, 196],\n        black: [0, 0, 0],\n        blanchedalmond: [255, 235, 205],\n        blue: [0, 0, 255],\n        blueviolet: [138, 43, 226],\n        brown: [165, 42, 42],\n        burlywood: [222, 184, 135],\n        cadetblue: [95, 158, 160],\n        chartreuse: [127, 255, 0],\n        chocolate: [210, 105, 30],\n        coral: [255, 127, 80],\n        cornflowerblue: [100, 149, 237],\n        cornsilk: [255, 248, 220],\n        crimson: [220, 20, 60],\n        cyan: [0, 255, 255],\n        darkblue: [0, 0, 139],\n        darkcyan: [0, 139, 139],\n        darkgoldenrod: [184, 134, 11],\n        darkgray: [169, 169, 169],\n        darkgreen: [0, 100, 0],\n        darkgrey: [169, 169, 169],\n        darkkhaki: [189, 183, 107],\n        darkmagenta: [139, 0, 139],\n        darkolivegreen: [85, 107, 47],\n        darkorange: [255, 140, 0],\n        darkorchid: [153, 50, 204],\n        darkred: [139, 0, 0],\n        darksalmon: [233, 150, 122],\n        darkseagreen: [143, 188, 143],\n        darkslateblue: [72, 61, 139],\n        darkslategray: [47, 79, 79],\n        darkslategrey: [47, 79, 79],\n        darkturquoise: [0, 206, 209],\n        darkviolet: [148, 0, 211],\n        deeppink: [255, 20, 147],\n        deepskyblue: [0, 191, 255],\n        dimgray: [105, 105, 105],\n        dimgrey: [105, 105, 105],\n        dodgerblue: [30, 144, 255],\n        firebrick: [178, 34, 34],\n        floralwhite: [255, 250, 240],\n        forestgreen: [34, 139, 34],\n        fuchsia: [255, 0, 255],\n        gainsboro: [220, 220, 220],\n        ghostwhite: [248, 248, 255],\n        gold: [255, 215, 0],\n        goldenrod: [218, 165, 32],\n        gray: [128, 128, 128],\n        green: [0, 128, 0],\n        greenyellow: [173, 255, 47],\n        grey: [128, 128, 128],\n        honeydew: [240, 255, 240],\n        hotpink: [255, 105, 180],\n        indianred: [205, 92, 92],\n        indigo: [75, 0, 130],\n        ivory: [255, 255, 240],\n        khaki: [240, 230, 140],\n        lavender: [230, 230, 250],\n        lavenderblush: [255, 240, 245],\n        lawngreen: [124, 252, 0],\n        lemonchiffon: [255, 250, 205],\n        lightblue: [173, 216, 230],\n        lightcoral: [240, 128, 128],\n        lightcyan: [224, 255, 255],\n        lightgoldenrodyellow: [250, 250, 210],\n        lightgray: [211, 211, 211],\n        lightgreen: [144, 238, 144],\n        lightgrey: [211, 211, 211],\n        lightpink: [255, 182, 193],\n        lightsalmon: [255, 160, 122],\n        lightseagreen: [32, 178, 170],\n        lightskyblue: [135, 206, 250],\n        lightslategray: [119, 136, 153],\n        lightslategrey: [119, 136, 153],\n        lightsteelblue: [176, 196, 222],\n        lightyellow: [255, 255, 224],\n        lime: [0, 255, 0],\n        limegreen: [50, 205, 50],\n        linen: [250, 240, 230],\n        magenta: [255, 0, 255],\n        maroon: [128, 0, 0],\n        mediumaquamarine: [102, 205, 170],\n        mediumblue: [0, 0, 205],\n        mediumorchid: [186, 85, 211],\n        mediumpurple: [147, 112, 219],\n        mediumseagreen: [60, 179, 113],\n        mediumslateblue: [123, 104, 238],\n        mediumspringgreen: [0, 250, 154],\n        mediumturquoise: [72, 209, 204],\n        mediumvioletred: [199, 21, 133],\n        midnightblue: [25, 25, 112],\n        mintcream: [245, 255, 250],\n        mistyrose: [255, 228, 225],\n        moccasin: [255, 228, 181],\n        navajowhite: [255, 222, 173],\n        navy: [0, 0, 128],\n        oldlace: [253, 245, 230],\n        olive: [128, 128, 0],\n        olivedrab: [107, 142, 35],\n        orange: [255, 165, 0],\n        orangered: [255, 69, 0],\n        orchid: [218, 112, 214],\n        palegoldenrod: [238, 232, 170],\n        palegreen: [152, 251, 152],\n        paleturquoise: [175, 238, 238],\n        palevioletred: [219, 112, 147],\n        papayawhip: [255, 239, 213],\n        peachpuff: [255, 218, 185],\n        peru: [205, 133, 63],\n        pink: [255, 192, 203],\n        plum: [221, 160, 221],\n        powderblue: [176, 224, 230],\n        purple: [128, 0, 128],\n        rebeccapurple: [102, 51, 153],\n        red: [255, 0, 0],\n        rosybrown: [188, 143, 143],\n        royalblue: [65, 105, 225],\n        saddlebrown: [139, 69, 19],\n        salmon: [250, 128, 114],\n        sandybrown: [244, 164, 96],\n        seagreen: [46, 139, 87],\n        seashell: [255, 245, 238],\n        sienna: [160, 82, 45],\n        silver: [192, 192, 192],\n        skyblue: [135, 206, 235],\n        slateblue: [106, 90, 205],\n        slategray: [112, 128, 144],\n        slategrey: [112, 128, 144],\n        snow: [255, 250, 250],\n        springgreen: [0, 255, 127],\n        steelblue: [70, 130, 180],\n        tan: [210, 180, 140],\n        teal: [0, 128, 128],\n        thistle: [216, 191, 216],\n        tomato: [255, 99, 71],\n        turquoise: [64, 224, 208],\n        violet: [238, 130, 238],\n        wheat: [245, 222, 179],\n        white: [255, 255, 255],\n        whitesmoke: [245, 245, 245],\n        yellow: [255, 255, 0],\n        yellowgreen: [154, 205, 50]\n      };\n    }, {}],\n    7: [function (t, e, a) {\n      var i = t(28)();\n      t(26)(i), t(22)(i), t(25)(i), t(21)(i), t(23)(i), t(24)(i), t(29)(i), t(33)(i), t(31)(i), t(34)(i), t(32)(i), t(35)(i), t(30)(i), t(27)(i), t(36)(i), t(37)(i), t(38)(i), t(39)(i), t(40)(i), t(43)(i), t(41)(i), t(42)(i), t(44)(i), t(45)(i), t(46)(i), t(15)(i), t(16)(i), t(17)(i), t(18)(i), t(19)(i), t(20)(i), t(8)(i), t(9)(i), t(10)(i), t(11)(i), t(12)(i), t(13)(i), t(14)(i), window.Chart = e.exports = i;\n    }, {\n      10: 10,\n      11: 11,\n      12: 12,\n      13: 13,\n      14: 14,\n      15: 15,\n      16: 16,\n      17: 17,\n      18: 18,\n      19: 19,\n      20: 20,\n      21: 21,\n      22: 22,\n      23: 23,\n      24: 24,\n      25: 25,\n      26: 26,\n      27: 27,\n      28: 28,\n      29: 29,\n      30: 30,\n      31: 31,\n      32: 32,\n      33: 33,\n      34: 34,\n      35: 35,\n      36: 36,\n      37: 37,\n      38: 38,\n      39: 39,\n      40: 40,\n      41: 41,\n      42: 42,\n      43: 43,\n      44: 44,\n      45: 45,\n      46: 46,\n      8: 8,\n      9: 9\n    }],\n    8: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Bar = function (e, a) {\n          return a.type = \"bar\", new t(e, a);\n        };\n      };\n    }, {}],\n    9: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Bubble = function (e, a) {\n          return a.type = \"bubble\", new t(e, a);\n        };\n      };\n    }, {}],\n    10: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Doughnut = function (e, a) {\n          return a.type = \"doughnut\", new t(e, a);\n        };\n      };\n    }, {}],\n    11: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Line = function (e, a) {\n          return a.type = \"line\", new t(e, a);\n        };\n      };\n    }, {}],\n    12: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.PolarArea = function (e, a) {\n          return a.type = \"polarArea\", new t(e, a);\n        };\n      };\n    }, {}],\n    13: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Radar = function (e, a) {\n          return a.type = \"radar\", new t(e, a);\n        };\n      };\n    }, {}],\n    14: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = {\n          hover: {\n            mode: \"single\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"linear\",\n              position: \"bottom\",\n              id: \"x-axis-1\"\n            }],\n            yAxes: [{\n              type: \"linear\",\n              position: \"left\",\n              id: \"y-axis-1\"\n            }]\n          },\n          tooltips: {\n            callbacks: {\n              title: function title() {\n                return \"\";\n              },\n              label: function label(t) {\n                return \"(\" + t.xLabel + \", \" + t.yLabel + \")\";\n              }\n            }\n          }\n        };\n        t.defaults.scatter = e, t.controllers.scatter = t.controllers.line, t.Scatter = function (e, a) {\n          return a.type = \"scatter\", new t(e, a);\n        };\n      };\n    }, {}],\n    15: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.bar = {\n          hover: {\n            mode: \"label\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"category\",\n              categoryPercentage: 0.8,\n              barPercentage: 0.9,\n              gridLines: {\n                offsetGridLines: !0\n              }\n            }],\n            yAxes: [{\n              type: \"linear\"\n            }]\n          }\n        }, t.controllers.bar = t.DatasetController.extend({\n          dataElementType: t.elements.Rectangle,\n          initialize: function initialize(e, a) {\n            t.DatasetController.prototype.initialize.call(this, e, a), this.getMeta().bar = !0;\n          },\n          getBarCount: function getBarCount() {\n            var t = this,\n                a = 0;\n            return e.each(t.chart.data.datasets, function (e, i) {\n              var n = t.chart.getDatasetMeta(i);\n              n.bar && t.chart.isDatasetVisible(i) && ++a;\n            }, t), a;\n          },\n          update: function update(t) {\n            var a = this;\n            e.each(a.getMeta().data, function (e, i) {\n              a.updateElement(e, i, t);\n            }, a);\n          },\n          updateElement: function updateElement(t, a, i) {\n            var n = this,\n                o = n.getMeta(),\n                r = n.getScaleForId(o.xAxisID),\n                l = n.getScaleForId(o.yAxisID),\n                s = l.getBasePixel(),\n                d = n.chart.options.elements.rectangle,\n                u = t.custom || {},\n                c = n.getDataset();\n            t._xScale = r, t._yScale = l, t._datasetIndex = n.index, t._index = a;\n            var h = n.getRuler(a);\n            t._model = {\n              x: n.calculateBarX(a, n.index, h),\n              y: i ? s : n.calculateBarY(a, n.index),\n              label: n.chart.data.labels[a],\n              datasetLabel: c.label,\n              base: i ? s : n.calculateBarBase(n.index, a),\n              width: n.calculateBarWidth(h),\n              backgroundColor: u.backgroundColor ? u.backgroundColor : e.getValueAtIndexOrDefault(c.backgroundColor, a, d.backgroundColor),\n              borderSkipped: u.borderSkipped ? u.borderSkipped : d.borderSkipped,\n              borderColor: u.borderColor ? u.borderColor : e.getValueAtIndexOrDefault(c.borderColor, a, d.borderColor),\n              borderWidth: u.borderWidth ? u.borderWidth : e.getValueAtIndexOrDefault(c.borderWidth, a, d.borderWidth)\n            }, t.pivot();\n          },\n          calculateBarBase: function calculateBarBase(t, e) {\n            var a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.yAxisID),\n                o = 0;\n\n            if (n.options.stacked) {\n              for (var r = a.chart, l = r.data.datasets, s = Number(l[t].data[e]), d = 0; t > d; d++) {\n                var u = l[d],\n                    c = r.getDatasetMeta(d);\n\n                if (c.bar && c.yAxisID === n.id && r.isDatasetVisible(d)) {\n                  var h = Number(u.data[e]);\n                  o += 0 > s ? Math.min(h, 0) : Math.max(h, 0);\n                }\n              }\n\n              return n.getPixelForValue(o);\n            }\n\n            return n.getBasePixel();\n          },\n          getRuler: function getRuler(t) {\n            var e,\n                a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.xAxisID),\n                o = a.getBarCount();\n            e = \"category\" === n.options.type ? n.getPixelForTick(t + 1) - n.getPixelForTick(t) : n.width / n.ticks.length;\n            var r = e * n.options.categoryPercentage,\n                l = (e - e * n.options.categoryPercentage) / 2,\n                s = r / o;\n\n            if (n.ticks.length !== a.chart.data.labels.length) {\n              var d = n.ticks.length / a.chart.data.labels.length;\n              s *= d;\n            }\n\n            var u = s * n.options.barPercentage,\n                c = s - s * n.options.barPercentage;\n            return {\n              datasetCount: o,\n              tickWidth: e,\n              categoryWidth: r,\n              categorySpacing: l,\n              fullBarWidth: s,\n              barWidth: u,\n              barSpacing: c\n            };\n          },\n          calculateBarWidth: function calculateBarWidth(t) {\n            var e = this.getScaleForId(this.getMeta().xAxisID);\n            return e.options.barThickness ? e.options.barThickness : e.options.stacked ? t.categoryWidth : t.barWidth;\n          },\n          getBarIndex: function getBarIndex(t) {\n            var e,\n                a,\n                i = 0;\n\n            for (a = 0; t > a; ++a) {\n              e = this.chart.getDatasetMeta(a), e.bar && this.chart.isDatasetVisible(a) && ++i;\n            }\n\n            return i;\n          },\n          calculateBarX: function calculateBarX(t, e, a) {\n            var i = this,\n                n = i.getMeta(),\n                o = i.getScaleForId(n.xAxisID),\n                r = i.getBarIndex(e),\n                l = o.getPixelForValue(null, t, e, i.chart.isCombo);\n            return l -= i.chart.isCombo ? a.tickWidth / 2 : 0, o.options.stacked ? l + a.categoryWidth / 2 + a.categorySpacing : l + a.barWidth / 2 + a.categorySpacing + a.barWidth * r + a.barSpacing / 2 + a.barSpacing * r;\n          },\n          calculateBarY: function calculateBarY(t, e) {\n            var a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.yAxisID),\n                o = Number(a.getDataset().data[t]);\n\n            if (n.options.stacked) {\n              for (var r = 0, l = 0, s = 0; e > s; s++) {\n                var d = a.chart.data.datasets[s],\n                    u = a.chart.getDatasetMeta(s);\n\n                if (u.bar && u.yAxisID === n.id && a.chart.isDatasetVisible(s)) {\n                  var c = Number(d.data[t]);\n                  0 > c ? l += c || 0 : r += c || 0;\n                }\n              }\n\n              return 0 > o ? n.getPixelForValue(l + o) : n.getPixelForValue(r + o);\n            }\n\n            return n.getPixelForValue(o);\n          },\n          draw: function draw(t) {\n            var e,\n                a,\n                i = this,\n                n = t || 1,\n                o = i.getMeta().data,\n                r = i.getDataset();\n\n            for (e = 0, a = o.length; a > e; ++e) {\n              var l = r.data[e];\n              null === l || void 0 === l || isNaN(l) || o[e].transition(n).draw();\n            }\n          },\n          setHoverStyle: function setHoverStyle(t) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                i = t._index,\n                n = t.custom || {},\n                o = t._model;\n            o.backgroundColor = n.hoverBackgroundColor ? n.hoverBackgroundColor : e.getValueAtIndexOrDefault(a.hoverBackgroundColor, i, e.getHoverColor(o.backgroundColor)), o.borderColor = n.hoverBorderColor ? n.hoverBorderColor : e.getValueAtIndexOrDefault(a.hoverBorderColor, i, e.getHoverColor(o.borderColor)), o.borderWidth = n.hoverBorderWidth ? n.hoverBorderWidth : e.getValueAtIndexOrDefault(a.hoverBorderWidth, i, o.borderWidth);\n          },\n          removeHoverStyle: function removeHoverStyle(t) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                i = t._index,\n                n = t.custom || {},\n                o = t._model,\n                r = this.chart.options.elements.rectangle;\n            o.backgroundColor = n.backgroundColor ? n.backgroundColor : e.getValueAtIndexOrDefault(a.backgroundColor, i, r.backgroundColor), o.borderColor = n.borderColor ? n.borderColor : e.getValueAtIndexOrDefault(a.borderColor, i, r.borderColor), o.borderWidth = n.borderWidth ? n.borderWidth : e.getValueAtIndexOrDefault(a.borderWidth, i, r.borderWidth);\n          }\n        }), t.defaults.horizontalBar = {\n          hover: {\n            mode: \"label\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"linear\",\n              position: \"bottom\"\n            }],\n            yAxes: [{\n              position: \"left\",\n              type: \"category\",\n              categoryPercentage: 0.8,\n              barPercentage: 0.9,\n              gridLines: {\n                offsetGridLines: !0\n              }\n            }]\n          },\n          elements: {\n            rectangle: {\n              borderSkipped: \"left\"\n            }\n          },\n          tooltips: {\n            callbacks: {\n              title: function title(t, e) {\n                var a = \"\";\n                return t.length > 0 && (t[0].yLabel ? a = t[0].yLabel : e.labels.length > 0 && t[0].index < e.labels.length && (a = e.labels[t[0].index])), a;\n              },\n              label: function label(t, e) {\n                var a = e.datasets[t.datasetIndex].label || \"\";\n                return a + \": \" + t.xLabel;\n              }\n            }\n          }\n        }, t.controllers.horizontalBar = t.controllers.bar.extend({\n          updateElement: function updateElement(t, a, i) {\n            var n = this,\n                o = n.getMeta(),\n                r = n.getScaleForId(o.xAxisID),\n                l = n.getScaleForId(o.yAxisID),\n                s = r.getBasePixel(),\n                d = t.custom || {},\n                u = n.getDataset(),\n                c = n.chart.options.elements.rectangle;\n            t._xScale = r, t._yScale = l, t._datasetIndex = n.index, t._index = a;\n            var h = n.getRuler(a);\n            t._model = {\n              x: i ? s : n.calculateBarX(a, n.index),\n              y: n.calculateBarY(a, n.index, h),\n              label: n.chart.data.labels[a],\n              datasetLabel: u.label,\n              base: i ? s : n.calculateBarBase(n.index, a),\n              height: n.calculateBarHeight(h),\n              backgroundColor: d.backgroundColor ? d.backgroundColor : e.getValueAtIndexOrDefault(u.backgroundColor, a, c.backgroundColor),\n              borderSkipped: d.borderSkipped ? d.borderSkipped : c.borderSkipped,\n              borderColor: d.borderColor ? d.borderColor : e.getValueAtIndexOrDefault(u.borderColor, a, c.borderColor),\n              borderWidth: d.borderWidth ? d.borderWidth : e.getValueAtIndexOrDefault(u.borderWidth, a, c.borderWidth)\n            }, t.draw = function () {\n              function t(t) {\n                return s[(u + t) % 4];\n              }\n\n              var e = this._chart.ctx,\n                  a = this._view,\n                  i = a.height / 2,\n                  n = a.y - i,\n                  o = a.y + i,\n                  r = a.base - (a.base - a.x),\n                  l = a.borderWidth / 2;\n              a.borderWidth && (n += l, o -= l, r += l), e.beginPath(), e.fillStyle = a.backgroundColor, e.strokeStyle = a.borderColor, e.lineWidth = a.borderWidth;\n              var s = [[a.base, o], [a.base, n], [r, n], [r, o]],\n                  d = [\"bottom\", \"left\", \"top\", \"right\"],\n                  u = d.indexOf(a.borderSkipped, 0);\n              -1 === u && (u = 0), e.moveTo.apply(e, t(0));\n\n              for (var c = 1; 4 > c; c++) {\n                e.lineTo.apply(e, t(c));\n              }\n\n              e.fill(), a.borderWidth && e.stroke();\n            }, t.pivot();\n          },\n          calculateBarBase: function calculateBarBase(t, e) {\n            var a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.xAxisID),\n                o = 0;\n\n            if (n.options.stacked) {\n              for (var r = a.chart, l = r.data.datasets, s = Number(l[t].data[e]), d = 0; t > d; d++) {\n                var u = l[d],\n                    c = r.getDatasetMeta(d);\n\n                if (c.bar && c.xAxisID === n.id && r.isDatasetVisible(d)) {\n                  var h = Number(u.data[e]);\n                  o += 0 > s ? Math.min(h, 0) : Math.max(h, 0);\n                }\n              }\n\n              return n.getPixelForValue(o);\n            }\n\n            return n.getBasePixel();\n          },\n          getRuler: function getRuler(t) {\n            var e,\n                a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.yAxisID),\n                o = a.getBarCount();\n            e = \"category\" === n.options.type ? n.getPixelForTick(t + 1) - n.getPixelForTick(t) : n.width / n.ticks.length;\n            var r = e * n.options.categoryPercentage,\n                l = (e - e * n.options.categoryPercentage) / 2,\n                s = r / o;\n\n            if (n.ticks.length !== a.chart.data.labels.length) {\n              var d = n.ticks.length / a.chart.data.labels.length;\n              s *= d;\n            }\n\n            var u = s * n.options.barPercentage,\n                c = s - s * n.options.barPercentage;\n            return {\n              datasetCount: o,\n              tickHeight: e,\n              categoryHeight: r,\n              categorySpacing: l,\n              fullBarHeight: s,\n              barHeight: u,\n              barSpacing: c\n            };\n          },\n          calculateBarHeight: function calculateBarHeight(t) {\n            var e = this,\n                a = e.getScaleForId(e.getMeta().yAxisID);\n            return a.options.barThickness ? a.options.barThickness : a.options.stacked ? t.categoryHeight : t.barHeight;\n          },\n          calculateBarX: function calculateBarX(t, e) {\n            var a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.xAxisID),\n                o = Number(a.getDataset().data[t]);\n\n            if (n.options.stacked) {\n              for (var r = 0, l = 0, s = 0; e > s; s++) {\n                var d = a.chart.data.datasets[s],\n                    u = a.chart.getDatasetMeta(s);\n\n                if (u.bar && u.xAxisID === n.id && a.chart.isDatasetVisible(s)) {\n                  var c = Number(d.data[t]);\n                  0 > c ? l += c || 0 : r += c || 0;\n                }\n              }\n\n              return 0 > o ? n.getPixelForValue(l + o) : n.getPixelForValue(r + o);\n            }\n\n            return n.getPixelForValue(o);\n          },\n          calculateBarY: function calculateBarY(t, e, a) {\n            var i = this,\n                n = i.getMeta(),\n                o = i.getScaleForId(n.yAxisID),\n                r = i.getBarIndex(e),\n                l = o.getPixelForValue(null, t, e, i.chart.isCombo);\n            return l -= i.chart.isCombo ? a.tickHeight / 2 : 0, o.options.stacked ? l + a.categoryHeight / 2 + a.categorySpacing : l + a.barHeight / 2 + a.categorySpacing + a.barHeight * r + a.barSpacing / 2 + a.barSpacing * r;\n          }\n        });\n      };\n    }, {}],\n    16: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.bubble = {\n          hover: {\n            mode: \"single\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"linear\",\n              position: \"bottom\",\n              id: \"x-axis-0\"\n            }],\n            yAxes: [{\n              type: \"linear\",\n              position: \"left\",\n              id: \"y-axis-0\"\n            }]\n          },\n          tooltips: {\n            callbacks: {\n              title: function title() {\n                return \"\";\n              },\n              label: function label(t, e) {\n                var a = e.datasets[t.datasetIndex].label || \"\",\n                    i = e.datasets[t.datasetIndex].data[t.index];\n                return a + \": (\" + t.xLabel + \", \" + t.yLabel + \", \" + i.r + \")\";\n              }\n            }\n          }\n        }, t.controllers.bubble = t.DatasetController.extend({\n          dataElementType: t.elements.Point,\n          update: function update(t) {\n            var a = this,\n                i = a.getMeta(),\n                n = i.data;\n            e.each(n, function (e, i) {\n              a.updateElement(e, i, t);\n            });\n          },\n          updateElement: function updateElement(a, i, n) {\n            var o = this,\n                r = o.getMeta(),\n                l = o.getScaleForId(r.xAxisID),\n                s = o.getScaleForId(r.yAxisID),\n                d = a.custom || {},\n                u = o.getDataset(),\n                c = u.data[i],\n                h = o.chart.options.elements.point,\n                f = o.index;\n            e.extend(a, {\n              _xScale: l,\n              _yScale: s,\n              _datasetIndex: f,\n              _index: i,\n              _model: {\n                x: n ? l.getPixelForDecimal(0.5) : l.getPixelForValue(\"object\" == _typeof(c) ? c : NaN, i, f, o.chart.isCombo),\n                y: n ? s.getBasePixel() : s.getPixelForValue(c, i, f),\n                radius: n ? 0 : d.radius ? d.radius : o.getRadius(c),\n                hitRadius: d.hitRadius ? d.hitRadius : e.getValueAtIndexOrDefault(u.hitRadius, i, h.hitRadius)\n              }\n            }), t.DatasetController.prototype.removeHoverStyle.call(o, a, h);\n            var g = a._model;\n            g.skip = d.skip ? d.skip : isNaN(g.x) || isNaN(g.y), a.pivot();\n          },\n          getRadius: function getRadius(t) {\n            return t.r || this.chart.options.elements.point.radius;\n          },\n          setHoverStyle: function setHoverStyle(a) {\n            var i = this;\n            t.DatasetController.prototype.setHoverStyle.call(i, a);\n            var n = i.chart.data.datasets[a._datasetIndex],\n                o = a._index,\n                r = a.custom || {},\n                l = a._model;\n            l.radius = r.hoverRadius ? r.hoverRadius : e.getValueAtIndexOrDefault(n.hoverRadius, o, i.chart.options.elements.point.hoverRadius) + i.getRadius(n.data[o]);\n          },\n          removeHoverStyle: function removeHoverStyle(e) {\n            var a = this;\n            t.DatasetController.prototype.removeHoverStyle.call(a, e, a.chart.options.elements.point);\n            var i = a.chart.data.datasets[e._datasetIndex].data[e._index],\n                n = e.custom || {},\n                o = e._model;\n            o.radius = n.radius ? n.radius : a.getRadius(i);\n          }\n        });\n      };\n    }, {}],\n    17: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = t.defaults;\n        a.doughnut = {\n          animation: {\n            animateRotate: !0,\n            animateScale: !1\n          },\n          aspectRatio: 1,\n          hover: {\n            mode: \"single\"\n          },\n          legendCallback: function legendCallback(t) {\n            var e = [];\n            e.push('<ul className=\"' + t.id + '-legend\">');\n            var a = t.data,\n                i = a.datasets,\n                n = a.labels;\n            if (i.length) for (var o = 0; o < i[0].data.length; ++o) {\n              e.push('<li><span style=\"background-color:' + i[0].backgroundColor[o] + '\"></span>'), n[o] && e.push(n[o]), e.push(\"</li>\");\n            }\n            return e.push(\"</ul>\"), e.join(\"\");\n          },\n          legend: {\n            labels: {\n              generateLabels: function generateLabels(t) {\n                var a = t.data;\n                return a.labels.length && a.datasets.length ? a.labels.map(function (i, n) {\n                  var o = t.getDatasetMeta(0),\n                      r = a.datasets[0],\n                      l = o.data[n],\n                      s = l && l.custom || {},\n                      d = e.getValueAtIndexOrDefault,\n                      u = t.options.elements.arc,\n                      c = s.backgroundColor ? s.backgroundColor : d(r.backgroundColor, n, u.backgroundColor),\n                      h = s.borderColor ? s.borderColor : d(r.borderColor, n, u.borderColor),\n                      f = s.borderWidth ? s.borderWidth : d(r.borderWidth, n, u.borderWidth);\n                  return {\n                    text: i,\n                    fillStyle: c,\n                    strokeStyle: h,\n                    lineWidth: f,\n                    hidden: isNaN(r.data[n]) || o.data[n].hidden,\n                    index: n\n                  };\n                }) : [];\n              }\n            },\n            onClick: function onClick(t, e) {\n              var a,\n                  i,\n                  n,\n                  o = e.index,\n                  r = this.chart;\n\n              for (a = 0, i = (r.data.datasets || []).length; i > a; ++a) {\n                n = r.getDatasetMeta(a), n.data[o] && (n.data[o].hidden = !n.data[o].hidden);\n              }\n\n              r.update();\n            }\n          },\n          cutoutPercentage: 50,\n          rotation: Math.PI * -0.5,\n          circumference: 2 * Math.PI,\n          tooltips: {\n            callbacks: {\n              title: function title() {\n                return \"\";\n              },\n              label: function label(t, a) {\n                var i = a.labels[t.index],\n                    n = \": \" + a.datasets[t.datasetIndex].data[t.index];\n                return e.isArray(i) ? (i = i.slice(), i[0] += n) : i += n, i;\n              }\n            }\n          }\n        }, a.pie = e.clone(a.doughnut), e.extend(a.pie, {\n          cutoutPercentage: 0\n        }), t.controllers.doughnut = t.controllers.pie = t.DatasetController.extend({\n          dataElementType: t.elements.Arc,\n          linkScales: e.noop,\n          getRingIndex: function getRingIndex(t) {\n            for (var e = 0, a = 0; t > a; ++a) {\n              this.chart.isDatasetVisible(a) && ++e;\n            }\n\n            return e;\n          },\n          update: function update(t) {\n            var a = this,\n                i = a.chart,\n                n = i.chartArea,\n                o = i.options,\n                r = o.elements.arc,\n                l = n.right - n.left - r.borderWidth,\n                s = n.bottom - n.top - r.borderWidth,\n                d = Math.min(l, s),\n                u = {\n              x: 0,\n              y: 0\n            },\n                c = a.getMeta(),\n                h = o.cutoutPercentage,\n                f = o.circumference;\n\n            if (f < 2 * Math.PI) {\n              var g = o.rotation % (2 * Math.PI);\n              g += 2 * Math.PI * (g >= Math.PI ? -1 : g < -Math.PI ? 1 : 0);\n              var p = g + f,\n                  m = {\n                x: Math.cos(g),\n                y: Math.sin(g)\n              },\n                  b = {\n                x: Math.cos(p),\n                y: Math.sin(p)\n              },\n                  v = 0 >= g && p >= 0 || g <= 2 * Math.PI && 2 * Math.PI <= p,\n                  x = g <= 0.5 * Math.PI && 0.5 * Math.PI <= p || g <= 2.5 * Math.PI && 2.5 * Math.PI <= p,\n                  y = g <= -Math.PI && -Math.PI <= p || g <= Math.PI && Math.PI <= p,\n                  k = g <= 0.5 * -Math.PI && 0.5 * -Math.PI <= p || g <= 1.5 * Math.PI && 1.5 * Math.PI <= p,\n                  S = h / 100,\n                  w = {\n                x: y ? -1 : Math.min(m.x * (m.x < 0 ? 1 : S), b.x * (b.x < 0 ? 1 : S)),\n                y: k ? -1 : Math.min(m.y * (m.y < 0 ? 1 : S), b.y * (b.y < 0 ? 1 : S))\n              },\n                  M = {\n                x: v ? 1 : Math.max(m.x * (m.x > 0 ? 1 : S), b.x * (b.x > 0 ? 1 : S)),\n                y: x ? 1 : Math.max(m.y * (m.y > 0 ? 1 : S), b.y * (b.y > 0 ? 1 : S))\n              },\n                  C = {\n                width: 0.5 * (M.x - w.x),\n                height: 0.5 * (M.y - w.y)\n              };\n              d = Math.min(l / C.width, s / C.height), u = {\n                x: (M.x + w.x) * -0.5,\n                y: (M.y + w.y) * -0.5\n              };\n            }\n\n            i.borderWidth = a.getMaxBorderWidth(c.data), i.outerRadius = Math.max((d - i.borderWidth) / 2, 0), i.innerRadius = Math.max(h ? i.outerRadius / 100 * h : 1, 0), i.radiusLength = (i.outerRadius - i.innerRadius) / i.getVisibleDatasetCount(), i.offsetX = u.x * i.outerRadius, i.offsetY = u.y * i.outerRadius, c.total = a.calculateTotal(), a.outerRadius = i.outerRadius - i.radiusLength * a.getRingIndex(a.index), a.innerRadius = a.outerRadius - i.radiusLength, e.each(c.data, function (e, i) {\n              a.updateElement(e, i, t);\n            });\n          },\n          updateElement: function updateElement(t, a, i) {\n            var n = this,\n                o = n.chart,\n                r = o.chartArea,\n                l = o.options,\n                s = l.animation,\n                d = (r.left + r.right) / 2,\n                u = (r.top + r.bottom) / 2,\n                c = l.rotation,\n                h = l.rotation,\n                f = n.getDataset(),\n                g = i && s.animateRotate ? 0 : t.hidden ? 0 : n.calculateCircumference(f.data[a]) * (l.circumference / (2 * Math.PI)),\n                p = i && s.animateScale ? 0 : n.innerRadius,\n                m = i && s.animateScale ? 0 : n.outerRadius,\n                b = e.getValueAtIndexOrDefault;\n            e.extend(t, {\n              _datasetIndex: n.index,\n              _index: a,\n              _model: {\n                x: d + o.offsetX,\n                y: u + o.offsetY,\n                startAngle: c,\n                endAngle: h,\n                circumference: g,\n                outerRadius: m,\n                innerRadius: p,\n                label: b(f.label, a, o.data.labels[a])\n              }\n            });\n            var v = t._model;\n            this.removeHoverStyle(t), i && s.animateRotate || (0 === a ? v.startAngle = l.rotation : v.startAngle = n.getMeta().data[a - 1]._model.endAngle, v.endAngle = v.startAngle + v.circumference), t.pivot();\n          },\n          removeHoverStyle: function removeHoverStyle(e) {\n            t.DatasetController.prototype.removeHoverStyle.call(this, e, this.chart.options.elements.arc);\n          },\n          calculateTotal: function calculateTotal() {\n            var t,\n                a = this.getDataset(),\n                i = this.getMeta(),\n                n = 0;\n            return e.each(i.data, function (e, i) {\n              t = a.data[i], isNaN(t) || e.hidden || (n += Math.abs(t));\n            }), n;\n          },\n          calculateCircumference: function calculateCircumference(t) {\n            var e = this.getMeta().total;\n            return e > 0 && !isNaN(t) ? 2 * Math.PI * (t / e) : 0;\n          },\n          getMaxBorderWidth: function getMaxBorderWidth(t) {\n            for (var e, a, i = 0, n = this.index, o = t.length, r = 0; o > r; r++) {\n              e = t[r]._model ? t[r]._model.borderWidth : 0, a = t[r]._chart ? t[r]._chart.config.data.datasets[n].hoverBorderWidth : 0, i = e > i ? e : i, i = a > i ? a : i;\n            }\n\n            return i;\n          }\n        });\n      };\n    }, {}],\n    18: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          return a.getValueOrDefault(t.showLine, e.showLines);\n        }\n\n        var a = t.helpers;\n        t.defaults.line = {\n          showLines: !0,\n          spanGaps: !1,\n          hover: {\n            mode: \"label\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"category\",\n              id: \"x-axis-0\"\n            }],\n            yAxes: [{\n              type: \"linear\",\n              id: \"y-axis-0\"\n            }]\n          }\n        }, t.controllers.line = t.DatasetController.extend({\n          datasetElementType: t.elements.Line,\n          dataElementType: t.elements.Point,\n          update: function update(t) {\n            var i,\n                n,\n                o,\n                r = this,\n                l = r.getMeta(),\n                s = l.dataset,\n                d = l.data || [],\n                u = r.chart.options,\n                c = u.elements.line,\n                h = r.getScaleForId(l.yAxisID),\n                f = r.getDataset(),\n                g = e(f, u);\n\n            for (g && (o = s.custom || {}, void 0 !== f.tension && void 0 === f.lineTension && (f.lineTension = f.tension), s._scale = h, s._datasetIndex = r.index, s._children = d, s._model = {\n              spanGaps: f.spanGaps ? f.spanGaps : u.spanGaps,\n              tension: o.tension ? o.tension : a.getValueOrDefault(f.lineTension, c.tension),\n              backgroundColor: o.backgroundColor ? o.backgroundColor : f.backgroundColor || c.backgroundColor,\n              borderWidth: o.borderWidth ? o.borderWidth : f.borderWidth || c.borderWidth,\n              borderColor: o.borderColor ? o.borderColor : f.borderColor || c.borderColor,\n              borderCapStyle: o.borderCapStyle ? o.borderCapStyle : f.borderCapStyle || c.borderCapStyle,\n              borderDash: o.borderDash ? o.borderDash : f.borderDash || c.borderDash,\n              borderDashOffset: o.borderDashOffset ? o.borderDashOffset : f.borderDashOffset || c.borderDashOffset,\n              borderJoinStyle: o.borderJoinStyle ? o.borderJoinStyle : f.borderJoinStyle || c.borderJoinStyle,\n              fill: o.fill ? o.fill : void 0 !== f.fill ? f.fill : c.fill,\n              steppedLine: o.steppedLine ? o.steppedLine : a.getValueOrDefault(f.steppedLine, c.stepped),\n              cubicInterpolationMode: o.cubicInterpolationMode ? o.cubicInterpolationMode : a.getValueOrDefault(f.cubicInterpolationMode, c.cubicInterpolationMode),\n              scaleTop: h.top,\n              scaleBottom: h.bottom,\n              scaleZero: h.getBasePixel()\n            }, s.pivot()), i = 0, n = d.length; n > i; ++i) {\n              r.updateElement(d[i], i, t);\n            }\n\n            for (g && 0 !== s._model.tension && r.updateBezierControlPoints(), i = 0, n = d.length; n > i; ++i) {\n              d[i].pivot();\n            }\n          },\n          getPointBackgroundColor: function getPointBackgroundColor(t, e) {\n            var i = this.chart.options.elements.point.backgroundColor,\n                n = this.getDataset(),\n                o = t.custom || {};\n            return o.backgroundColor ? i = o.backgroundColor : n.pointBackgroundColor ? i = a.getValueAtIndexOrDefault(n.pointBackgroundColor, e, i) : n.backgroundColor && (i = n.backgroundColor), i;\n          },\n          getPointBorderColor: function getPointBorderColor(t, e) {\n            var i = this.chart.options.elements.point.borderColor,\n                n = this.getDataset(),\n                o = t.custom || {};\n            return o.borderColor ? i = o.borderColor : n.pointBorderColor ? i = a.getValueAtIndexOrDefault(n.pointBorderColor, e, i) : n.borderColor && (i = n.borderColor), i;\n          },\n          getPointBorderWidth: function getPointBorderWidth(t, e) {\n            var i = this.chart.options.elements.point.borderWidth,\n                n = this.getDataset(),\n                o = t.custom || {};\n            return o.borderWidth ? i = o.borderWidth : n.pointBorderWidth ? i = a.getValueAtIndexOrDefault(n.pointBorderWidth, e, i) : n.borderWidth && (i = n.borderWidth), i;\n          },\n          updateElement: function updateElement(t, e, i) {\n            var n,\n                o,\n                r = this,\n                l = r.getMeta(),\n                s = t.custom || {},\n                d = r.getDataset(),\n                u = r.index,\n                c = d.data[e],\n                h = r.getScaleForId(l.yAxisID),\n                f = r.getScaleForId(l.xAxisID),\n                g = r.chart.options.elements.point,\n                p = r.chart.data.labels || [],\n                m = 1 === p.length || 1 === d.data.length || r.chart.isCombo;\n            void 0 !== d.radius && void 0 === d.pointRadius && (d.pointRadius = d.radius), void 0 !== d.hitRadius && void 0 === d.pointHitRadius && (d.pointHitRadius = d.hitRadius), n = f.getPixelForValue(\"object\" == _typeof(c) ? c : NaN, e, u, m), o = i ? h.getBasePixel() : r.calculatePointY(c, e, u), t._xScale = f, t._yScale = h, t._datasetIndex = u, t._index = e, t._model = {\n              x: n,\n              y: o,\n              skip: s.skip || isNaN(n) || isNaN(o),\n              radius: s.radius || a.getValueAtIndexOrDefault(d.pointRadius, e, g.radius),\n              pointStyle: s.pointStyle || a.getValueAtIndexOrDefault(d.pointStyle, e, g.pointStyle),\n              backgroundColor: r.getPointBackgroundColor(t, e),\n              borderColor: r.getPointBorderColor(t, e),\n              borderWidth: r.getPointBorderWidth(t, e),\n              tension: l.dataset._model ? l.dataset._model.tension : 0,\n              steppedLine: l.dataset._model ? l.dataset._model.steppedLine : !1,\n              hitRadius: s.hitRadius || a.getValueAtIndexOrDefault(d.pointHitRadius, e, g.hitRadius)\n            };\n          },\n          calculatePointY: function calculatePointY(t, e, a) {\n            var i,\n                n,\n                o,\n                r = this,\n                l = r.chart,\n                s = r.getMeta(),\n                d = r.getScaleForId(s.yAxisID),\n                u = 0,\n                c = 0;\n\n            if (d.options.stacked) {\n              for (i = 0; a > i; i++) {\n                if (n = l.data.datasets[i], o = l.getDatasetMeta(i), \"line\" === o.type && o.yAxisID === d.id && l.isDatasetVisible(i)) {\n                  var h = Number(d.getRightValue(n.data[e]));\n                  0 > h ? c += h || 0 : u += h || 0;\n                }\n              }\n\n              var f = Number(d.getRightValue(t));\n              return 0 > f ? d.getPixelForValue(c + f) : d.getPixelForValue(u + f);\n            }\n\n            return d.getPixelForValue(t);\n          },\n          updateBezierControlPoints: function updateBezierControlPoints() {\n            function t(t, e, a) {\n              return Math.max(Math.min(t, a), e);\n            }\n\n            var e,\n                i,\n                n,\n                o,\n                r,\n                l = this,\n                s = l.getMeta(),\n                d = l.chart.chartArea,\n                u = s.data || [];\n            if (s.dataset._model.spanGaps && (u = u.filter(function (t) {\n              return !t._model.skip;\n            })), \"monotone\" === s.dataset._model.cubicInterpolationMode) a.splineCurveMonotone(u);else for (e = 0, i = u.length; i > e; ++e) {\n              n = u[e], o = n._model, r = a.splineCurve(a.previousItem(u, e)._model, o, a.nextItem(u, e)._model, s.dataset._model.tension), o.controlPointPreviousX = r.previous.x, o.controlPointPreviousY = r.previous.y, o.controlPointNextX = r.next.x, o.controlPointNextY = r.next.y;\n            }\n            if (l.chart.options.elements.line.capBezierPoints) for (e = 0, i = u.length; i > e; ++e) {\n              o = u[e]._model, o.controlPointPreviousX = t(o.controlPointPreviousX, d.left, d.right), o.controlPointPreviousY = t(o.controlPointPreviousY, d.top, d.bottom), o.controlPointNextX = t(o.controlPointNextX, d.left, d.right), o.controlPointNextY = t(o.controlPointNextY, d.top, d.bottom);\n            }\n          },\n          draw: function draw(t) {\n            var a,\n                i,\n                n = this,\n                o = n.getMeta(),\n                r = o.data || [],\n                l = t || 1;\n\n            for (a = 0, i = r.length; i > a; ++a) {\n              r[a].transition(l);\n            }\n\n            for (e(n.getDataset(), n.chart.options) && o.dataset.transition(l).draw(), a = 0, i = r.length; i > a; ++a) {\n              r[a].draw();\n            }\n          },\n          setHoverStyle: function setHoverStyle(t) {\n            var e = this.chart.data.datasets[t._datasetIndex],\n                i = t._index,\n                n = t.custom || {},\n                o = t._model;\n            o.radius = n.hoverRadius || a.getValueAtIndexOrDefault(e.pointHoverRadius, i, this.chart.options.elements.point.hoverRadius), o.backgroundColor = n.hoverBackgroundColor || a.getValueAtIndexOrDefault(e.pointHoverBackgroundColor, i, a.getHoverColor(o.backgroundColor)), o.borderColor = n.hoverBorderColor || a.getValueAtIndexOrDefault(e.pointHoverBorderColor, i, a.getHoverColor(o.borderColor)), o.borderWidth = n.hoverBorderWidth || a.getValueAtIndexOrDefault(e.pointHoverBorderWidth, i, o.borderWidth);\n          },\n          removeHoverStyle: function removeHoverStyle(t) {\n            var e = this,\n                i = e.chart.data.datasets[t._datasetIndex],\n                n = t._index,\n                o = t.custom || {},\n                r = t._model;\n            void 0 !== i.radius && void 0 === i.pointRadius && (i.pointRadius = i.radius), r.radius = o.radius || a.getValueAtIndexOrDefault(i.pointRadius, n, e.chart.options.elements.point.radius), r.backgroundColor = e.getPointBackgroundColor(t, n), r.borderColor = e.getPointBorderColor(t, n), r.borderWidth = e.getPointBorderWidth(t, n);\n          }\n        });\n      };\n    }, {}],\n    19: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.polarArea = {\n          scale: {\n            type: \"radialLinear\",\n            lineArc: !0,\n            ticks: {\n              beginAtZero: !0\n            }\n          },\n          animation: {\n            animateRotate: !0,\n            animateScale: !0\n          },\n          startAngle: -0.5 * Math.PI,\n          aspectRatio: 1,\n          legendCallback: function legendCallback(t) {\n            var e = [];\n            e.push('<ul className=\"' + t.id + '-legend\">');\n            var a = t.data,\n                i = a.datasets,\n                n = a.labels;\n            if (i.length) for (var o = 0; o < i[0].data.length; ++o) {\n              e.push('<li><span style=\"background-color:' + i[0].backgroundColor[o] + '\"></span>'), n[o] && e.push(n[o]), e.push(\"</li>\");\n            }\n            return e.push(\"</ul>\"), e.join(\"\");\n          },\n          legend: {\n            labels: {\n              generateLabels: function generateLabels(t) {\n                var a = t.data;\n                return a.labels.length && a.datasets.length ? a.labels.map(function (i, n) {\n                  var o = t.getDatasetMeta(0),\n                      r = a.datasets[0],\n                      l = o.data[n],\n                      s = l.custom || {},\n                      d = e.getValueAtIndexOrDefault,\n                      u = t.options.elements.arc,\n                      c = s.backgroundColor ? s.backgroundColor : d(r.backgroundColor, n, u.backgroundColor),\n                      h = s.borderColor ? s.borderColor : d(r.borderColor, n, u.borderColor),\n                      f = s.borderWidth ? s.borderWidth : d(r.borderWidth, n, u.borderWidth);\n                  return {\n                    text: i,\n                    fillStyle: c,\n                    strokeStyle: h,\n                    lineWidth: f,\n                    hidden: isNaN(r.data[n]) || o.data[n].hidden,\n                    index: n\n                  };\n                }) : [];\n              }\n            },\n            onClick: function onClick(t, e) {\n              var a,\n                  i,\n                  n,\n                  o = e.index,\n                  r = this.chart;\n\n              for (a = 0, i = (r.data.datasets || []).length; i > a; ++a) {\n                n = r.getDatasetMeta(a), n.data[o].hidden = !n.data[o].hidden;\n              }\n\n              r.update();\n            }\n          },\n          tooltips: {\n            callbacks: {\n              title: function title() {\n                return \"\";\n              },\n              label: function label(t, e) {\n                return e.labels[t.index] + \": \" + t.yLabel;\n              }\n            }\n          }\n        }, t.controllers.polarArea = t.DatasetController.extend({\n          dataElementType: t.elements.Arc,\n          linkScales: e.noop,\n          update: function update(t) {\n            var a = this,\n                i = a.chart,\n                n = i.chartArea,\n                o = a.getMeta(),\n                r = i.options,\n                l = r.elements.arc,\n                s = Math.min(n.right - n.left, n.bottom - n.top);\n            i.outerRadius = Math.max((s - l.borderWidth / 2) / 2, 0), i.innerRadius = Math.max(r.cutoutPercentage ? i.outerRadius / 100 * r.cutoutPercentage : 1, 0), i.radiusLength = (i.outerRadius - i.innerRadius) / i.getVisibleDatasetCount(), a.outerRadius = i.outerRadius - i.radiusLength * a.index, a.innerRadius = a.outerRadius - i.radiusLength, o.count = a.countVisibleElements(), e.each(o.data, function (e, i) {\n              a.updateElement(e, i, t);\n            });\n          },\n          updateElement: function updateElement(t, a, i) {\n            for (var n = this, o = n.chart, r = n.getDataset(), l = o.options, s = l.animation, d = o.scale, u = e.getValueAtIndexOrDefault, c = o.data.labels, h = n.calculateCircumference(r.data[a]), f = d.xCenter, g = d.yCenter, p = 0, m = n.getMeta(), b = 0; a > b; ++b) {\n              isNaN(r.data[b]) || m.data[b].hidden || ++p;\n            }\n\n            var v = l.startAngle,\n                x = t.hidden ? 0 : d.getDistanceFromCenterForValue(r.data[a]),\n                y = v + h * p,\n                k = y + (t.hidden ? 0 : h),\n                S = s.animateScale ? 0 : d.getDistanceFromCenterForValue(r.data[a]);\n            e.extend(t, {\n              _datasetIndex: n.index,\n              _index: a,\n              _scale: d,\n              _model: {\n                x: f,\n                y: g,\n                innerRadius: 0,\n                outerRadius: i ? S : x,\n                startAngle: i && s.animateRotate ? v : y,\n                endAngle: i && s.animateRotate ? v : k,\n                label: u(c, a, c[a])\n              }\n            }), n.removeHoverStyle(t), t.pivot();\n          },\n          removeHoverStyle: function removeHoverStyle(e) {\n            t.DatasetController.prototype.removeHoverStyle.call(this, e, this.chart.options.elements.arc);\n          },\n          countVisibleElements: function countVisibleElements() {\n            var t = this.getDataset(),\n                a = this.getMeta(),\n                i = 0;\n            return e.each(a.data, function (e, a) {\n              isNaN(t.data[a]) || e.hidden || i++;\n            }), i;\n          },\n          calculateCircumference: function calculateCircumference(t) {\n            var e = this.getMeta().count;\n            return e > 0 && !isNaN(t) ? 2 * Math.PI / e : 0;\n          }\n        });\n      };\n    }, {}],\n    20: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.radar = {\n          aspectRatio: 1,\n          scale: {\n            type: \"radialLinear\"\n          },\n          elements: {\n            line: {\n              tension: 0\n            }\n          }\n        }, t.controllers.radar = t.DatasetController.extend({\n          datasetElementType: t.elements.Line,\n          dataElementType: t.elements.Point,\n          linkScales: e.noop,\n          update: function update(t) {\n            var a = this,\n                i = a.getMeta(),\n                n = i.dataset,\n                o = i.data,\n                r = n.custom || {},\n                l = a.getDataset(),\n                s = a.chart.options.elements.line,\n                d = a.chart.scale;\n            void 0 !== l.tension && void 0 === l.lineTension && (l.lineTension = l.tension), e.extend(i.dataset, {\n              _datasetIndex: a.index,\n              _children: o,\n              _loop: !0,\n              _model: {\n                tension: r.tension ? r.tension : e.getValueOrDefault(l.lineTension, s.tension),\n                backgroundColor: r.backgroundColor ? r.backgroundColor : l.backgroundColor || s.backgroundColor,\n                borderWidth: r.borderWidth ? r.borderWidth : l.borderWidth || s.borderWidth,\n                borderColor: r.borderColor ? r.borderColor : l.borderColor || s.borderColor,\n                fill: r.fill ? r.fill : void 0 !== l.fill ? l.fill : s.fill,\n                borderCapStyle: r.borderCapStyle ? r.borderCapStyle : l.borderCapStyle || s.borderCapStyle,\n                borderDash: r.borderDash ? r.borderDash : l.borderDash || s.borderDash,\n                borderDashOffset: r.borderDashOffset ? r.borderDashOffset : l.borderDashOffset || s.borderDashOffset,\n                borderJoinStyle: r.borderJoinStyle ? r.borderJoinStyle : l.borderJoinStyle || s.borderJoinStyle,\n                scaleTop: d.top,\n                scaleBottom: d.bottom,\n                scaleZero: d.getBasePosition()\n              }\n            }), i.dataset.pivot(), e.each(o, function (e, i) {\n              a.updateElement(e, i, t);\n            }, a), a.updateBezierControlPoints();\n          },\n          updateElement: function updateElement(t, a, i) {\n            var n = this,\n                o = t.custom || {},\n                r = n.getDataset(),\n                l = n.chart.scale,\n                s = n.chart.options.elements.point,\n                d = l.getPointPositionForValue(a, r.data[a]);\n            e.extend(t, {\n              _datasetIndex: n.index,\n              _index: a,\n              _scale: l,\n              _model: {\n                x: i ? l.xCenter : d.x,\n                y: i ? l.yCenter : d.y,\n                tension: o.tension ? o.tension : e.getValueOrDefault(r.tension, n.chart.options.elements.line.tension),\n                radius: o.radius ? o.radius : e.getValueAtIndexOrDefault(r.pointRadius, a, s.radius),\n                backgroundColor: o.backgroundColor ? o.backgroundColor : e.getValueAtIndexOrDefault(r.pointBackgroundColor, a, s.backgroundColor),\n                borderColor: o.borderColor ? o.borderColor : e.getValueAtIndexOrDefault(r.pointBorderColor, a, s.borderColor),\n                borderWidth: o.borderWidth ? o.borderWidth : e.getValueAtIndexOrDefault(r.pointBorderWidth, a, s.borderWidth),\n                pointStyle: o.pointStyle ? o.pointStyle : e.getValueAtIndexOrDefault(r.pointStyle, a, s.pointStyle),\n                hitRadius: o.hitRadius ? o.hitRadius : e.getValueAtIndexOrDefault(r.hitRadius, a, s.hitRadius)\n              }\n            }), t._model.skip = o.skip ? o.skip : isNaN(t._model.x) || isNaN(t._model.y);\n          },\n          updateBezierControlPoints: function updateBezierControlPoints() {\n            var t = this.chart.chartArea,\n                a = this.getMeta();\n            e.each(a.data, function (i, n) {\n              var o = i._model,\n                  r = e.splineCurve(e.previousItem(a.data, n, !0)._model, o, e.nextItem(a.data, n, !0)._model, o.tension);\n              o.controlPointPreviousX = Math.max(Math.min(r.previous.x, t.right), t.left), o.controlPointPreviousY = Math.max(Math.min(r.previous.y, t.bottom), t.top), o.controlPointNextX = Math.max(Math.min(r.next.x, t.right), t.left), o.controlPointNextY = Math.max(Math.min(r.next.y, t.bottom), t.top), i.pivot();\n            });\n          },\n          draw: function draw(t) {\n            var a = this.getMeta(),\n                i = t || 1;\n            e.each(a.data, function (t) {\n              t.transition(i);\n            }), a.dataset.transition(i).draw(), e.each(a.data, function (t) {\n              t.draw();\n            });\n          },\n          setHoverStyle: function setHoverStyle(t) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                i = t.custom || {},\n                n = t._index,\n                o = t._model;\n            o.radius = i.hoverRadius ? i.hoverRadius : e.getValueAtIndexOrDefault(a.pointHoverRadius, n, this.chart.options.elements.point.hoverRadius), o.backgroundColor = i.hoverBackgroundColor ? i.hoverBackgroundColor : e.getValueAtIndexOrDefault(a.pointHoverBackgroundColor, n, e.getHoverColor(o.backgroundColor)), o.borderColor = i.hoverBorderColor ? i.hoverBorderColor : e.getValueAtIndexOrDefault(a.pointHoverBorderColor, n, e.getHoverColor(o.borderColor)), o.borderWidth = i.hoverBorderWidth ? i.hoverBorderWidth : e.getValueAtIndexOrDefault(a.pointHoverBorderWidth, n, o.borderWidth);\n          },\n          removeHoverStyle: function removeHoverStyle(t) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                i = t.custom || {},\n                n = t._index,\n                o = t._model,\n                r = this.chart.options.elements.point;\n            o.radius = i.radius ? i.radius : e.getValueAtIndexOrDefault(a.radius, n, r.radius), o.backgroundColor = i.backgroundColor ? i.backgroundColor : e.getValueAtIndexOrDefault(a.pointBackgroundColor, n, r.backgroundColor), o.borderColor = i.borderColor ? i.borderColor : e.getValueAtIndexOrDefault(a.pointBorderColor, n, r.borderColor), o.borderWidth = i.borderWidth ? i.borderWidth : e.getValueAtIndexOrDefault(a.pointBorderWidth, n, r.borderWidth);\n          }\n        });\n      };\n    }, {}],\n    21: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.global.animation = {\n          duration: 1e3,\n          easing: \"easeOutQuart\",\n          onProgress: e.noop,\n          onComplete: e.noop\n        }, t.Animation = t.Element.extend({\n          currentStep: null,\n          numSteps: 60,\n          easing: \"\",\n          render: null,\n          onAnimationProgress: null,\n          onAnimationComplete: null\n        }), t.animationService = {\n          frameDuration: 17,\n          animations: [],\n          dropFrames: 0,\n          request: null,\n          addAnimation: function addAnimation(t, e, a, i) {\n            var n = this;\n            i || (t.animating = !0);\n\n            for (var o = 0; o < n.animations.length; ++o) {\n              if (n.animations[o].chartInstance === t) return void (n.animations[o].animationObject = e);\n            }\n\n            n.animations.push({\n              chartInstance: t,\n              animationObject: e\n            }), 1 === n.animations.length && n.requestAnimationFrame();\n          },\n          cancelAnimation: function cancelAnimation(t) {\n            var a = e.findIndex(this.animations, function (e) {\n              return e.chartInstance === t;\n            });\n            -1 !== a && (this.animations.splice(a, 1), t.animating = !1);\n          },\n          requestAnimationFrame: function requestAnimationFrame() {\n            var t = this;\n            null === t.request && (t.request = e.requestAnimFrame.call(window, function () {\n              t.request = null, t.startDigest();\n            }));\n          },\n          startDigest: function startDigest() {\n            var t = this,\n                e = Date.now(),\n                a = 0;\n            t.dropFrames > 1 && (a = Math.floor(t.dropFrames), t.dropFrames = t.dropFrames % 1);\n\n            for (var i = 0; i < t.animations.length;) {\n              null === t.animations[i].animationObject.currentStep && (t.animations[i].animationObject.currentStep = 0), t.animations[i].animationObject.currentStep += 1 + a, t.animations[i].animationObject.currentStep > t.animations[i].animationObject.numSteps && (t.animations[i].animationObject.currentStep = t.animations[i].animationObject.numSteps), t.animations[i].animationObject.render(t.animations[i].chartInstance, t.animations[i].animationObject), t.animations[i].animationObject.onAnimationProgress && t.animations[i].animationObject.onAnimationProgress.call && t.animations[i].animationObject.onAnimationProgress.call(t.animations[i].chartInstance, t.animations[i]), t.animations[i].animationObject.currentStep === t.animations[i].animationObject.numSteps ? (t.animations[i].animationObject.onAnimationComplete && t.animations[i].animationObject.onAnimationComplete.call && t.animations[i].animationObject.onAnimationComplete.call(t.animations[i].chartInstance, t.animations[i]), t.animations[i].chartInstance.animating = !1, t.animations.splice(i, 1)) : ++i;\n            }\n\n            var n = Date.now(),\n                o = (n - e) / t.frameDuration;\n            t.dropFrames += o, t.animations.length > 0 && t.requestAnimationFrame();\n          }\n        };\n      };\n    }, {}],\n    22: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.canvasHelpers = {};\n\n        e.drawPoint = function (t, e, a, i, n) {\n          var o, r, l, s, d, u;\n          if (\"object\" == _typeof(e) && (o = e.toString(), \"[object HTMLImageElement]\" === o || \"[object HTMLCanvasElement]\" === o)) return void t.drawImage(e, i - e.width / 2, n - e.height / 2);\n\n          if (!(isNaN(a) || 0 >= a)) {\n            switch (e) {\n              default:\n                t.beginPath(), t.arc(i, n, a, 0, 2 * Math.PI), t.closePath(), t.fill();\n                break;\n\n              case \"triangle\":\n                t.beginPath(), r = 3 * a / Math.sqrt(3), d = r * Math.sqrt(3) / 2, t.moveTo(i - r / 2, n + d / 3), t.lineTo(i + r / 2, n + d / 3), t.lineTo(i, n - 2 * d / 3), t.closePath(), t.fill();\n                break;\n\n              case \"rect\":\n                u = 1 / Math.SQRT2 * a, t.beginPath(), t.fillRect(i - u, n - u, 2 * u, 2 * u), t.strokeRect(i - u, n - u, 2 * u, 2 * u);\n                break;\n\n              case \"rectRot\":\n                u = 1 / Math.SQRT2 * a, t.beginPath(), t.moveTo(i - u, n), t.lineTo(i, n + u), t.lineTo(i + u, n), t.lineTo(i, n - u), t.closePath(), t.fill();\n                break;\n\n              case \"cross\":\n                t.beginPath(), t.moveTo(i, n + a), t.lineTo(i, n - a), t.moveTo(i - a, n), t.lineTo(i + a, n), t.closePath();\n                break;\n\n              case \"crossRot\":\n                t.beginPath(), l = Math.cos(Math.PI / 4) * a, s = Math.sin(Math.PI / 4) * a, t.moveTo(i - l, n - s), t.lineTo(i + l, n + s), t.moveTo(i - l, n + s), t.lineTo(i + l, n - s), t.closePath();\n                break;\n\n              case \"star\":\n                t.beginPath(), t.moveTo(i, n + a), t.lineTo(i, n - a), t.moveTo(i - a, n), t.lineTo(i + a, n), l = Math.cos(Math.PI / 4) * a, s = Math.sin(Math.PI / 4) * a, t.moveTo(i - l, n - s), t.lineTo(i + l, n + s), t.moveTo(i - l, n + s), t.lineTo(i + l, n - s), t.closePath();\n                break;\n\n              case \"line\":\n                t.beginPath(), t.moveTo(i - a, n), t.lineTo(i + a, n), t.closePath();\n                break;\n\n              case \"dash\":\n                t.beginPath(), t.moveTo(i, n), t.lineTo(i + a, n), t.closePath();\n            }\n\n            t.stroke();\n          }\n        };\n      };\n    }, {}],\n    23: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          var a = r.getStyle(t, e),\n              i = a && a.match(/(\\d+)px/);\n          return i ? Number(i[1]) : void 0;\n        }\n\n        function a(t, a) {\n          var i = t.style,\n              n = t.getAttribute(\"height\"),\n              o = t.getAttribute(\"width\");\n\n          if (t._chartjs = {\n            initial: {\n              height: n,\n              width: o,\n              style: {\n                display: i.display,\n                height: i.height,\n                width: i.width\n              }\n            }\n          }, i.display = i.display || \"block\", null === o || \"\" === o) {\n            var r = e(t, \"width\");\n            void 0 !== r && (t.width = r);\n          }\n\n          if (null === n || \"\" === n) if (\"\" === t.style.height) t.height = t.width / (a.options.aspectRatio || 2);else {\n            var l = e(t, \"height\");\n            void 0 !== r && (t.height = l);\n          }\n          return t;\n        }\n\n        function i(t) {\n          if (t._chartjs) {\n            var e = t._chartjs.initial;\n            [\"height\", \"width\"].forEach(function (a) {\n              var i = e[a];\n              void 0 === i || null === i ? t.removeAttribute(a) : t.setAttribute(a, i);\n            }), r.each(e.style || {}, function (e, a) {\n              t.style[a] = e;\n            }), t.width = t.width, delete t._chartjs;\n          }\n        }\n\n        function n(t, e) {\n          if (\"string\" == typeof t ? t = document.getElementById(t) : t.length && (t = t[0]), t && t.canvas && (t = t.canvas), t instanceof HTMLCanvasElement) {\n            var i = t.getContext && t.getContext(\"2d\");\n            if (i instanceof CanvasRenderingContext2D) return a(t, e), i;\n          }\n\n          return null;\n        }\n\n        function o(e) {\n          e = e || {};\n          var a = e.data = e.data || {};\n          return a.datasets = a.datasets || [], a.labels = a.labels || [], e.options = r.configMerge(t.defaults.global, t.defaults[e.type], e.options || {}), e;\n        }\n\n        var r = t.helpers;\n        t.types = {}, t.instances = {}, t.controllers = {}, t.Controller = function (e, a, i) {\n          var l = this;\n          a = o(a);\n          var s = n(e, a),\n              d = s && s.canvas,\n              u = d && d.height,\n              c = d && d.width;\n          return i.ctx = s, i.canvas = d, i.config = a, i.width = c, i.height = u, i.aspectRatio = u ? c / u : null, l.id = r.uid(), l.chart = i, l.config = a, l.options = a.options, l._bufferedRender = !1, t.instances[l.id] = l, Object.defineProperty(l, \"data\", {\n            get: function get() {\n              return l.config.data;\n            }\n          }), s && d ? (r.retinaScale(i), l.options.responsive && (r.addResizeListener(d.parentNode, function () {\n            l.resize();\n          }), l.resize(!0)), l.initialize(), l) : (console.error(\"Failed to create chart: can't acquire context from the given item\"), l);\n        }, r.extend(t.Controller.prototype, {\n          initialize: function initialize() {\n            var e = this;\n            return t.plugins.notify(\"beforeInit\", [e]), e.bindEvents(), e.ensureScalesHaveIDs(), e.buildOrUpdateControllers(), e.buildScales(), e.updateLayout(), e.resetElements(), e.initToolTip(), e.update(), t.plugins.notify(\"afterInit\", [e]), e;\n          },\n          clear: function clear() {\n            return r.clear(this.chart), this;\n          },\n          stop: function stop() {\n            return t.animationService.cancelAnimation(this), this;\n          },\n          resize: function resize(e) {\n            var a = this,\n                i = a.chart,\n                n = a.options,\n                o = i.canvas,\n                l = n.maintainAspectRatio && i.aspectRatio || null,\n                s = Math.floor(r.getMaximumWidth(o)),\n                d = Math.floor(l ? s / l : r.getMaximumHeight(o));\n\n            if (i.width !== s || i.height !== d) {\n              o.width = i.width = s, o.height = i.height = d, o.style.width = s + \"px\", o.style.height = d + \"px\", r.retinaScale(i);\n              var u = {\n                width: s,\n                height: d\n              };\n              t.plugins.notify(\"resize\", [a, u]), a.options.onResize && a.options.onResize(a, u), e || (a.stop(), a.update(a.options.responsiveAnimationDuration));\n            }\n          },\n          ensureScalesHaveIDs: function ensureScalesHaveIDs() {\n            var t = this.options,\n                e = t.scales || {},\n                a = t.scale;\n            r.each(e.xAxes, function (t, e) {\n              t.id = t.id || \"x-axis-\" + e;\n            }), r.each(e.yAxes, function (t, e) {\n              t.id = t.id || \"y-axis-\" + e;\n            }), a && (a.id = a.id || \"scale\");\n          },\n          buildScales: function buildScales() {\n            var e = this,\n                a = e.options,\n                i = e.scales = {},\n                n = [];\n            a.scales && (n = n.concat((a.scales.xAxes || []).map(function (t) {\n              return {\n                options: t,\n                dtype: \"category\"\n              };\n            }), (a.scales.yAxes || []).map(function (t) {\n              return {\n                options: t,\n                dtype: \"linear\"\n              };\n            }))), a.scale && n.push({\n              options: a.scale,\n              dtype: \"radialLinear\",\n              isDefault: !0\n            }), r.each(n, function (a) {\n              var n = a.options,\n                  o = r.getValueOrDefault(n.type, a.dtype),\n                  l = t.scaleService.getScaleConstructor(o);\n\n              if (l) {\n                var s = new l({\n                  id: n.id,\n                  options: n,\n                  ctx: e.chart.ctx,\n                  chart: e\n                });\n                i[s.id] = s, a.isDefault && (e.scale = s);\n              }\n            }), t.scaleService.addScalesToLayout(this);\n          },\n          updateLayout: function updateLayout() {\n            t.layoutService.update(this, this.chart.width, this.chart.height);\n          },\n          buildOrUpdateControllers: function buildOrUpdateControllers() {\n            var e = this,\n                a = [],\n                i = [];\n            if (r.each(e.data.datasets, function (n, o) {\n              var r = e.getDatasetMeta(o);\n              r.type || (r.type = n.type || e.config.type), a.push(r.type), r.controller ? r.controller.updateIndex(o) : (r.controller = new t.controllers[r.type](e, o), i.push(r.controller));\n            }, e), a.length > 1) for (var n = 1; n < a.length; n++) {\n              if (a[n] !== a[n - 1]) {\n                e.isCombo = !0;\n                break;\n              }\n            }\n            return i;\n          },\n          resetElements: function resetElements() {\n            var t = this;\n            r.each(t.data.datasets, function (e, a) {\n              t.getDatasetMeta(a).controller.reset();\n            }, t);\n          },\n          reset: function reset() {\n            this.resetElements(), this.tooltip.initialize();\n          },\n          update: function update(e, a) {\n            var i = this;\n            t.plugins.notify(\"beforeUpdate\", [i]), i.tooltip._data = i.data;\n            var n = i.buildOrUpdateControllers();\n            r.each(i.data.datasets, function (t, e) {\n              i.getDatasetMeta(e).controller.buildOrUpdateElements();\n            }, i), t.layoutService.update(i, i.chart.width, i.chart.height), t.plugins.notify(\"afterScaleUpdate\", [i]), r.each(n, function (t) {\n              t.reset();\n            }), i.updateDatasets(), t.plugins.notify(\"afterUpdate\", [i]), i._bufferedRender ? i._bufferedRequest = {\n              lazy: a,\n              duration: e\n            } : i.render(e, a);\n          },\n          updateDatasets: function updateDatasets() {\n            var e,\n                a,\n                i = this;\n\n            if (t.plugins.notify(\"beforeDatasetsUpdate\", [i])) {\n              for (e = 0, a = i.data.datasets.length; a > e; ++e) {\n                i.getDatasetMeta(e).controller.update();\n              }\n\n              t.plugins.notify(\"afterDatasetsUpdate\", [i]);\n            }\n          },\n          render: function render(e, a) {\n            var i = this;\n            t.plugins.notify(\"beforeRender\", [i]);\n            var n = i.options.animation;\n\n            if (n && (\"undefined\" != typeof e && 0 !== e || \"undefined\" == typeof e && 0 !== n.duration)) {\n              var o = new t.Animation();\n              o.numSteps = (e || n.duration) / 16.66, o.easing = n.easing, o.render = function (t, e) {\n                var a = r.easingEffects[e.easing],\n                    i = e.currentStep / e.numSteps,\n                    n = a(i);\n                t.draw(n, i, e.currentStep);\n              }, o.onAnimationProgress = n.onProgress, o.onAnimationComplete = n.onComplete, t.animationService.addAnimation(i, o, e, a);\n            } else i.draw(), n && n.onComplete && n.onComplete.call && n.onComplete.call(i);\n\n            return i;\n          },\n          draw: function draw(e) {\n            var a = this,\n                i = e || 1;\n            a.clear(), t.plugins.notify(\"beforeDraw\", [a, i]), r.each(a.boxes, function (t) {\n              t.draw(a.chartArea);\n            }, a), a.scale && a.scale.draw(), t.plugins.notify(\"beforeDatasetsDraw\", [a, i]), r.each(a.data.datasets, function (t, i) {\n              a.isDatasetVisible(i) && a.getDatasetMeta(i).controller.draw(e);\n            }, a, !0), t.plugins.notify(\"afterDatasetsDraw\", [a, i]), a.tooltip.transition(i).draw(), t.plugins.notify(\"afterDraw\", [a, i]);\n          },\n          getElementAtEvent: function getElementAtEvent(e) {\n            return t.Interaction.modes.single(this, e);\n          },\n          getElementsAtEvent: function getElementsAtEvent(e) {\n            return t.Interaction.modes.label(this, e, {\n              intersect: !0\n            });\n          },\n          getElementsAtXAxis: function getElementsAtXAxis(e) {\n            return t.Interaction.modes[\"x-axis\"](this, e, {\n              intersect: !0\n            });\n          },\n          getElementsAtEventForMode: function getElementsAtEventForMode(e, a, i) {\n            var n = t.Interaction.modes[a];\n            return \"function\" == typeof n ? n(this, e, i) : [];\n          },\n          getDatasetAtEvent: function getDatasetAtEvent(e) {\n            return t.Interaction.modes.dataset(this, e);\n          },\n          getDatasetMeta: function getDatasetMeta(t) {\n            var e = this,\n                a = e.data.datasets[t];\n            a._meta || (a._meta = {});\n            var i = a._meta[e.id];\n            return i || (i = a._meta[e.id] = {\n              type: null,\n              data: [],\n              dataset: null,\n              controller: null,\n              hidden: null,\n              xAxisID: null,\n              yAxisID: null\n            }), i;\n          },\n          getVisibleDatasetCount: function getVisibleDatasetCount() {\n            for (var t = 0, e = 0, a = this.data.datasets.length; a > e; ++e) {\n              this.isDatasetVisible(e) && t++;\n            }\n\n            return t;\n          },\n          isDatasetVisible: function isDatasetVisible(t) {\n            var e = this.getDatasetMeta(t);\n            return \"boolean\" == typeof e.hidden ? !e.hidden : !this.data.datasets[t].hidden;\n          },\n          generateLegend: function generateLegend() {\n            return this.options.legendCallback(this);\n          },\n          destroy: function destroy() {\n            var e,\n                a,\n                n,\n                o = this,\n                l = o.chart.canvas;\n\n            for (o.stop(), a = 0, n = o.data.datasets.length; n > a; ++a) {\n              e = o.getDatasetMeta(a), e.controller && (e.controller.destroy(), e.controller = null);\n            }\n\n            l && (r.unbindEvents(o, o.events), r.removeResizeListener(l.parentNode), r.clear(o.chart), i(l), o.chart.canvas = null, o.chart.ctx = null), t.plugins.notify(\"destroy\", [o]), delete t.instances[o.id];\n          },\n          toBase64Image: function toBase64Image() {\n            return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);\n          },\n          initToolTip: function initToolTip() {\n            var e = this;\n            e.tooltip = new t.Tooltip({\n              _chart: e.chart,\n              _chartInstance: e,\n              _data: e.data,\n              _options: e.options.tooltips\n            }, e), e.tooltip.initialize();\n          },\n          bindEvents: function bindEvents() {\n            var t = this;\n            r.bindEvents(t, t.options.events, function (e) {\n              t.eventHandler(e);\n            });\n          },\n          updateHoverStyle: function updateHoverStyle(t, e, a) {\n            var i,\n                n,\n                o,\n                r = a ? \"setHoverStyle\" : \"removeHoverStyle\";\n\n            for (n = 0, o = t.length; o > n; ++n) {\n              i = t[n], i && this.getDatasetMeta(i._datasetIndex).controller[r](i);\n            }\n          },\n          eventHandler: function eventHandler(t) {\n            var e = this,\n                a = e.legend,\n                i = e.tooltip,\n                n = e.options.hover;\n            e._bufferedRender = !0, e._bufferedRequest = null;\n            var o = e.handleEvent(t);\n            o |= a && a.handleEvent(t), o |= i && i.handleEvent(t);\n            var r = e._bufferedRequest;\n            return r ? e.render(r.duration, r.lazy) : o && !e.animating && (e.stop(), e.render(n.animationDuration, !0)), e._bufferedRender = !1, e._bufferedRequest = null, e;\n          },\n          handleEvent: function handleEvent(t) {\n            var e = this,\n                a = e.options || {},\n                i = a.hover,\n                n = !1;\n            return e.lastActive = e.lastActive || [], \"mouseout\" === t.type ? e.active = [] : e.active = e.getElementsAtEventForMode(t, i.mode, i), i.onHover && i.onHover.call(e, e.active), (\"mouseup\" === t.type || \"click\" === t.type) && a.onClick && a.onClick.call(e, t, e.active), e.lastActive.length && e.updateHoverStyle(e.lastActive, i.mode, !1), e.active.length && i.mode && e.updateHoverStyle(e.active, i.mode, !0), n = !r.arrayEquals(e.active, e.lastActive), e.lastActive = e.active, n;\n          }\n        });\n      };\n    }, {}],\n    24: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          return t._chartjs ? void t._chartjs.listeners.push(e) : (Object.defineProperty(t, \"_chartjs\", {\n            configurable: !0,\n            enumerable: !1,\n            value: {\n              listeners: [e]\n            }\n          }), void n.forEach(function (e) {\n            var a = \"onData\" + e.charAt(0).toUpperCase() + e.slice(1),\n                n = t[e];\n            Object.defineProperty(t, e, {\n              configurable: !0,\n              enumerable: !1,\n              value: function value() {\n                var e = Array.prototype.slice.call(arguments),\n                    o = n.apply(this, e);\n                return i.each(t._chartjs.listeners, function (t) {\n                  \"function\" == typeof t[a] && t[a].apply(t, e);\n                }), o;\n              }\n            });\n          }));\n        }\n\n        function a(t, e) {\n          var a = t._chartjs;\n\n          if (a) {\n            var i = a.listeners,\n                o = i.indexOf(e);\n            -1 !== o && i.splice(o, 1), i.length > 0 || (n.forEach(function (e) {\n              delete t[e];\n            }), delete t._chartjs);\n          }\n        }\n\n        var i = t.helpers,\n            n = [\"push\", \"pop\", \"shift\", \"splice\", \"unshift\"];\n        t.DatasetController = function (t, e) {\n          this.initialize(t, e);\n        }, i.extend(t.DatasetController.prototype, {\n          datasetElementType: null,\n          dataElementType: null,\n          initialize: function initialize(t, e) {\n            var a = this;\n            a.chart = t, a.index = e, a.linkScales(), a.addElements();\n          },\n          updateIndex: function updateIndex(t) {\n            this.index = t;\n          },\n          linkScales: function linkScales() {\n            var t = this,\n                e = t.getMeta(),\n                a = t.getDataset();\n            null === e.xAxisID && (e.xAxisID = a.xAxisID || t.chart.options.scales.xAxes[0].id), null === e.yAxisID && (e.yAxisID = a.yAxisID || t.chart.options.scales.yAxes[0].id);\n          },\n          getDataset: function getDataset() {\n            return this.chart.data.datasets[this.index];\n          },\n          getMeta: function getMeta() {\n            return this.chart.getDatasetMeta(this.index);\n          },\n          getScaleForId: function getScaleForId(t) {\n            return this.chart.scales[t];\n          },\n          reset: function reset() {\n            this.update(!0);\n          },\n          destroy: function destroy() {\n            this._data && a(this._data, this);\n          },\n          createMetaDataset: function createMetaDataset() {\n            var t = this,\n                e = t.datasetElementType;\n            return e && new e({\n              _chart: t.chart.chart,\n              _datasetIndex: t.index\n            });\n          },\n          createMetaData: function createMetaData(t) {\n            var e = this,\n                a = e.dataElementType;\n            return a && new a({\n              _chart: e.chart.chart,\n              _datasetIndex: e.index,\n              _index: t\n            });\n          },\n          addElements: function addElements() {\n            var t,\n                e,\n                a = this,\n                i = a.getMeta(),\n                n = a.getDataset().data || [],\n                o = i.data;\n\n            for (t = 0, e = n.length; e > t; ++t) {\n              o[t] = o[t] || a.createMetaData(t);\n            }\n\n            i.dataset = i.dataset || a.createMetaDataset();\n          },\n          addElementAndReset: function addElementAndReset(t) {\n            var e = this.createMetaData(t);\n            this.getMeta().data.splice(t, 0, e), this.updateElement(e, t, !0);\n          },\n          buildOrUpdateElements: function buildOrUpdateElements() {\n            var t = this,\n                i = t.getDataset(),\n                n = i.data || (i.data = []);\n            t._data !== n && (t._data && a(t._data, t), e(n, t), t._data = n), t.resyncElements();\n          },\n          update: i.noop,\n          draw: function draw(t) {\n            var e,\n                a,\n                i = t || 1,\n                n = this.getMeta().data;\n\n            for (e = 0, a = n.length; a > e; ++e) {\n              n[e].transition(i).draw();\n            }\n          },\n          removeHoverStyle: function removeHoverStyle(t, e) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                n = t._index,\n                o = t.custom || {},\n                r = i.getValueAtIndexOrDefault,\n                l = t._model;\n            l.backgroundColor = o.backgroundColor ? o.backgroundColor : r(a.backgroundColor, n, e.backgroundColor), l.borderColor = o.borderColor ? o.borderColor : r(a.borderColor, n, e.borderColor), l.borderWidth = o.borderWidth ? o.borderWidth : r(a.borderWidth, n, e.borderWidth);\n          },\n          setHoverStyle: function setHoverStyle(t) {\n            var e = this.chart.data.datasets[t._datasetIndex],\n                a = t._index,\n                n = t.custom || {},\n                o = i.getValueAtIndexOrDefault,\n                r = i.getHoverColor,\n                l = t._model;\n            l.backgroundColor = n.hoverBackgroundColor ? n.hoverBackgroundColor : o(e.hoverBackgroundColor, a, r(l.backgroundColor)), l.borderColor = n.hoverBorderColor ? n.hoverBorderColor : o(e.hoverBorderColor, a, r(l.borderColor)), l.borderWidth = n.hoverBorderWidth ? n.hoverBorderWidth : o(e.hoverBorderWidth, a, l.borderWidth);\n          },\n          resyncElements: function resyncElements() {\n            var t = this,\n                e = t.getMeta(),\n                a = t.getDataset().data,\n                i = e.data.length,\n                n = a.length;\n            i > n ? e.data.splice(n, i - n) : n > i && t.insertElements(i, n - i);\n          },\n          insertElements: function insertElements(t, e) {\n            for (var a = 0; e > a; ++a) {\n              this.addElementAndReset(t + a);\n            }\n          },\n          onDataPush: function onDataPush() {\n            this.insertElements(this.getDataset().data.length - 1, arguments.length);\n          },\n          onDataPop: function onDataPop() {\n            this.getMeta().data.pop();\n          },\n          onDataShift: function onDataShift() {\n            this.getMeta().data.shift();\n          },\n          onDataSplice: function onDataSplice(t, e) {\n            this.getMeta().data.splice(t, e), this.insertElements(t, arguments.length - 2);\n          },\n          onDataUnshift: function onDataUnshift() {\n            this.insertElements(0, arguments.length);\n          }\n        }), t.DatasetController.extend = i.inherits;\n      };\n    }, {}],\n    25: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.elements = {}, t.Element = function (t) {\n          e.extend(this, t), this.initialize.apply(this, arguments);\n        }, e.extend(t.Element.prototype, {\n          initialize: function initialize() {\n            this.hidden = !1;\n          },\n          pivot: function pivot() {\n            var t = this;\n            return t._view || (t._view = e.clone(t._model)), t._start = e.clone(t._view), t;\n          },\n          transition: function transition(t) {\n            var a = this;\n            return a._view || (a._view = e.clone(a._model)), 1 === t ? (a._view = a._model, a._start = null, a) : (a._start || a.pivot(), e.each(a._model, function (i, n) {\n              if (\"_\" === n[0]) ;else if (a._view.hasOwnProperty(n)) {\n                if (i === a._view[n]) ;else if (\"string\" == typeof i) try {\n                  var o = e.color(a._model[n]).mix(e.color(a._start[n]), t);\n                  a._view[n] = o.rgbString();\n                } catch (r) {\n                  a._view[n] = i;\n                } else if (\"number\" == typeof i) {\n                  var l = void 0 !== a._start[n] && isNaN(a._start[n]) === !1 ? a._start[n] : 0;\n                  a._view[n] = (a._model[n] - l) * t + l;\n                } else a._view[n] = i;\n              } else \"number\" != typeof i || isNaN(a._view[n]) ? a._view[n] = i : a._view[n] = i * t;\n            }, a), a);\n          },\n          tooltipPosition: function tooltipPosition() {\n            return {\n              x: this._model.x,\n              y: this._model.y\n            };\n          },\n          hasValue: function hasValue() {\n            return e.isNumber(this._model.x) && e.isNumber(this._model.y);\n          }\n        }), t.Element.extend = e.inherits;\n      };\n    }, {}],\n    26: [function (t, e, a) {\n      \"use strict\";\n\n      var i = t(3);\n\n      e.exports = function (t) {\n        function e(t, e, a) {\n          var i;\n          return \"string\" == typeof t ? (i = parseInt(t, 10), -1 !== t.indexOf(\"%\") && (i = i / 100 * e.parentNode[a])) : i = t, i;\n        }\n\n        function a(t) {\n          return void 0 !== t && null !== t && \"none\" !== t;\n        }\n\n        function n(t, i, n) {\n          var o = document.defaultView,\n              r = t.parentNode,\n              l = o.getComputedStyle(t)[i],\n              s = o.getComputedStyle(r)[i],\n              d = a(l),\n              u = a(s),\n              c = Number.POSITIVE_INFINITY;\n          return d || u ? Math.min(d ? e(l, t, n) : c, u ? e(s, r, n) : c) : \"none\";\n        }\n\n        var o = t.helpers = {};\n        o.each = function (t, e, a, i) {\n          var n, r;\n          if (o.isArray(t)) {\n            if (r = t.length, i) for (n = r - 1; n >= 0; n--) {\n              e.call(a, t[n], n);\n            } else for (n = 0; r > n; n++) {\n              e.call(a, t[n], n);\n            }\n          } else if (\"object\" == _typeof(t)) {\n            var l = Object.keys(t);\n\n            for (r = l.length, n = 0; r > n; n++) {\n              e.call(a, t[l[n]], l[n]);\n            }\n          }\n        }, o.clone = function (t) {\n          var e = {};\n          return o.each(t, function (t, a) {\n            o.isArray(t) ? e[a] = t.slice(0) : \"object\" == _typeof(t) && null !== t ? e[a] = o.clone(t) : e[a] = t;\n          }), e;\n        }, o.extend = function (t) {\n          for (var e = function e(_e, a) {\n            t[a] = _e;\n          }, a = 1, i = arguments.length; i > a; a++) {\n            o.each(arguments[a], e);\n          }\n\n          return t;\n        }, o.configMerge = function (e) {\n          var a = o.clone(e);\n          return o.each(Array.prototype.slice.call(arguments, 1), function (e) {\n            o.each(e, function (e, i) {\n              var n = a.hasOwnProperty(i),\n                  r = n ? a[i] : {};\n              \"scales\" === i ? a[i] = o.scaleMerge(r, e) : \"scale\" === i ? a[i] = o.configMerge(r, t.scaleService.getScaleDefaults(e.type), e) : !n || \"object\" != _typeof(r) || o.isArray(r) || null === r || \"object\" != _typeof(e) || o.isArray(e) ? a[i] = e : a[i] = o.configMerge(r, e);\n            });\n          }), a;\n        }, o.scaleMerge = function (e, a) {\n          var i = o.clone(e);\n          return o.each(a, function (e, a) {\n            \"xAxes\" === a || \"yAxes\" === a ? i.hasOwnProperty(a) ? o.each(e, function (e, n) {\n              var r = o.getValueOrDefault(e.type, \"xAxes\" === a ? \"category\" : \"linear\"),\n                  l = t.scaleService.getScaleDefaults(r);\n              n >= i[a].length || !i[a][n].type ? i[a].push(o.configMerge(l, e)) : e.type && e.type !== i[a][n].type ? i[a][n] = o.configMerge(i[a][n], l, e) : i[a][n] = o.configMerge(i[a][n], e);\n            }) : (i[a] = [], o.each(e, function (e) {\n              var n = o.getValueOrDefault(e.type, \"xAxes\" === a ? \"category\" : \"linear\");\n              i[a].push(o.configMerge(t.scaleService.getScaleDefaults(n), e));\n            })) : i.hasOwnProperty(a) && \"object\" == _typeof(i[a]) && null !== i[a] && \"object\" == _typeof(e) ? i[a] = o.configMerge(i[a], e) : i[a] = e;\n          }), i;\n        }, o.getValueAtIndexOrDefault = function (t, e, a) {\n          return void 0 === t || null === t ? a : o.isArray(t) ? e < t.length ? t[e] : a : t;\n        }, o.getValueOrDefault = function (t, e) {\n          return void 0 === t ? e : t;\n        }, o.indexOf = Array.prototype.indexOf ? function (t, e) {\n          return t.indexOf(e);\n        } : function (t, e) {\n          for (var a = 0, i = t.length; i > a; ++a) {\n            if (t[a] === e) return a;\n          }\n\n          return -1;\n        }, o.where = function (t, e) {\n          if (o.isArray(t) && Array.prototype.filter) return t.filter(e);\n          var a = [];\n          return o.each(t, function (t) {\n            e(t) && a.push(t);\n          }), a;\n        }, o.findIndex = Array.prototype.findIndex ? function (t, e, a) {\n          return t.findIndex(e, a);\n        } : function (t, e, a) {\n          a = void 0 === a ? t : a;\n\n          for (var i = 0, n = t.length; n > i; ++i) {\n            if (e.call(a, t[i], i, t)) return i;\n          }\n\n          return -1;\n        }, o.findNextWhere = function (t, e, a) {\n          (void 0 === a || null === a) && (a = -1);\n\n          for (var i = a + 1; i < t.length; i++) {\n            var n = t[i];\n            if (e(n)) return n;\n          }\n        }, o.findPreviousWhere = function (t, e, a) {\n          (void 0 === a || null === a) && (a = t.length);\n\n          for (var i = a - 1; i >= 0; i--) {\n            var n = t[i];\n            if (e(n)) return n;\n          }\n        }, o.inherits = function (t) {\n          var e = this,\n              a = t && t.hasOwnProperty(\"constructor\") ? t.constructor : function () {\n            return e.apply(this, arguments);\n          },\n              i = function i() {\n            this.constructor = a;\n          };\n\n          return i.prototype = e.prototype, a.prototype = new i(), a.extend = o.inherits, t && o.extend(a.prototype, t), a.__super__ = e.prototype, a;\n        }, o.noop = function () {}, o.uid = function () {\n          var t = 0;\n          return function () {\n            return t++;\n          };\n        }(), o.isNumber = function (t) {\n          return !isNaN(parseFloat(t)) && isFinite(t);\n        }, o.almostEquals = function (t, e, a) {\n          return Math.abs(t - e) < a;\n        }, o.max = function (t) {\n          return t.reduce(function (t, e) {\n            return isNaN(e) ? t : Math.max(t, e);\n          }, Number.NEGATIVE_INFINITY);\n        }, o.min = function (t) {\n          return t.reduce(function (t, e) {\n            return isNaN(e) ? t : Math.min(t, e);\n          }, Number.POSITIVE_INFINITY);\n        }, o.sign = Math.sign ? function (t) {\n          return Math.sign(t);\n        } : function (t) {\n          return t = +t, 0 === t || isNaN(t) ? t : t > 0 ? 1 : -1;\n        }, o.log10 = Math.log10 ? function (t) {\n          return Math.log10(t);\n        } : function (t) {\n          return Math.log(t) / Math.LN10;\n        }, o.toRadians = function (t) {\n          return t * (Math.PI / 180);\n        }, o.toDegrees = function (t) {\n          return t * (180 / Math.PI);\n        }, o.getAngleFromPoint = function (t, e) {\n          var a = e.x - t.x,\n              i = e.y - t.y,\n              n = Math.sqrt(a * a + i * i),\n              o = Math.atan2(i, a);\n          return o < -0.5 * Math.PI && (o += 2 * Math.PI), {\n            angle: o,\n            distance: n\n          };\n        }, o.distanceBetweenPoints = function (t, e) {\n          return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));\n        }, o.aliasPixel = function (t) {\n          return t % 2 === 0 ? 0 : 0.5;\n        }, o.splineCurve = function (t, e, a, i) {\n          var n = t.skip ? e : t,\n              o = e,\n              r = a.skip ? e : a,\n              l = Math.sqrt(Math.pow(o.x - n.x, 2) + Math.pow(o.y - n.y, 2)),\n              s = Math.sqrt(Math.pow(r.x - o.x, 2) + Math.pow(r.y - o.y, 2)),\n              d = l / (l + s),\n              u = s / (l + s);\n          d = isNaN(d) ? 0 : d, u = isNaN(u) ? 0 : u;\n          var c = i * d,\n              h = i * u;\n          return {\n            previous: {\n              x: o.x - c * (r.x - n.x),\n              y: o.y - c * (r.y - n.y)\n            },\n            next: {\n              x: o.x + h * (r.x - n.x),\n              y: o.y + h * (r.y - n.y)\n            }\n          };\n        }, o.EPSILON = Number.EPSILON || 1e-14, o.splineCurveMonotone = function (t) {\n          var e,\n              a,\n              i,\n              n,\n              r = (t || []).map(function (t) {\n            return {\n              model: t._model,\n              deltaK: 0,\n              mK: 0\n            };\n          }),\n              l = r.length;\n\n          for (e = 0; l > e; ++e) {\n            i = r[e], i.model.skip || (a = e > 0 ? r[e - 1] : null, n = l - 1 > e ? r[e + 1] : null, n && !n.model.skip && (i.deltaK = (n.model.y - i.model.y) / (n.model.x - i.model.x)), !a || a.model.skip ? i.mK = i.deltaK : !n || n.model.skip ? i.mK = a.deltaK : this.sign(a.deltaK) !== this.sign(i.deltaK) ? i.mK = 0 : i.mK = (a.deltaK + i.deltaK) / 2);\n          }\n\n          var s, d, u, c;\n\n          for (e = 0; l - 1 > e; ++e) {\n            i = r[e], n = r[e + 1], i.model.skip || n.model.skip || (o.almostEquals(i.deltaK, 0, this.EPSILON) ? i.mK = n.mK = 0 : (s = i.mK / i.deltaK, d = n.mK / i.deltaK, c = Math.pow(s, 2) + Math.pow(d, 2), 9 >= c || (u = 3 / Math.sqrt(c), i.mK = s * u * i.deltaK, n.mK = d * u * i.deltaK)));\n          }\n\n          var h;\n\n          for (e = 0; l > e; ++e) {\n            i = r[e], i.model.skip || (a = e > 0 ? r[e - 1] : null, n = l - 1 > e ? r[e + 1] : null, a && !a.model.skip && (h = (i.model.x - a.model.x) / 3, i.model.controlPointPreviousX = i.model.x - h, i.model.controlPointPreviousY = i.model.y - h * i.mK), n && !n.model.skip && (h = (n.model.x - i.model.x) / 3, i.model.controlPointNextX = i.model.x + h, i.model.controlPointNextY = i.model.y + h * i.mK));\n          }\n        }, o.nextItem = function (t, e, a) {\n          return a ? e >= t.length - 1 ? t[0] : t[e + 1] : e >= t.length - 1 ? t[t.length - 1] : t[e + 1];\n        }, o.previousItem = function (t, e, a) {\n          return a ? 0 >= e ? t[t.length - 1] : t[e - 1] : 0 >= e ? t[0] : t[e - 1];\n        }, o.niceNum = function (t, e) {\n          var a,\n              i = Math.floor(o.log10(t)),\n              n = t / Math.pow(10, i);\n          return a = e ? 1.5 > n ? 1 : 3 > n ? 2 : 7 > n ? 5 : 10 : 1 >= n ? 1 : 2 >= n ? 2 : 5 >= n ? 5 : 10, a * Math.pow(10, i);\n        };\n        var r = o.easingEffects = {\n          linear: function linear(t) {\n            return t;\n          },\n          easeInQuad: function easeInQuad(t) {\n            return t * t;\n          },\n          easeOutQuad: function easeOutQuad(t) {\n            return -1 * t * (t - 2);\n          },\n          easeInOutQuad: function easeInOutQuad(t) {\n            return (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1);\n          },\n          easeInCubic: function easeInCubic(t) {\n            return t * t * t;\n          },\n          easeOutCubic: function easeOutCubic(t) {\n            return 1 * ((t = t / 1 - 1) * t * t + 1);\n          },\n          easeInOutCubic: function easeInOutCubic(t) {\n            return (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2);\n          },\n          easeInQuart: function easeInQuart(t) {\n            return t * t * t * t;\n          },\n          easeOutQuart: function easeOutQuart(t) {\n            return -1 * ((t = t / 1 - 1) * t * t * t - 1);\n          },\n          easeInOutQuart: function easeInOutQuart(t) {\n            return (t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2);\n          },\n          easeInQuint: function easeInQuint(t) {\n            return 1 * (t /= 1) * t * t * t * t;\n          },\n          easeOutQuint: function easeOutQuint(t) {\n            return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);\n          },\n          easeInOutQuint: function easeInOutQuint(t) {\n            return (t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2);\n          },\n          easeInSine: function easeInSine(t) {\n            return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;\n          },\n          easeOutSine: function easeOutSine(t) {\n            return 1 * Math.sin(t / 1 * (Math.PI / 2));\n          },\n          easeInOutSine: function easeInOutSine(t) {\n            return -0.5 * (Math.cos(Math.PI * t / 1) - 1);\n          },\n          easeInExpo: function easeInExpo(t) {\n            return 0 === t ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));\n          },\n          easeOutExpo: function easeOutExpo(t) {\n            return 1 === t ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);\n          },\n          easeInOutExpo: function easeInOutExpo(t) {\n            return 0 === t ? 0 : 1 === t ? 1 : (t /= 0.5) < 1 ? 0.5 * Math.pow(2, 10 * (t - 1)) : 0.5 * (-Math.pow(2, -10 * --t) + 2);\n          },\n          easeInCirc: function easeInCirc(t) {\n            return t >= 1 ? t : -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);\n          },\n          easeOutCirc: function easeOutCirc(t) {\n            return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);\n          },\n          easeInOutCirc: function easeInOutCirc(t) {\n            return (t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n          },\n          easeInElastic: function easeInElastic(t) {\n            var e = 1.70158,\n                a = 0,\n                i = 1;\n            return 0 === t ? 0 : 1 === (t /= 1) ? 1 : (a || (a = 0.3), i < Math.abs(1) ? (i = 1, e = a / 4) : e = a / (2 * Math.PI) * Math.asin(1 / i), -(i * Math.pow(2, 10 * (t -= 1)) * Math.sin((1 * t - e) * (2 * Math.PI) / a)));\n          },\n          easeOutElastic: function easeOutElastic(t) {\n            var e = 1.70158,\n                a = 0,\n                i = 1;\n            return 0 === t ? 0 : 1 === (t /= 1) ? 1 : (a || (a = 0.3), i < Math.abs(1) ? (i = 1, e = a / 4) : e = a / (2 * Math.PI) * Math.asin(1 / i), i * Math.pow(2, -10 * t) * Math.sin((1 * t - e) * (2 * Math.PI) / a) + 1);\n          },\n          easeInOutElastic: function easeInOutElastic(t) {\n            var e = 1.70158,\n                a = 0,\n                i = 1;\n            return 0 === t ? 0 : 2 === (t /= 0.5) ? 1 : (a || (a = 1 * (0.3 * 1.5)), i < Math.abs(1) ? (i = 1, e = a / 4) : e = a / (2 * Math.PI) * Math.asin(1 / i), 1 > t ? -0.5 * (i * Math.pow(2, 10 * (t -= 1)) * Math.sin((1 * t - e) * (2 * Math.PI) / a)) : i * Math.pow(2, -10 * (t -= 1)) * Math.sin((1 * t - e) * (2 * Math.PI) / a) * 0.5 + 1);\n          },\n          easeInBack: function easeInBack(t) {\n            var e = 1.70158;\n            return 1 * (t /= 1) * t * ((e + 1) * t - e);\n          },\n          easeOutBack: function easeOutBack(t) {\n            var e = 1.70158;\n            return 1 * ((t = t / 1 - 1) * t * ((e + 1) * t + e) + 1);\n          },\n          easeInOutBack: function easeInOutBack(t) {\n            var e = 1.70158;\n            return (t /= 0.5) < 1 ? 0.5 * (t * t * (((e *= 1.525) + 1) * t - e)) : 0.5 * ((t -= 2) * t * (((e *= 1.525) + 1) * t + e) + 2);\n          },\n          easeInBounce: function easeInBounce(t) {\n            return 1 - r.easeOutBounce(1 - t);\n          },\n          easeOutBounce: function easeOutBounce(t) {\n            return (t /= 1) < 1 / 2.75 ? 1 * (7.5625 * t * t) : 2 / 2.75 > t ? 1 * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) : 2.5 / 2.75 > t ? 1 * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) : 1 * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375);\n          },\n          easeInOutBounce: function easeInOutBounce(t) {\n            return 0.5 > t ? 0.5 * r.easeInBounce(2 * t) : 0.5 * r.easeOutBounce(2 * t - 1) + 0.5;\n          }\n        };\n        o.requestAnimFrame = function () {\n          return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (t) {\n            return window.setTimeout(t, 1e3 / 60);\n          };\n        }(), o.cancelAnimFrame = function () {\n          return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || function (t) {\n            return window.clearTimeout(t, 1e3 / 60);\n          };\n        }(), o.getRelativePosition = function (t, e) {\n          var a,\n              i,\n              n = t.originalEvent || t,\n              r = t.currentTarget || t.srcElement,\n              l = r.getBoundingClientRect(),\n              s = n.touches;\n          s && s.length > 0 ? (a = s[0].clientX, i = s[0].clientY) : (a = n.clientX, i = n.clientY);\n          var d = parseFloat(o.getStyle(r, \"padding-left\")),\n              u = parseFloat(o.getStyle(r, \"padding-top\")),\n              c = parseFloat(o.getStyle(r, \"padding-right\")),\n              h = parseFloat(o.getStyle(r, \"padding-bottom\")),\n              f = l.right - l.left - d - c,\n              g = l.bottom - l.top - u - h;\n          return a = Math.round((a - l.left - d) / f * r.width / e.currentDevicePixelRatio), i = Math.round((i - l.top - u) / g * r.height / e.currentDevicePixelRatio), {\n            x: a,\n            y: i\n          };\n        }, o.addEvent = function (t, e, a) {\n          t.addEventListener ? t.addEventListener(e, a) : t.attachEvent ? t.attachEvent(\"on\" + e, a) : t[\"on\" + e] = a;\n        }, o.removeEvent = function (t, e, a) {\n          t.removeEventListener ? t.removeEventListener(e, a, !1) : t.detachEvent ? t.detachEvent(\"on\" + e, a) : t[\"on\" + e] = o.noop;\n        }, o.bindEvents = function (t, e, a) {\n          var i = t.events = t.events || {};\n          o.each(e, function (e) {\n            i[e] = function () {\n              a.apply(t, arguments);\n            }, o.addEvent(t.chart.canvas, e, i[e]);\n          });\n        }, o.unbindEvents = function (t, e) {\n          var a = t.chart.canvas;\n          o.each(e, function (t, e) {\n            o.removeEvent(a, e, t);\n          });\n        }, o.getConstraintWidth = function (t) {\n          return n(t, \"max-width\", \"clientWidth\");\n        }, o.getConstraintHeight = function (t) {\n          return n(t, \"maxHeight\", \"clientHeight\");\n        }, o.getMaximumWidth = function (t) {\n          var e = t.parentNode,\n              a = parseInt(o.getStyle(e, \"padding-left\"), 10),\n              i = parseInt(o.getStyle(e, \"padding-right\"), 10),\n              n = e.clientWidth - a - i,\n              r = o.getConstraintWidth(t);\n          return isNaN(r) ? n : Math.min(n, r);\n        }, o.getMaximumHeight = function (t) {\n          var e = t.parentNode,\n              a = parseInt(o.getStyle(e, \"padding-top\"), 10),\n              i = parseInt(o.getStyle(e, \"padding-bottom\"), 10),\n              n = e.clientHeight - a - i,\n              r = o.getConstraintHeight(t);\n          return isNaN(r) ? n : Math.min(n, r);\n        }, o.getStyle = function (t, e) {\n          return t.currentStyle ? t.currentStyle[e] : document.defaultView.getComputedStyle(t, null).getPropertyValue(e);\n        }, o.retinaScale = function (t) {\n          var e = t.currentDevicePixelRatio = window.devicePixelRatio || 1;\n\n          if (1 !== e) {\n            var a = t.canvas,\n                i = t.height,\n                n = t.width;\n            a.height = i * e, a.width = n * e, t.ctx.scale(e, e), a.style.height = i + \"px\", a.style.width = n + \"px\";\n          }\n        }, o.clear = function (t) {\n          t.ctx.clearRect(0, 0, t.width, t.height);\n        }, o.fontString = function (t, e, a) {\n          return e + \" \" + t + \"px \" + a;\n        }, o.longestText = function (t, e, a, i) {\n          i = i || {};\n          var n = i.data = i.data || {},\n              r = i.garbageCollect = i.garbageCollect || [];\n          i.font !== e && (n = i.data = {}, r = i.garbageCollect = [], i.font = e), t.font = e;\n          var l = 0;\n          o.each(a, function (e) {\n            void 0 !== e && null !== e && o.isArray(e) !== !0 ? l = o.measureText(t, n, r, l, e) : o.isArray(e) && o.each(e, function (e) {\n              void 0 === e || null === e || o.isArray(e) || (l = o.measureText(t, n, r, l, e));\n            });\n          });\n          var s = r.length / 2;\n\n          if (s > a.length) {\n            for (var d = 0; s > d; d++) {\n              delete n[r[d]];\n            }\n\n            r.splice(0, s);\n          }\n\n          return l;\n        }, o.measureText = function (t, e, a, i, n) {\n          var o = e[n];\n          return o || (o = e[n] = t.measureText(n).width, a.push(n)), o > i && (i = o), i;\n        }, o.numberOfLabelLines = function (t) {\n          var e = 1;\n          return o.each(t, function (t) {\n            o.isArray(t) && t.length > e && (e = t.length);\n          }), e;\n        }, o.drawRoundedRectangle = function (t, e, a, i, n, o) {\n          t.beginPath(), t.moveTo(e + o, a), t.lineTo(e + i - o, a), t.quadraticCurveTo(e + i, a, e + i, a + o), t.lineTo(e + i, a + n - o), t.quadraticCurveTo(e + i, a + n, e + i - o, a + n), t.lineTo(e + o, a + n), t.quadraticCurveTo(e, a + n, e, a + n - o), t.lineTo(e, a + o), t.quadraticCurveTo(e, a, e + o, a), t.closePath();\n        }, o.color = function (e) {\n          return i ? i(e instanceof CanvasGradient ? t.defaults.global.defaultColor : e) : (console.error(\"Color.js not found!\"), e);\n        }, o.addResizeListener = function (t, e) {\n          var a = document.createElement(\"iframe\");\n          a.className = \"chartjs-hidden-iframe\", a.style.cssText = \"display:block;overflow:hidden;border:0;margin:0;top:0;left:0;bottom:0;right:0;height:100%;width:100%;position:absolute;pointer-events:none;z-index:-1;\", a.tabIndex = -1;\n\n          var i = t._chartjs = {\n            resizer: a,\n            ticking: !1\n          },\n              n = function n() {\n            i.ticking || (i.ticking = !0, o.requestAnimFrame.call(window, function () {\n              return i.resizer ? (i.ticking = !1, e()) : void 0;\n            }));\n          };\n\n          o.addEvent(a, \"load\", function () {\n            o.addEvent(a.contentWindow || a, \"resize\", n), n();\n          }), t.insertBefore(a, t.firstChild);\n        }, o.removeResizeListener = function (t) {\n          if (t && t._chartjs) {\n            var e = t._chartjs.resizer;\n            e && (e.parentNode.removeChild(e), t._chartjs.resizer = null), delete t._chartjs;\n          }\n        }, o.isArray = Array.isArray ? function (t) {\n          return Array.isArray(t);\n        } : function (t) {\n          return \"[object Array]\" === Object.prototype.toString.call(t);\n        }, o.arrayEquals = function (t, e) {\n          var a, i, n, r;\n          if (!t || !e || t.length !== e.length) return !1;\n\n          for (a = 0, i = t.length; i > a; ++a) {\n            if (n = t[a], r = e[a], n instanceof Array && r instanceof Array) {\n              if (!o.arrayEquals(n, r)) return !1;\n            } else if (n !== r) return !1;\n          }\n\n          return !0;\n        }, o.callCallback = function (t, e, a) {\n          t && \"function\" == typeof t.call && t.apply(a, e);\n        }, o.getHoverColor = function (t) {\n          return t instanceof CanvasPattern ? t : o.color(t).saturate(0.5).darken(0.1).rgbString();\n        };\n      };\n    }, {\n      3: 3\n    }],\n    27: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          var a,\n              i,\n              n,\n              o,\n              r,\n              l = t.data.datasets;\n\n          for (i = 0, o = l.length; o > i; ++i) {\n            if (t.isDatasetVisible(i)) for (a = t.getDatasetMeta(i), n = 0, r = a.data.length; r > n; ++n) {\n              var s = a.data[n];\n              s._view.skip || e(s);\n            }\n          }\n        }\n\n        function a(t, a) {\n          var i = [];\n          return e(t, function (t) {\n            t.inRange(a.x, a.y) && i.push(t);\n          }), i;\n        }\n\n        function i(t, a, i, n) {\n          var r = Number.POSITIVE_INFINITY,\n              l = [];\n          return n || (n = o.distanceBetweenPoints), e(t, function (t) {\n            if (!i || t.inRange(a.x, a.y)) {\n              var e = t.getCenterPoint(),\n                  o = n(a, e);\n              r > o ? (l = [t], r = o) : o === r && l.push(t);\n            }\n          }), l;\n        }\n\n        function n(t, e, n) {\n          var r = o.getRelativePosition(e, t.chart),\n              l = function l(t, e) {\n            return Math.abs(t.x - e.x);\n          },\n              s = n.intersect ? a(t, r) : i(t, r, !1, l),\n              d = [];\n\n          return s.length ? (t.data.datasets.forEach(function (e, a) {\n            if (t.isDatasetVisible(a)) {\n              var i = t.getDatasetMeta(a),\n                  n = i.data[s[0]._index];\n              n && !n._view.skip && d.push(n);\n            }\n          }), d) : [];\n        }\n\n        var o = t.helpers;\n        t.Interaction = {\n          modes: {\n            single: function single(t, a) {\n              var i = o.getRelativePosition(a, t.chart),\n                  n = [];\n              return e(t, function (t) {\n                return t.inRange(i.x, i.y) ? (n.push(t), n) : void 0;\n              }), n.slice(0, 1);\n            },\n            label: n,\n            index: n,\n            dataset: function dataset(t, e, n) {\n              var r = o.getRelativePosition(e, t.chart),\n                  l = n.intersect ? a(t, r) : i(t, r, !1);\n              return l.length > 0 && (l = t.getDatasetMeta(l[0]._datasetIndex).data), l;\n            },\n            \"x-axis\": function xAxis(t, e) {\n              return n(t, e, !0);\n            },\n            point: function point(t, e) {\n              var i = o.getRelativePosition(e, t.chart);\n              return a(t, i);\n            },\n            nearest: function nearest(t, e, a) {\n              var n = o.getRelativePosition(e, t.chart),\n                  r = i(t, n, a.intersect);\n              return r.length > 1 && r.sort(function (t, e) {\n                var a = t.getArea(),\n                    i = e.getArea(),\n                    n = a - i;\n                return 0 === n && (n = t._datasetIndex - e._datasetIndex), n;\n              }), r.slice(0, 1);\n            },\n            x: function x(t, a, i) {\n              var n = o.getRelativePosition(a, t.chart),\n                  r = [],\n                  l = !1;\n              return e(t, function (t) {\n                t.inXRange(n.x) && r.push(t), t.inRange(n.x, n.y) && (l = !0);\n              }), i.intersect && !l && (r = []), r;\n            },\n            y: function y(t, a, i) {\n              var n = o.getRelativePosition(a, t.chart),\n                  r = [],\n                  l = !1;\n              return e(t, function (t) {\n                t.inYRange(n.y) && r.push(t), t.inRange(n.x, n.y) && (l = !0);\n              }), i.intersect && !l && (r = []), r;\n            }\n          }\n        };\n      };\n    }, {}],\n    28: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function () {\n        var t = function t(e, a) {\n          return this.controller = new t.Controller(e, a, this), this.controller;\n        };\n\n        return t.defaults = {\n          global: {\n            responsive: !0,\n            responsiveAnimationDuration: 0,\n            maintainAspectRatio: !0,\n            events: [\"mousemove\", \"mouseout\", \"click\", \"touchstart\", \"touchmove\"],\n            hover: {\n              onHover: null,\n              mode: \"nearest\",\n              intersect: !0,\n              animationDuration: 400\n            },\n            onClick: null,\n            defaultColor: \"rgba(0,0,0,0.1)\",\n            defaultFontColor: \"#666\",\n            defaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            defaultFontSize: 12,\n            defaultFontStyle: \"normal\",\n            showLines: !0,\n            elements: {},\n            legendCallback: function legendCallback(t) {\n              var e = [];\n              e.push('<ul className=\"' + t.id + '-legend\">');\n\n              for (var a = 0; a < t.data.datasets.length; a++) {\n                e.push('<li><span style=\"background-color:' + t.data.datasets[a].backgroundColor + '\"></span>'), t.data.datasets[a].label && e.push(t.data.datasets[a].label), e.push(\"</li>\");\n              }\n\n              return e.push(\"</ul>\"), e.join(\"\");\n            }\n          }\n        }, t.Chart = t, t;\n      };\n    }, {}],\n    29: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.layoutService = {\n          defaults: {},\n          addBox: function addBox(t, e) {\n            t.boxes || (t.boxes = []), t.boxes.push(e);\n          },\n          removeBox: function removeBox(t, e) {\n            t.boxes && t.boxes.splice(t.boxes.indexOf(e), 1);\n          },\n          update: function update(t, a, i) {\n            function n(t) {\n              var e,\n                  a = t.isHorizontal();\n              a ? (e = t.update(t.options.fullWidth ? x : C, M), D -= e.height) : (e = t.update(w, S), C -= e.width), I.push({\n                horizontal: a,\n                minSize: e,\n                box: t\n              });\n            }\n\n            function o(t) {\n              var a = e.findNextWhere(I, function (e) {\n                return e.box === t;\n              });\n              if (a) if (t.isHorizontal()) {\n                var i = {\n                  left: A,\n                  right: T,\n                  top: 0,\n                  bottom: 0\n                };\n                t.update(t.options.fullWidth ? x : C, y / 2, i);\n              } else t.update(a.minSize.width, D);\n            }\n\n            function r(t) {\n              var a = e.findNextWhere(I, function (e) {\n                return e.box === t;\n              }),\n                  i = {\n                left: 0,\n                right: 0,\n                top: P,\n                bottom: F\n              };\n              a && t.update(a.minSize.width, D, i);\n            }\n\n            function l(t) {\n              t.isHorizontal() ? (t.left = t.options.fullWidth ? u : A, t.right = t.options.fullWidth ? a - c : A + C, t.top = L, t.bottom = L + t.height, L = t.bottom) : (t.left = V, t.right = V + t.width, t.top = P, t.bottom = P + D, V = t.right);\n            }\n\n            if (t) {\n              var s = t.options.layout,\n                  d = s ? s.padding : null,\n                  u = 0,\n                  c = 0,\n                  h = 0,\n                  f = 0;\n              isNaN(d) ? (u = d.left || 0, c = d.right || 0, h = d.top || 0, f = d.bottom || 0) : (u = d, c = d, h = d, f = d);\n              var g = e.where(t.boxes, function (t) {\n                return \"left\" === t.options.position;\n              }),\n                  p = e.where(t.boxes, function (t) {\n                return \"right\" === t.options.position;\n              }),\n                  m = e.where(t.boxes, function (t) {\n                return \"top\" === t.options.position;\n              }),\n                  b = e.where(t.boxes, function (t) {\n                return \"bottom\" === t.options.position;\n              }),\n                  v = e.where(t.boxes, function (t) {\n                return \"chartArea\" === t.options.position;\n              });\n              m.sort(function (t, e) {\n                return (e.options.fullWidth ? 1 : 0) - (t.options.fullWidth ? 1 : 0);\n              }), b.sort(function (t, e) {\n                return (t.options.fullWidth ? 1 : 0) - (e.options.fullWidth ? 1 : 0);\n              });\n              var x = a - u - c,\n                  y = i - h - f,\n                  k = x / 2,\n                  S = y / 2,\n                  w = (a - k) / (g.length + p.length),\n                  M = (i - S) / (m.length + b.length),\n                  C = x,\n                  D = y,\n                  I = [];\n              e.each(g.concat(p, m, b), n);\n              var A = u,\n                  T = c,\n                  P = h,\n                  F = f;\n              e.each(g.concat(p), o), e.each(g, function (t) {\n                A += t.width;\n              }), e.each(p, function (t) {\n                T += t.width;\n              }), e.each(m.concat(b), o), e.each(m, function (t) {\n                P += t.height;\n              }), e.each(b, function (t) {\n                F += t.height;\n              }), e.each(g.concat(p), r), A = u, T = c, P = h, F = f, e.each(g, function (t) {\n                A += t.width;\n              }), e.each(p, function (t) {\n                T += t.width;\n              }), e.each(m, function (t) {\n                P += t.height;\n              }), e.each(b, function (t) {\n                F += t.height;\n              });\n\n              var _ = i - P - F,\n                  R = a - A - T;\n\n              (R !== C || _ !== D) && (e.each(g, function (t) {\n                t.height = _;\n              }), e.each(p, function (t) {\n                t.height = _;\n              }), e.each(m, function (t) {\n                t.options.fullWidth || (t.width = R);\n              }), e.each(b, function (t) {\n                t.options.fullWidth || (t.width = R);\n              }), D = _, C = R);\n              var V = u,\n                  L = h;\n              e.each(g.concat(m), l), V += C, L += D, e.each(p, l), e.each(b, l), t.chartArea = {\n                left: A,\n                top: P,\n                right: A + C,\n                bottom: P + D\n              }, e.each(v, function (e) {\n                e.left = t.chartArea.left, e.top = t.chartArea.top, e.right = t.chartArea.right, e.bottom = t.chartArea.bottom, e.update(C, D);\n              });\n            }\n          }\n        };\n      };\n    }, {}],\n    30: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          return t.usePointStyle ? e * Math.SQRT2 : t.boxWidth;\n        }\n\n        var a = t.helpers,\n            i = a.noop;\n        t.defaults.global.legend = {\n          display: !0,\n          position: \"top\",\n          fullWidth: !0,\n          reverse: !1,\n          onClick: function onClick(t, e) {\n            var a = e.datasetIndex,\n                i = this.chart,\n                n = i.getDatasetMeta(a);\n            n.hidden = null === n.hidden ? !i.data.datasets[a].hidden : null, i.update();\n          },\n          onHover: null,\n          labels: {\n            boxWidth: 40,\n            padding: 10,\n            generateLabels: function generateLabels(t) {\n              var e = t.data;\n              return a.isArray(e.datasets) ? e.datasets.map(function (e, i) {\n                return {\n                  text: e.label,\n                  fillStyle: a.isArray(e.backgroundColor) ? e.backgroundColor[0] : e.backgroundColor,\n                  hidden: !t.isDatasetVisible(i),\n                  lineCap: e.borderCapStyle,\n                  lineDash: e.borderDash,\n                  lineDashOffset: e.borderDashOffset,\n                  lineJoin: e.borderJoinStyle,\n                  lineWidth: e.borderWidth,\n                  strokeStyle: e.borderColor,\n                  pointStyle: e.pointStyle,\n                  datasetIndex: i\n                };\n              }, this) : [];\n            }\n          }\n        }, t.Legend = t.Element.extend({\n          initialize: function initialize(t) {\n            a.extend(this, t), this.legendHitBoxes = [], this.doughnutMode = !1;\n          },\n          beforeUpdate: i,\n          update: function update(t, e, a) {\n            var i = this;\n            return i.beforeUpdate(), i.maxWidth = t, i.maxHeight = e, i.margins = a, i.beforeSetDimensions(), i.setDimensions(), i.afterSetDimensions(), i.beforeBuildLabels(), i.buildLabels(), i.afterBuildLabels(), i.beforeFit(), i.fit(), i.afterFit(), i.afterUpdate(), i.minSize;\n          },\n          afterUpdate: i,\n          beforeSetDimensions: i,\n          setDimensions: function setDimensions() {\n            var t = this;\n            t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = {\n              width: 0,\n              height: 0\n            };\n          },\n          afterSetDimensions: i,\n          beforeBuildLabels: i,\n          buildLabels: function buildLabels() {\n            var t = this;\n            t.legendItems = t.options.labels.generateLabels.call(t, t.chart), t.options.reverse && t.legendItems.reverse();\n          },\n          afterBuildLabels: i,\n          beforeFit: i,\n          fit: function fit() {\n            var i = this,\n                n = i.options,\n                o = n.labels,\n                r = n.display,\n                l = i.ctx,\n                s = t.defaults.global,\n                d = a.getValueOrDefault,\n                u = d(o.fontSize, s.defaultFontSize),\n                c = d(o.fontStyle, s.defaultFontStyle),\n                h = d(o.fontFamily, s.defaultFontFamily),\n                f = a.fontString(u, c, h),\n                g = i.legendHitBoxes = [],\n                p = i.minSize,\n                m = i.isHorizontal();\n            if (m ? (p.width = i.maxWidth, p.height = r ? 10 : 0) : (p.width = r ? 10 : 0, p.height = i.maxHeight), r) if (l.font = f, m) {\n              var b = i.lineWidths = [0],\n                  v = i.legendItems.length ? u + o.padding : 0;\n              l.textAlign = \"left\", l.textBaseline = \"top\", a.each(i.legendItems, function (t, a) {\n                var n = e(o, u),\n                    r = n + u / 2 + l.measureText(t.text).width;\n                b[b.length - 1] + r + o.padding >= i.width && (v += u + o.padding, b[b.length] = i.left), g[a] = {\n                  left: 0,\n                  top: 0,\n                  width: r,\n                  height: u\n                }, b[b.length - 1] += r + o.padding;\n              }), p.height += v;\n            } else {\n              var x = o.padding,\n                  y = i.columnWidths = [],\n                  k = o.padding,\n                  S = 0,\n                  w = 0,\n                  M = u + x;\n              a.each(i.legendItems, function (t, a) {\n                var i = e(o, u),\n                    n = i + u / 2 + l.measureText(t.text).width;\n                w + M > p.height && (k += S + o.padding, y.push(S), S = 0, w = 0), S = Math.max(S, n), w += M, g[a] = {\n                  left: 0,\n                  top: 0,\n                  width: n,\n                  height: u\n                };\n              }), k += S, y.push(S), p.width += k;\n            }\n            i.width = p.width, i.height = p.height;\n          },\n          afterFit: i,\n          isHorizontal: function isHorizontal() {\n            return \"top\" === this.options.position || \"bottom\" === this.options.position;\n          },\n          draw: function draw() {\n            var i = this,\n                n = i.options,\n                o = n.labels,\n                r = t.defaults.global,\n                l = r.elements.line,\n                s = i.width,\n                d = i.lineWidths;\n\n            if (n.display) {\n              var u,\n                  c = i.ctx,\n                  h = a.getValueOrDefault,\n                  f = h(o.fontColor, r.defaultFontColor),\n                  g = h(o.fontSize, r.defaultFontSize),\n                  p = h(o.fontStyle, r.defaultFontStyle),\n                  m = h(o.fontFamily, r.defaultFontFamily),\n                  b = a.fontString(g, p, m);\n              c.textAlign = \"left\", c.textBaseline = \"top\", c.lineWidth = 0.5, c.strokeStyle = f, c.fillStyle = f, c.font = b;\n\n              var v = e(o, g),\n                  x = i.legendHitBoxes,\n                  y = function y(e, a, i) {\n                if (!(isNaN(v) || 0 >= v)) {\n                  c.save(), c.fillStyle = h(i.fillStyle, r.defaultColor), c.lineCap = h(i.lineCap, l.borderCapStyle), c.lineDashOffset = h(i.lineDashOffset, l.borderDashOffset), c.lineJoin = h(i.lineJoin, l.borderJoinStyle), c.lineWidth = h(i.lineWidth, l.borderWidth), c.strokeStyle = h(i.strokeStyle, r.defaultColor);\n                  var o = 0 === h(i.lineWidth, l.borderWidth);\n\n                  if (c.setLineDash && c.setLineDash(h(i.lineDash, l.borderDash)), n.labels && n.labels.usePointStyle) {\n                    var s = g * Math.SQRT2 / 2,\n                        d = s / Math.SQRT2,\n                        u = e + d,\n                        f = a + d;\n                    t.canvasHelpers.drawPoint(c, i.pointStyle, s, u, f);\n                  } else o || c.strokeRect(e, a, v, g), c.fillRect(e, a, v, g);\n\n                  c.restore();\n                }\n              },\n                  k = function k(t, e, a, i) {\n                c.fillText(a.text, v + g / 2 + t, e), a.hidden && (c.beginPath(), c.lineWidth = 2, c.moveTo(v + g / 2 + t, e + g / 2), c.lineTo(v + g / 2 + t + i, e + g / 2), c.stroke());\n              },\n                  S = i.isHorizontal();\n\n              u = S ? {\n                x: i.left + (s - d[0]) / 2,\n                y: i.top + o.padding,\n                line: 0\n              } : {\n                x: i.left + o.padding,\n                y: i.top + o.padding,\n                line: 0\n              };\n              var w = g + o.padding;\n              a.each(i.legendItems, function (t, e) {\n                var a = c.measureText(t.text).width,\n                    n = v + g / 2 + a,\n                    r = u.x,\n                    l = u.y;\n                S ? r + n >= s && (l = u.y += w, u.line++, r = u.x = i.left + (s - d[u.line]) / 2) : l + w > i.bottom && (r = u.x = r + i.columnWidths[u.line] + o.padding, l = u.y = i.top, u.line++), y(r, l, t), x[e].left = r, x[e].top = l, k(r, l, t, a), S ? u.x += n + o.padding : u.y += w;\n              });\n            }\n          },\n          handleEvent: function handleEvent(t) {\n            var e = this,\n                i = e.options,\n                n = \"mouseup\" === t.type ? \"click\" : t.type,\n                o = !1;\n\n            if (\"mousemove\" === n) {\n              if (!i.onHover) return;\n            } else {\n              if (\"click\" !== n) return;\n              if (!i.onClick) return;\n            }\n\n            var r = a.getRelativePosition(t, e.chart.chart),\n                l = r.x,\n                s = r.y;\n            if (l >= e.left && l <= e.right && s >= e.top && s <= e.bottom) for (var d = e.legendHitBoxes, u = 0; u < d.length; ++u) {\n              var c = d[u];\n\n              if (l >= c.left && l <= c.left + c.width && s >= c.top && s <= c.top + c.height) {\n                if (\"click\" === n) {\n                  i.onClick.call(e, t, e.legendItems[u]), o = !0;\n                  break;\n                }\n\n                if (\"mousemove\" === n) {\n                  i.onHover.call(e, t, e.legendItems[u]), o = !0;\n                  break;\n                }\n              }\n            }\n            return o;\n          }\n        }), t.plugins.register({\n          beforeInit: function beforeInit(e) {\n            var a = e.options,\n                i = a.legend;\n            i && (e.legend = new t.Legend({\n              ctx: e.chart.ctx,\n              options: i,\n              chart: e\n            }), t.layoutService.addBox(e, e.legend));\n          }\n        });\n      };\n    }, {}],\n    31: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers.noop;\n        t.plugins = {\n          _plugins: [],\n          register: function register(t) {\n            var e = this._plugins;\n            [].concat(t).forEach(function (t) {\n              -1 === e.indexOf(t) && e.push(t);\n            });\n          },\n          unregister: function unregister(t) {\n            var e = this._plugins;\n            [].concat(t).forEach(function (t) {\n              var a = e.indexOf(t);\n              -1 !== a && e.splice(a, 1);\n            });\n          },\n          clear: function clear() {\n            this._plugins = [];\n          },\n          count: function count() {\n            return this._plugins.length;\n          },\n          getAll: function getAll() {\n            return this._plugins;\n          },\n          notify: function notify(t, e) {\n            var a,\n                i,\n                n = this._plugins,\n                o = n.length;\n\n            for (a = 0; o > a; ++a) {\n              if (i = n[a], \"function\" == typeof i[t] && i[t].apply(i, e || []) === !1) return !1;\n            }\n\n            return !0;\n          }\n        }, t.PluginBase = t.Element.extend({\n          beforeInit: e,\n          afterInit: e,\n          beforeUpdate: e,\n          afterUpdate: e,\n          beforeDraw: e,\n          afterDraw: e,\n          destroy: e\n        }), t.pluginService = t.plugins;\n      };\n    }, {}],\n    32: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.scale = {\n          display: !0,\n          position: \"left\",\n          gridLines: {\n            display: !0,\n            color: \"rgba(0, 0, 0, 0.1)\",\n            lineWidth: 1,\n            drawBorder: !0,\n            drawOnChartArea: !0,\n            drawTicks: !0,\n            tickMarkLength: 10,\n            zeroLineWidth: 1,\n            zeroLineColor: \"rgba(0,0,0,0.25)\",\n            offsetGridLines: !1,\n            borderDash: [],\n            borderDashOffset: 0\n          },\n          scaleLabel: {\n            labelString: \"\",\n            display: !1\n          },\n          ticks: {\n            beginAtZero: !1,\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: !1,\n            padding: 10,\n            reverse: !1,\n            display: !0,\n            autoSkip: !0,\n            autoSkipPadding: 0,\n            labelOffset: 0,\n            callback: t.Ticks.formatters.values\n          }\n        }, t.Scale = t.Element.extend({\n          beforeUpdate: function beforeUpdate() {\n            e.callCallback(this.options.beforeUpdate, [this]);\n          },\n          update: function update(t, a, i) {\n            var n = this;\n            return n.beforeUpdate(), n.maxWidth = t, n.maxHeight = a, n.margins = e.extend({\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n            }, i), n.beforeSetDimensions(), n.setDimensions(), n.afterSetDimensions(), n.beforeDataLimits(), n.determineDataLimits(), n.afterDataLimits(), n.beforeBuildTicks(), n.buildTicks(), n.afterBuildTicks(), n.beforeTickToLabelConversion(), n.convertTicksToLabels(), n.afterTickToLabelConversion(), n.beforeCalculateTickRotation(), n.calculateTickRotation(), n.afterCalculateTickRotation(), n.beforeFit(), n.fit(), n.afterFit(), n.afterUpdate(), n.minSize;\n          },\n          afterUpdate: function afterUpdate() {\n            e.callCallback(this.options.afterUpdate, [this]);\n          },\n          beforeSetDimensions: function beforeSetDimensions() {\n            e.callCallback(this.options.beforeSetDimensions, [this]);\n          },\n          setDimensions: function setDimensions() {\n            var t = this;\n            t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0;\n          },\n          afterSetDimensions: function afterSetDimensions() {\n            e.callCallback(this.options.afterSetDimensions, [this]);\n          },\n          beforeDataLimits: function beforeDataLimits() {\n            e.callCallback(this.options.beforeDataLimits, [this]);\n          },\n          determineDataLimits: e.noop,\n          afterDataLimits: function afterDataLimits() {\n            e.callCallback(this.options.afterDataLimits, [this]);\n          },\n          beforeBuildTicks: function beforeBuildTicks() {\n            e.callCallback(this.options.beforeBuildTicks, [this]);\n          },\n          buildTicks: e.noop,\n          afterBuildTicks: function afterBuildTicks() {\n            e.callCallback(this.options.afterBuildTicks, [this]);\n          },\n          beforeTickToLabelConversion: function beforeTickToLabelConversion() {\n            e.callCallback(this.options.beforeTickToLabelConversion, [this]);\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            var t = this,\n                e = t.options.ticks;\n            t.ticks = t.ticks.map(e.userCallback || e.callback);\n          },\n          afterTickToLabelConversion: function afterTickToLabelConversion() {\n            e.callCallback(this.options.afterTickToLabelConversion, [this]);\n          },\n          beforeCalculateTickRotation: function beforeCalculateTickRotation() {\n            e.callCallback(this.options.beforeCalculateTickRotation, [this]);\n          },\n          calculateTickRotation: function calculateTickRotation() {\n            var a = this,\n                i = a.ctx,\n                n = t.defaults.global,\n                o = a.options.ticks,\n                r = e.getValueOrDefault(o.fontSize, n.defaultFontSize),\n                l = e.getValueOrDefault(o.fontStyle, n.defaultFontStyle),\n                s = e.getValueOrDefault(o.fontFamily, n.defaultFontFamily),\n                d = e.fontString(r, l, s);\n            i.font = d;\n            var u,\n                c = i.measureText(a.ticks[0]).width,\n                h = i.measureText(a.ticks[a.ticks.length - 1]).width;\n\n            if (a.labelRotation = o.minRotation || 0, a.paddingRight = 0, a.paddingLeft = 0, a.options.display && a.isHorizontal()) {\n              a.paddingRight = h / 2 + 3, a.paddingLeft = c / 2 + 3, a.longestTextCache || (a.longestTextCache = {});\n\n              for (var f, g, p = e.longestText(i, d, a.ticks, a.longestTextCache), m = p, b = a.getPixelForTick(1) - a.getPixelForTick(0) - 6; m > b && a.labelRotation < o.maxRotation;) {\n                if (f = Math.cos(e.toRadians(a.labelRotation)), g = Math.sin(e.toRadians(a.labelRotation)), u = f * c, u + r / 2 > a.yLabelWidth && (a.paddingLeft = u + r / 2), a.paddingRight = r / 2, g * p > a.maxHeight) {\n                  a.labelRotation--;\n                  break;\n                }\n\n                a.labelRotation++, m = f * p;\n              }\n            }\n\n            a.margins && (a.paddingLeft = Math.max(a.paddingLeft - a.margins.left, 0), a.paddingRight = Math.max(a.paddingRight - a.margins.right, 0));\n          },\n          afterCalculateTickRotation: function afterCalculateTickRotation() {\n            e.callCallback(this.options.afterCalculateTickRotation, [this]);\n          },\n          beforeFit: function beforeFit() {\n            e.callCallback(this.options.beforeFit, [this]);\n          },\n          fit: function fit() {\n            var a = this,\n                i = a.minSize = {\n              width: 0,\n              height: 0\n            },\n                n = a.options,\n                o = t.defaults.global,\n                r = n.ticks,\n                l = n.scaleLabel,\n                s = n.gridLines,\n                d = n.display,\n                u = a.isHorizontal(),\n                c = e.getValueOrDefault(r.fontSize, o.defaultFontSize),\n                h = e.getValueOrDefault(r.fontStyle, o.defaultFontStyle),\n                f = e.getValueOrDefault(r.fontFamily, o.defaultFontFamily),\n                g = e.fontString(c, h, f),\n                p = e.getValueOrDefault(l.fontSize, o.defaultFontSize),\n                m = n.gridLines.tickMarkLength;\n\n            if (u ? i.width = a.isFullWidth() ? a.maxWidth - a.margins.left - a.margins.right : a.maxWidth : i.width = d && s.drawTicks ? m : 0, u ? i.height = d && s.drawTicks ? m : 0 : i.height = a.maxHeight, l.display && d && (u ? i.height += 1.5 * p : i.width += 1.5 * p), r.display && d) {\n              a.longestTextCache || (a.longestTextCache = {});\n              var b = e.longestText(a.ctx, g, a.ticks, a.longestTextCache),\n                  v = e.numberOfLabelLines(a.ticks),\n                  x = 0.5 * c;\n\n              if (u) {\n                a.longestLabelWidth = b;\n                var y = Math.sin(e.toRadians(a.labelRotation)) * a.longestLabelWidth + c * v + x * v;\n                i.height = Math.min(a.maxHeight, i.height + y), a.ctx.font = g;\n                var k = a.ctx.measureText(a.ticks[0]).width,\n                    S = a.ctx.measureText(a.ticks[a.ticks.length - 1]).width,\n                    w = Math.cos(e.toRadians(a.labelRotation)),\n                    M = Math.sin(e.toRadians(a.labelRotation));\n                a.paddingLeft = 0 !== a.labelRotation ? w * k + 3 : k / 2 + 3, a.paddingRight = 0 !== a.labelRotation ? M * (c / 2) + 3 : S / 2 + 3;\n              } else {\n                var C = a.maxWidth - i.width,\n                    D = r.mirror;\n                D ? b = 0 : b += a.options.ticks.padding, C > b ? i.width += b : i.width = a.maxWidth, a.paddingTop = c / 2, a.paddingBottom = c / 2;\n              }\n            }\n\n            a.margins && (a.paddingLeft = Math.max(a.paddingLeft - a.margins.left, 0), a.paddingTop = Math.max(a.paddingTop - a.margins.top, 0), a.paddingRight = Math.max(a.paddingRight - a.margins.right, 0), a.paddingBottom = Math.max(a.paddingBottom - a.margins.bottom, 0)), a.width = i.width, a.height = i.height;\n          },\n          afterFit: function afterFit() {\n            e.callCallback(this.options.afterFit, [this]);\n          },\n          isHorizontal: function isHorizontal() {\n            return \"top\" === this.options.position || \"bottom\" === this.options.position;\n          },\n          isFullWidth: function isFullWidth() {\n            return this.options.fullWidth;\n          },\n          getRightValue: function getRightValue(t) {\n            return null === t || \"undefined\" == typeof t ? NaN : \"number\" != typeof t || isFinite(t) ? \"object\" == _typeof(t) ? t instanceof Date || t.isValid ? t : this.getRightValue(this.isHorizontal() ? t.x : t.y) : t : NaN;\n          },\n          getLabelForIndex: e.noop,\n          getPixelForValue: e.noop,\n          getValueForPixel: e.noop,\n          getPixelForTick: function getPixelForTick(t, e) {\n            var a = this;\n\n            if (a.isHorizontal()) {\n              var i = a.width - (a.paddingLeft + a.paddingRight),\n                  n = i / Math.max(a.ticks.length - (a.options.gridLines.offsetGridLines ? 0 : 1), 1),\n                  o = n * t + a.paddingLeft;\n              e && (o += n / 2);\n              var r = a.left + Math.round(o);\n              return r += a.isFullWidth() ? a.margins.left : 0;\n            }\n\n            var l = a.height - (a.paddingTop + a.paddingBottom);\n            return a.top + t * (l / (a.ticks.length - 1));\n          },\n          getPixelForDecimal: function getPixelForDecimal(t) {\n            var e = this;\n\n            if (e.isHorizontal()) {\n              var a = e.width - (e.paddingLeft + e.paddingRight),\n                  i = a * t + e.paddingLeft,\n                  n = e.left + Math.round(i);\n              return n += e.isFullWidth() ? e.margins.left : 0;\n            }\n\n            return e.top + t * e.height;\n          },\n          getBasePixel: function getBasePixel() {\n            var t = this,\n                e = t.min,\n                a = t.max;\n            return t.getPixelForValue(t.beginAtZero ? 0 : 0 > e && 0 > a ? a : e > 0 && a > 0 ? e : 0);\n          },\n          draw: function draw(a) {\n            var i = this,\n                n = i.options;\n\n            if (n.display) {\n              var o,\n                  r,\n                  l = i.ctx,\n                  s = t.defaults.global,\n                  d = n.ticks,\n                  u = n.gridLines,\n                  c = n.scaleLabel,\n                  h = 0 !== i.labelRotation,\n                  f = d.autoSkip,\n                  g = i.isHorizontal();\n              d.maxTicksLimit && (r = d.maxTicksLimit);\n              var p = e.getValueOrDefault(d.fontColor, s.defaultFontColor),\n                  m = e.getValueOrDefault(d.fontSize, s.defaultFontSize),\n                  b = e.getValueOrDefault(d.fontStyle, s.defaultFontStyle),\n                  v = e.getValueOrDefault(d.fontFamily, s.defaultFontFamily),\n                  x = e.fontString(m, b, v),\n                  y = u.tickMarkLength,\n                  k = e.getValueOrDefault(u.borderDash, s.borderDash),\n                  S = e.getValueOrDefault(u.borderDashOffset, s.borderDashOffset),\n                  w = e.getValueOrDefault(c.fontColor, s.defaultFontColor),\n                  M = e.getValueOrDefault(c.fontSize, s.defaultFontSize),\n                  C = e.getValueOrDefault(c.fontStyle, s.defaultFontStyle),\n                  D = e.getValueOrDefault(c.fontFamily, s.defaultFontFamily),\n                  I = e.fontString(M, C, D),\n                  A = e.toRadians(i.labelRotation),\n                  T = Math.cos(A),\n                  P = i.longestLabelWidth * T;\n              l.fillStyle = p;\n              var F = [];\n\n              if (g) {\n                if (o = !1, h && (P /= 2), (P + d.autoSkipPadding) * i.ticks.length > i.width - (i.paddingLeft + i.paddingRight) && (o = 1 + Math.floor((P + d.autoSkipPadding) * i.ticks.length / (i.width - (i.paddingLeft + i.paddingRight)))), r && i.ticks.length > r) for (; !o || i.ticks.length / (o || 1) > r;) {\n                  o || (o = 1), o += 1;\n                }\n                f || (o = !1);\n              }\n\n              var _ = \"right\" === n.position ? i.left : i.right - y,\n                  R = \"right\" === n.position ? i.left + y : i.right,\n                  V = \"bottom\" === n.position ? i.top : i.bottom - y,\n                  L = \"bottom\" === n.position ? i.top + y : i.bottom;\n\n              if (e.each(i.ticks, function (t, r) {\n                if (void 0 !== t && null !== t) {\n                  var l = i.ticks.length === r + 1,\n                      s = o > 1 && r % o > 0 || r % o === 0 && r + o >= i.ticks.length;\n\n                  if ((!s || l) && void 0 !== t && null !== t) {\n                    var c, f;\n                    r === (\"undefined\" != typeof i.zeroLineIndex ? i.zeroLineIndex : 0) ? (c = u.zeroLineWidth, f = u.zeroLineColor) : (c = e.getValueAtIndexOrDefault(u.lineWidth, r), f = e.getValueAtIndexOrDefault(u.color, r));\n                    var p,\n                        m,\n                        b,\n                        v,\n                        x,\n                        w,\n                        M,\n                        C,\n                        D,\n                        I,\n                        T = \"middle\",\n                        P = \"middle\";\n\n                    if (g) {\n                      h || (P = \"top\" === n.position ? \"bottom\" : \"top\"), T = h ? \"right\" : \"center\";\n                      var O = i.getPixelForTick(r) + e.aliasPixel(c);\n                      D = i.getPixelForTick(r, u.offsetGridLines) + d.labelOffset, I = h ? i.top + 12 : \"top\" === n.position ? i.bottom - y : i.top + y, p = b = x = M = O, m = V, v = L, w = a.top, C = a.bottom;\n                    } else {\n                      \"left\" === n.position ? d.mirror ? (D = i.right + d.padding, T = \"left\") : (D = i.right - d.padding, T = \"right\") : d.mirror ? (D = i.left - d.padding, T = \"right\") : (D = i.left + d.padding, T = \"left\");\n                      var B = i.getPixelForTick(r);\n                      B += e.aliasPixel(c), I = i.getPixelForTick(r, u.offsetGridLines), p = _, b = R, x = a.left, M = a.right, m = v = w = C = B;\n                    }\n\n                    F.push({\n                      tx1: p,\n                      ty1: m,\n                      tx2: b,\n                      ty2: v,\n                      x1: x,\n                      y1: w,\n                      x2: M,\n                      y2: C,\n                      labelX: D,\n                      labelY: I,\n                      glWidth: c,\n                      glColor: f,\n                      glBorderDash: k,\n                      glBorderDashOffset: S,\n                      rotation: -1 * A,\n                      label: t,\n                      textBaseline: P,\n                      textAlign: T\n                    });\n                  }\n                }\n              }), e.each(F, function (t) {\n                if (u.display && (l.save(), l.lineWidth = t.glWidth, l.strokeStyle = t.glColor, l.setLineDash && (l.setLineDash(t.glBorderDash), l.lineDashOffset = t.glBorderDashOffset), l.beginPath(), u.drawTicks && (l.moveTo(t.tx1, t.ty1), l.lineTo(t.tx2, t.ty2)), u.drawOnChartArea && (l.moveTo(t.x1, t.y1), l.lineTo(t.x2, t.y2)), l.stroke(), l.restore()), d.display) {\n                  l.save(), l.translate(t.labelX, t.labelY), l.rotate(t.rotation), l.font = x, l.textBaseline = t.textBaseline, l.textAlign = t.textAlign;\n                  var a = t.label;\n                  if (e.isArray(a)) for (var i = 0, n = -(a.length - 1) * m * 0.75; i < a.length; ++i) {\n                    l.fillText(\"\" + a[i], 0, n), n += 1.5 * m;\n                  } else l.fillText(a, 0, 0);\n                  l.restore();\n                }\n              }), c.display) {\n                var O,\n                    B,\n                    W = 0;\n                if (g) O = i.left + (i.right - i.left) / 2, B = \"bottom\" === n.position ? i.bottom - M / 2 : i.top + M / 2;else {\n                  var z = \"left\" === n.position;\n                  O = z ? i.left + M / 2 : i.right - M / 2, B = i.top + (i.bottom - i.top) / 2, W = z ? -0.5 * Math.PI : 0.5 * Math.PI;\n                }\n                l.save(), l.translate(O, B), l.rotate(W), l.textAlign = \"center\", l.textBaseline = \"middle\", l.fillStyle = w, l.font = I, l.fillText(c.labelString, 0, 0), l.restore();\n              }\n\n              if (u.drawBorder) {\n                l.lineWidth = e.getValueAtIndexOrDefault(u.lineWidth, 0), l.strokeStyle = e.getValueAtIndexOrDefault(u.color, 0);\n                var N = i.left,\n                    E = i.right,\n                    H = i.top,\n                    U = i.bottom,\n                    j = e.aliasPixel(l.lineWidth);\n                g ? (H = U = \"top\" === n.position ? i.bottom : i.top, H += j, U += j) : (N = E = \"left\" === n.position ? i.right : i.left, N += j, E += j), l.beginPath(), l.moveTo(N, H), l.lineTo(E, U), l.stroke();\n              }\n            }\n          }\n        });\n      };\n    }, {}],\n    33: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.scaleService = {\n          constructors: {},\n          defaults: {},\n          registerScaleType: function registerScaleType(t, a, i) {\n            this.constructors[t] = a, this.defaults[t] = e.clone(i);\n          },\n          getScaleConstructor: function getScaleConstructor(t) {\n            return this.constructors.hasOwnProperty(t) ? this.constructors[t] : void 0;\n          },\n          getScaleDefaults: function getScaleDefaults(a) {\n            return this.defaults.hasOwnProperty(a) ? e.scaleMerge(t.defaults.scale, this.defaults[a]) : {};\n          },\n          updateScaleDefaults: function updateScaleDefaults(t, a) {\n            var i = this.defaults;\n            i.hasOwnProperty(t) && (i[t] = e.extend(i[t], a));\n          },\n          addScalesToLayout: function addScalesToLayout(a) {\n            e.each(a.scales, function (e) {\n              t.layoutService.addBox(a, e);\n            });\n          }\n        };\n      };\n    }, {}],\n    34: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.Ticks = {\n          generators: {\n            linear: function linear(t, a) {\n              var i,\n                  n = [];\n              if (t.stepSize && t.stepSize > 0) i = t.stepSize;else {\n                var o = e.niceNum(a.max - a.min, !1);\n                i = e.niceNum(o / (t.maxTicks - 1), !0);\n              }\n              var r = Math.floor(a.min / i) * i,\n                  l = Math.ceil(a.max / i) * i;\n\n              if (t.min && t.max && t.stepSize) {\n                var s = (t.max - t.min) % t.stepSize === 0;\n                s && (r = t.min, l = t.max);\n              }\n\n              var d = (l - r) / i;\n              d = e.almostEquals(d, Math.round(d), i / 1e3) ? Math.round(d) : Math.ceil(d), n.push(void 0 !== t.min ? t.min : r);\n\n              for (var u = 1; d > u; ++u) {\n                n.push(r + u * i);\n              }\n\n              return n.push(void 0 !== t.max ? t.max : l), n;\n            },\n            logarithmic: function logarithmic(t, a) {\n              for (var i = [], n = e.getValueOrDefault, o = n(t.min, Math.pow(10, Math.floor(e.log10(a.min)))); o < a.max;) {\n                i.push(o);\n                var r, l;\n                0 === o ? (r = Math.floor(e.log10(a.minNotZero)), l = Math.round(a.minNotZero / Math.pow(10, r))) : (r = Math.floor(e.log10(o)), l = Math.floor(o / Math.pow(10, r)) + 1), 10 === l && (l = 1, ++r), o = l * Math.pow(10, r);\n              }\n\n              var s = n(t.max, o);\n              return i.push(s), i;\n            }\n          },\n          formatters: {\n            values: function values(t) {\n              return e.isArray(t) ? t : \"\" + t;\n            },\n            linear: function linear(t, a, i) {\n              var n = i.length > 3 ? i[2] - i[1] : i[1] - i[0];\n              Math.abs(n) > 1 && t !== Math.floor(t) && (n = t - Math.floor(t));\n              var o = e.log10(Math.abs(n)),\n                  r = \"\";\n\n              if (0 !== t) {\n                var l = -1 * Math.floor(o);\n                l = Math.max(Math.min(l, 20), 0), r = t.toFixed(l);\n              } else r = \"0\";\n\n              return r;\n            },\n            logarithmic: function logarithmic(t, a, i) {\n              var n = t / Math.pow(10, Math.floor(e.log10(t)));\n              return 0 === t ? \"0\" : 1 === n || 2 === n || 5 === n || 0 === a || a === i.length - 1 ? t.toExponential() : \"\";\n            }\n          }\n        };\n      };\n    }, {}],\n    35: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.global.title = {\n          display: !1,\n          position: \"top\",\n          fullWidth: !0,\n          fontStyle: \"bold\",\n          padding: 10,\n          text: \"\"\n        };\n        var a = e.noop;\n        t.Title = t.Element.extend({\n          initialize: function initialize(a) {\n            var i = this;\n            e.extend(i, a), i.options = e.configMerge(t.defaults.global.title, a.options), i.legendHitBoxes = [];\n          },\n          beforeUpdate: function beforeUpdate() {\n            var a = this.chart.options;\n            a && a.title && (this.options = e.configMerge(t.defaults.global.title, a.title));\n          },\n          update: function update(t, e, a) {\n            var i = this;\n            return i.beforeUpdate(), i.maxWidth = t, i.maxHeight = e, i.margins = a, i.beforeSetDimensions(), i.setDimensions(), i.afterSetDimensions(), i.beforeBuildLabels(), i.buildLabels(), i.afterBuildLabels(), i.beforeFit(), i.fit(), i.afterFit(), i.afterUpdate(), i.minSize;\n          },\n          afterUpdate: a,\n          beforeSetDimensions: a,\n          setDimensions: function setDimensions() {\n            var t = this;\n            t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = {\n              width: 0,\n              height: 0\n            };\n          },\n          afterSetDimensions: a,\n          beforeBuildLabels: a,\n          buildLabels: a,\n          afterBuildLabels: a,\n          beforeFit: a,\n          fit: function fit() {\n            var a = this,\n                i = e.getValueOrDefault,\n                n = a.options,\n                o = t.defaults.global,\n                r = n.display,\n                l = i(n.fontSize, o.defaultFontSize),\n                s = a.minSize;\n            a.isHorizontal() ? (s.width = a.maxWidth, s.height = r ? l + 2 * n.padding : 0) : (s.width = r ? l + 2 * n.padding : 0, s.height = a.maxHeight), a.width = s.width, a.height = s.height;\n          },\n          afterFit: a,\n          isHorizontal: function isHorizontal() {\n            var t = this.options.position;\n            return \"top\" === t || \"bottom\" === t;\n          },\n          draw: function draw() {\n            var a = this,\n                i = a.ctx,\n                n = e.getValueOrDefault,\n                o = a.options,\n                r = t.defaults.global;\n\n            if (o.display) {\n              var l,\n                  s,\n                  d,\n                  u = n(o.fontSize, r.defaultFontSize),\n                  c = n(o.fontStyle, r.defaultFontStyle),\n                  h = n(o.fontFamily, r.defaultFontFamily),\n                  f = e.fontString(u, c, h),\n                  g = 0,\n                  p = a.top,\n                  m = a.left,\n                  b = a.bottom,\n                  v = a.right;\n              i.fillStyle = n(o.fontColor, r.defaultFontColor), i.font = f, a.isHorizontal() ? (l = m + (v - m) / 2, s = p + (b - p) / 2, d = v - m) : (l = \"left\" === o.position ? m + u / 2 : v - u / 2, s = p + (b - p) / 2, d = b - p, g = Math.PI * (\"left\" === o.position ? -0.5 : 0.5)), i.save(), i.translate(l, s), i.rotate(g), i.textAlign = \"center\", i.textBaseline = \"middle\", i.fillText(o.text, 0, 0, d), i.restore();\n            }\n          }\n        }), t.plugins.register({\n          beforeInit: function beforeInit(e) {\n            var a = e.options,\n                i = a.title;\n            i && (e.titleBlock = new t.Title({\n              ctx: e.chart.ctx,\n              options: i,\n              chart: e\n            }), t.layoutService.addBox(e, e.titleBlock));\n          }\n        });\n      };\n    }, {}],\n    36: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          var a = s.color(t);\n          return a.alpha(e * a.alpha()).rgbaString();\n        }\n\n        function a(t, e) {\n          return e && (s.isArray(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t;\n        }\n\n        function i(t) {\n          var e = t._xScale,\n              a = t._yScale || t._scale,\n              i = t._index,\n              n = t._datasetIndex;\n          return {\n            xLabel: e ? e.getLabelForIndex(i, n) : \"\",\n            yLabel: a ? a.getLabelForIndex(i, n) : \"\",\n            index: i,\n            datasetIndex: n,\n            x: t._model.x,\n            y: t._model.y\n          };\n        }\n\n        function n(e) {\n          var a = t.defaults.global,\n              i = s.getValueOrDefault;\n          return {\n            xPadding: e.xPadding,\n            yPadding: e.yPadding,\n            xAlign: e.xAlign,\n            yAlign: e.yAlign,\n            bodyFontColor: e.bodyFontColor,\n            _bodyFontFamily: i(e.bodyFontFamily, a.defaultFontFamily),\n            _bodyFontStyle: i(e.bodyFontStyle, a.defaultFontStyle),\n            _bodyAlign: e.bodyAlign,\n            bodyFontSize: i(e.bodyFontSize, a.defaultFontSize),\n            bodySpacing: e.bodySpacing,\n            titleFontColor: e.titleFontColor,\n            _titleFontFamily: i(e.titleFontFamily, a.defaultFontFamily),\n            _titleFontStyle: i(e.titleFontStyle, a.defaultFontStyle),\n            titleFontSize: i(e.titleFontSize, a.defaultFontSize),\n            _titleAlign: e.titleAlign,\n            titleSpacing: e.titleSpacing,\n            titleMarginBottom: e.titleMarginBottom,\n            footerFontColor: e.footerFontColor,\n            _footerFontFamily: i(e.footerFontFamily, a.defaultFontFamily),\n            _footerFontStyle: i(e.footerFontStyle, a.defaultFontStyle),\n            footerFontSize: i(e.footerFontSize, a.defaultFontSize),\n            _footerAlign: e.footerAlign,\n            footerSpacing: e.footerSpacing,\n            footerMarginTop: e.footerMarginTop,\n            caretSize: e.caretSize,\n            cornerRadius: e.cornerRadius,\n            backgroundColor: e.backgroundColor,\n            opacity: 0,\n            legendColorBackground: e.multiKeyBackground,\n            displayColors: e.displayColors\n          };\n        }\n\n        function o(t, e) {\n          var a = t._chart.ctx,\n              i = 2 * e.yPadding,\n              n = 0,\n              o = e.body,\n              r = o.reduce(function (t, e) {\n            return t + e.before.length + e.lines.length + e.after.length;\n          }, 0);\n          r += e.beforeBody.length + e.afterBody.length;\n          var l = e.title.length,\n              d = e.footer.length,\n              u = e.titleFontSize,\n              c = e.bodyFontSize,\n              h = e.footerFontSize;\n          i += l * u, i += l ? (l - 1) * e.titleSpacing : 0, i += l ? e.titleMarginBottom : 0, i += r * c, i += r ? (r - 1) * e.bodySpacing : 0, i += d ? e.footerMarginTop : 0, i += d * h, i += d ? (d - 1) * e.footerSpacing : 0;\n\n          var f = 0,\n              g = function g(t) {\n            n = Math.max(n, a.measureText(t).width + f);\n          };\n\n          return a.font = s.fontString(u, e._titleFontStyle, e._titleFontFamily), s.each(e.title, g), a.font = s.fontString(c, e._bodyFontStyle, e._bodyFontFamily), s.each(e.beforeBody.concat(e.afterBody), g), f = e.displayColors ? c + 2 : 0, s.each(o, function (t) {\n            s.each(t.before, g), s.each(t.lines, g), s.each(t.after, g);\n          }), f = 0, a.font = s.fontString(h, e._footerFontStyle, e._footerFontFamily), s.each(e.footer, g), n += 2 * e.xPadding, {\n            width: n,\n            height: i\n          };\n        }\n\n        function r(t, e) {\n          var a = t._model,\n              i = t._chart,\n              n = t._chartInstance.chartArea,\n              o = \"center\",\n              r = \"center\";\n          a.y < e.height ? r = \"top\" : a.y > i.height - e.height && (r = \"bottom\");\n          var l,\n              s,\n              d,\n              u,\n              c,\n              h = (n.left + n.right) / 2,\n              f = (n.top + n.bottom) / 2;\n          \"center\" === r ? (l = function l(t) {\n            return h >= t;\n          }, s = function s(t) {\n            return t > h;\n          }) : (l = function l(t) {\n            return t <= e.width / 2;\n          }, s = function s(t) {\n            return t >= i.width - e.width / 2;\n          }), d = function d(t) {\n            return t + e.width > i.width;\n          }, u = function u(t) {\n            return t - e.width < 0;\n          }, c = function c(t) {\n            return f >= t ? \"top\" : \"bottom\";\n          }, l(a.x) ? (o = \"left\", d(a.x) && (o = \"center\", r = c(a.y))) : s(a.x) && (o = \"right\", u(a.x) && (o = \"center\", r = c(a.y)));\n          var g = t._options;\n          return {\n            xAlign: g.xAlign ? g.xAlign : o,\n            yAlign: g.yAlign ? g.yAlign : r\n          };\n        }\n\n        function l(t, e, a) {\n          var i = t.x,\n              n = t.y,\n              o = t.caretSize,\n              r = t.caretPadding,\n              l = t.cornerRadius,\n              s = a.xAlign,\n              d = a.yAlign,\n              u = o + r,\n              c = l + r;\n          return \"right\" === s ? i -= e.width : \"center\" === s && (i -= e.width / 2), \"top\" === d ? n += u : n -= \"bottom\" === d ? e.height + u : e.height / 2, \"center\" === d ? \"left\" === s ? i += u : \"right\" === s && (i -= u) : \"left\" === s ? i -= c : \"right\" === s && (i += c), {\n            x: i,\n            y: n\n          };\n        }\n\n        var s = t.helpers;\n        t.defaults.global.tooltips = {\n          enabled: !0,\n          custom: null,\n          mode: \"nearest\",\n          position: \"average\",\n          intersect: !0,\n          backgroundColor: \"rgba(0,0,0,0.8)\",\n          titleFontStyle: \"bold\",\n          titleSpacing: 2,\n          titleMarginBottom: 6,\n          titleFontColor: \"#fff\",\n          titleAlign: \"left\",\n          bodySpacing: 2,\n          bodyFontColor: \"#fff\",\n          bodyAlign: \"left\",\n          footerFontStyle: \"bold\",\n          footerSpacing: 2,\n          footerMarginTop: 6,\n          footerFontColor: \"#fff\",\n          footerAlign: \"left\",\n          yPadding: 6,\n          xPadding: 6,\n          caretSize: 5,\n          cornerRadius: 6,\n          multiKeyBackground: \"#fff\",\n          displayColors: !0,\n          callbacks: {\n            beforeTitle: s.noop,\n            title: function title(t, e) {\n              var a = \"\",\n                  i = e.labels,\n                  n = i ? i.length : 0;\n\n              if (t.length > 0) {\n                var o = t[0];\n                o.xLabel ? a = o.xLabel : n > 0 && o.index < n && (a = i[o.index]);\n              }\n\n              return a;\n            },\n            afterTitle: s.noop,\n            beforeBody: s.noop,\n            beforeLabel: s.noop,\n            label: function label(t, e) {\n              var a = e.datasets[t.datasetIndex].label || \"\";\n              return a + \": \" + t.yLabel;\n            },\n            labelColor: function labelColor(t, e) {\n              var a = e.getDatasetMeta(t.datasetIndex),\n                  i = a.data[t.index],\n                  n = i._view;\n              return {\n                borderColor: n.borderColor,\n                backgroundColor: n.backgroundColor\n              };\n            },\n            afterLabel: s.noop,\n            afterBody: s.noop,\n            beforeFooter: s.noop,\n            footer: s.noop,\n            afterFooter: s.noop\n          }\n        }, t.Tooltip = t.Element.extend({\n          initialize: function initialize() {\n            this._model = n(this._options);\n          },\n          getTitle: function getTitle() {\n            var t = this,\n                e = t._options,\n                i = e.callbacks,\n                n = i.beforeTitle.apply(t, arguments),\n                o = i.title.apply(t, arguments),\n                r = i.afterTitle.apply(t, arguments),\n                l = [];\n            return l = a(l, n), l = a(l, o), l = a(l, r);\n          },\n          getBeforeBody: function getBeforeBody() {\n            var t = this._options.callbacks.beforeBody.apply(this, arguments);\n\n            return s.isArray(t) ? t : void 0 !== t ? [t] : [];\n          },\n          getBody: function getBody(t, e) {\n            var i = this,\n                n = i._options.callbacks,\n                o = [];\n            return s.each(t, function (t) {\n              var r = {\n                before: [],\n                lines: [],\n                after: []\n              };\n              a(r.before, n.beforeLabel.call(i, t, e)), a(r.lines, n.label.call(i, t, e)), a(r.after, n.afterLabel.call(i, t, e)), o.push(r);\n            }), o;\n          },\n          getAfterBody: function getAfterBody() {\n            var t = this._options.callbacks.afterBody.apply(this, arguments);\n\n            return s.isArray(t) ? t : void 0 !== t ? [t] : [];\n          },\n          getFooter: function getFooter() {\n            var t = this,\n                e = t._options.callbacks,\n                i = e.beforeFooter.apply(t, arguments),\n                n = e.footer.apply(t, arguments),\n                o = e.afterFooter.apply(t, arguments),\n                r = [];\n            return r = a(r, i), r = a(r, n), r = a(r, o);\n          },\n          update: function update(e) {\n            var a,\n                d,\n                u = this,\n                c = u._options,\n                h = u._model,\n                f = u._model = n(c),\n                g = u._active,\n                p = u._data,\n                m = u._chartInstance,\n                b = {\n              xAlign: h.xAlign,\n              yAlign: h.yAlign\n            },\n                v = {\n              x: h.x,\n              y: h.y\n            },\n                x = {\n              width: h.width,\n              height: h.height\n            },\n                y = {\n              x: h.caretX,\n              y: h.caretY\n            };\n\n            if (g.length) {\n              f.opacity = 1;\n              var k = [];\n              y = t.Tooltip.positioners[c.position](g, u._eventPosition);\n              var S = [];\n\n              for (a = 0, d = g.length; d > a; ++a) {\n                S.push(i(g[a]));\n              }\n\n              c.filter && (S = S.filter(function (t) {\n                return c.filter(t, p);\n              })), c.itemSort && (S = S.sort(function (t, e) {\n                return c.itemSort(t, e, p);\n              })), s.each(S, function (t) {\n                k.push(c.callbacks.labelColor.call(u, t, m));\n              }), f.title = u.getTitle(S, p), f.beforeBody = u.getBeforeBody(S, p), f.body = u.getBody(S, p), f.afterBody = u.getAfterBody(S, p), f.footer = u.getFooter(S, p), f.x = Math.round(y.x), f.y = Math.round(y.y), f.caretPadding = s.getValueOrDefault(y.padding, 2), f.labelColors = k, f.dataPoints = S, x = o(this, f), b = r(this, x), v = l(f, x, b);\n            } else f.opacity = 0;\n\n            return f.xAlign = b.xAlign, f.yAlign = b.yAlign, f.x = v.x, f.y = v.y, f.width = x.width, f.height = x.height, f.caretX = y.x, f.caretY = y.y, u._model = f, e && c.custom && c.custom.call(u, f), u;\n          },\n          drawCaret: function drawCaret(t, a, i) {\n            var n,\n                o,\n                r,\n                l,\n                s,\n                d,\n                u = this._view,\n                c = this._chart.ctx,\n                h = u.caretSize,\n                f = u.cornerRadius,\n                g = u.xAlign,\n                p = u.yAlign,\n                m = t.x,\n                b = t.y,\n                v = a.width,\n                x = a.height;\n            \"center\" === p ? (\"left\" === g ? (n = m, o = n - h, r = n) : (n = m + v, o = n + h, r = n), s = b + x / 2, l = s - h, d = s + h) : (\"left\" === g ? (n = m + f, o = n + h, r = o + h) : \"right\" === g ? (n = m + v - f, o = n - h, r = o - h) : (o = m + v / 2, n = o - h, r = o + h), \"top\" === p ? (l = b, s = l - h, d = l) : (l = b + x, s = l + h, d = l)), c.fillStyle = e(u.backgroundColor, i), c.beginPath(), c.moveTo(n, l), c.lineTo(o, s), c.lineTo(r, d), c.closePath(), c.fill();\n          },\n          drawTitle: function drawTitle(t, a, i, n) {\n            var o = a.title;\n\n            if (o.length) {\n              i.textAlign = a._titleAlign, i.textBaseline = \"top\";\n              var r = a.titleFontSize,\n                  l = a.titleSpacing;\n              i.fillStyle = e(a.titleFontColor, n), i.font = s.fontString(r, a._titleFontStyle, a._titleFontFamily);\n              var d, u;\n\n              for (d = 0, u = o.length; u > d; ++d) {\n                i.fillText(o[d], t.x, t.y), t.y += r + l, d + 1 === o.length && (t.y += a.titleMarginBottom - l);\n              }\n            }\n          },\n          drawBody: function drawBody(t, a, i, n) {\n            var o = a.bodyFontSize,\n                r = a.bodySpacing,\n                l = a.body;\n            i.textAlign = a._bodyAlign, i.textBaseline = \"top\";\n            var d = e(a.bodyFontColor, n);\n            i.fillStyle = d, i.font = s.fontString(o, a._bodyFontStyle, a._bodyFontFamily);\n\n            var u = 0,\n                c = function c(e) {\n              i.fillText(e, t.x + u, t.y), t.y += o + r;\n            };\n\n            s.each(a.beforeBody, c);\n            var h = a.displayColors;\n            u = h ? o + 2 : 0, s.each(l, function (r, l) {\n              s.each(r.before, c), s.each(r.lines, function (r) {\n                h && (i.fillStyle = e(a.legendColorBackground, n), i.fillRect(t.x, t.y, o, o), i.strokeStyle = e(a.labelColors[l].borderColor, n), i.strokeRect(t.x, t.y, o, o), i.fillStyle = e(a.labelColors[l].backgroundColor, n), i.fillRect(t.x + 1, t.y + 1, o - 2, o - 2), i.fillStyle = d), c(r);\n              }), s.each(r.after, c);\n            }), u = 0, s.each(a.afterBody, c), t.y -= r;\n          },\n          drawFooter: function drawFooter(t, a, i, n) {\n            var o = a.footer;\n            o.length && (t.y += a.footerMarginTop, i.textAlign = a._footerAlign, i.textBaseline = \"top\", i.fillStyle = e(a.footerFontColor, n), i.font = s.fontString(a.footerFontSize, a._footerFontStyle, a._footerFontFamily), s.each(o, function (e) {\n              i.fillText(e, t.x, t.y), t.y += a.footerFontSize + a.footerSpacing;\n            }));\n          },\n          drawBackground: function drawBackground(t, a, i, n, o) {\n            i.fillStyle = e(a.backgroundColor, o), s.drawRoundedRectangle(i, t.x, t.y, n.width, n.height, a.cornerRadius), i.fill();\n          },\n          draw: function draw() {\n            var t = this._chart.ctx,\n                e = this._view;\n\n            if (0 !== e.opacity) {\n              var a = {\n                width: e.width,\n                height: e.height\n              },\n                  i = {\n                x: e.x,\n                y: e.y\n              },\n                  n = Math.abs(e.opacity < 0.001) ? 0 : e.opacity;\n              this._options.enabled && (this.drawBackground(i, e, t, a, n), this.drawCaret(i, a, n), i.x += e.xPadding, i.y += e.yPadding, this.drawTitle(i, e, t, n), this.drawBody(i, e, t, n), this.drawFooter(i, e, t, n));\n            }\n          },\n          handleEvent: function handleEvent(t) {\n            var e = this,\n                a = e._options,\n                i = !1;\n\n            if (e._lastActive = e._lastActive || [], \"mouseout\" === t.type ? e._active = [] : e._active = e._chartInstance.getElementsAtEventForMode(t, a.mode, a), i = !s.arrayEquals(e._active, e._lastActive), e._lastActive = e._active, a.enabled || a.custom) {\n              e._eventPosition = s.getRelativePosition(t, e._chart);\n              var n = e._model;\n              e.update(!0), e.pivot(), i |= n.x !== e._model.x || n.y !== e._model.y;\n            }\n\n            return i;\n          }\n        }), t.Tooltip.positioners = {\n          average: function average(t) {\n            if (!t.length) return !1;\n            var e,\n                a,\n                i = 0,\n                n = 0,\n                o = 0;\n\n            for (e = 0, a = t.length; a > e; ++e) {\n              var r = t[e];\n\n              if (r && r.hasValue()) {\n                var l = r.tooltipPosition();\n                i += l.x, n += l.y, ++o;\n              }\n            }\n\n            return {\n              x: Math.round(i / o),\n              y: Math.round(n / o)\n            };\n          },\n          nearest: function nearest(t, e) {\n            var a,\n                i,\n                n,\n                o = e.x,\n                r = e.y,\n                l = Number.POSITIVE_INFINITY;\n\n            for (i = 0, n = t.length; n > i; ++i) {\n              var d = t[i];\n\n              if (d && d.hasValue()) {\n                var u = d.getCenterPoint(),\n                    c = s.distanceBetweenPoints(e, u);\n                l > c && (l = c, a = d);\n              }\n            }\n\n            if (a) {\n              var h = a.tooltipPosition();\n              o = h.x, r = h.y;\n            }\n\n            return {\n              x: o,\n              y: r\n            };\n          }\n        };\n      };\n    }, {}],\n    37: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = t.defaults.global;\n        a.elements.arc = {\n          backgroundColor: a.defaultColor,\n          borderColor: \"#fff\",\n          borderWidth: 2\n        }, t.elements.Arc = t.Element.extend({\n          inLabelRange: function inLabelRange(t) {\n            var e = this._view;\n            return e ? Math.pow(t - e.x, 2) < Math.pow(e.radius + e.hoverRadius, 2) : !1;\n          },\n          inRange: function inRange(t, a) {\n            var i = this._view;\n\n            if (i) {\n              for (var n = e.getAngleFromPoint(i, {\n                x: t,\n                y: a\n              }), o = n.angle, r = n.distance, l = i.startAngle, s = i.endAngle; l > s;) {\n                s += 2 * Math.PI;\n              }\n\n              for (; o > s;) {\n                o -= 2 * Math.PI;\n              }\n\n              for (; l > o;) {\n                o += 2 * Math.PI;\n              }\n\n              var d = o >= l && s >= o,\n                  u = r >= i.innerRadius && r <= i.outerRadius;\n              return d && u;\n            }\n\n            return !1;\n          },\n          getCenterPoint: function getCenterPoint() {\n            var t = this._view,\n                e = (t.startAngle + t.endAngle) / 2,\n                a = (t.innerRadius + t.outerRadius) / 2;\n            return {\n              x: t.x + Math.cos(e) * a,\n              y: t.y + Math.sin(e) * a\n            };\n          },\n          getArea: function getArea() {\n            var t = this._view;\n            return Math.PI * ((t.endAngle - t.startAngle) / (2 * Math.PI)) * (Math.pow(t.outerRadius, 2) - Math.pow(t.innerRadius, 2));\n          },\n          tooltipPosition: function tooltipPosition() {\n            var t = this._view,\n                e = t.startAngle + (t.endAngle - t.startAngle) / 2,\n                a = (t.outerRadius - t.innerRadius) / 2 + t.innerRadius;\n            return {\n              x: t.x + Math.cos(e) * a,\n              y: t.y + Math.sin(e) * a\n            };\n          },\n          draw: function draw() {\n            var t = this._chart.ctx,\n                e = this._view,\n                a = e.startAngle,\n                i = e.endAngle;\n            t.beginPath(), t.arc(e.x, e.y, e.outerRadius, a, i), t.arc(e.x, e.y, e.innerRadius, i, a, !0), t.closePath(), t.strokeStyle = e.borderColor, t.lineWidth = e.borderWidth, t.fillStyle = e.backgroundColor, t.fill(), t.lineJoin = \"bevel\", e.borderWidth && t.stroke();\n          }\n        });\n      };\n    }, {}],\n    38: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = t.defaults.global;\n        t.defaults.global.elements.line = {\n          tension: 0.4,\n          backgroundColor: a.defaultColor,\n          borderWidth: 3,\n          borderColor: a.defaultColor,\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0,\n          borderJoinStyle: \"miter\",\n          capBezierPoints: !0,\n          fill: !0\n        }, t.elements.Line = t.Element.extend({\n          draw: function draw() {\n            function t(t, e) {\n              var a = e._view;\n              e._view.steppedLine === !0 ? (s.lineTo(a.x, t._view.y), s.lineTo(a.x, a.y)) : 0 === e._view.tension ? s.lineTo(a.x, a.y) : s.bezierCurveTo(t._view.controlPointNextX, t._view.controlPointNextY, a.controlPointPreviousX, a.controlPointPreviousY, a.x, a.y);\n            }\n\n            var i = this,\n                n = i._view,\n                o = n.spanGaps,\n                r = n.scaleZero,\n                l = i._loop;\n            l || (\"top\" === n.fill ? r = n.scaleTop : \"bottom\" === n.fill && (r = n.scaleBottom));\n            var s = i._chart.ctx;\n            s.save();\n\n            var d = i._children.slice(),\n                u = -1;\n\n            l && d.length && d.push(d[0]);\n            var c, h, f, g;\n\n            if (d.length && n.fill) {\n              for (s.beginPath(), c = 0; c < d.length; ++c) {\n                h = d[c], f = e.previousItem(d, c), g = h._view, 0 === c ? (l ? s.moveTo(r.x, r.y) : s.moveTo(g.x, r), g.skip || (u = c, s.lineTo(g.x, g.y))) : (f = -1 === u ? f : d[u], g.skip ? o || u !== c - 1 || (l ? s.lineTo(r.x, r.y) : s.lineTo(f._view.x, r)) : (u !== c - 1 ? o && -1 !== u ? t(f, h) : l ? s.lineTo(g.x, g.y) : (s.lineTo(g.x, r), s.lineTo(g.x, g.y)) : t(f, h), u = c));\n              }\n\n              l || -1 === u || s.lineTo(d[u]._view.x, r), s.fillStyle = n.backgroundColor || a.defaultColor, s.closePath(), s.fill();\n            }\n\n            var p = a.elements.line;\n\n            for (s.lineCap = n.borderCapStyle || p.borderCapStyle, s.setLineDash && s.setLineDash(n.borderDash || p.borderDash), s.lineDashOffset = n.borderDashOffset || p.borderDashOffset, s.lineJoin = n.borderJoinStyle || p.borderJoinStyle, s.lineWidth = n.borderWidth || p.borderWidth, s.strokeStyle = n.borderColor || a.defaultColor, s.beginPath(), u = -1, c = 0; c < d.length; ++c) {\n              h = d[c], f = e.previousItem(d, c), g = h._view, 0 === c ? g.skip || (s.moveTo(g.x, g.y), u = c) : (f = -1 === u ? f : d[u], g.skip || (u !== c - 1 && !o || -1 === u ? s.moveTo(g.x, g.y) : t(f, h), u = c));\n            }\n\n            s.stroke(), s.restore();\n          }\n        });\n      };\n    }, {}],\n    39: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t) {\n          var e = this._view;\n          return e ? Math.pow(t - e.x, 2) < Math.pow(e.radius + e.hitRadius, 2) : !1;\n        }\n\n        function a(t) {\n          var e = this._view;\n          return e ? Math.pow(t - e.y, 2) < Math.pow(e.radius + e.hitRadius, 2) : !1;\n        }\n\n        var i = t.helpers,\n            n = t.defaults.global,\n            o = n.defaultColor;\n        n.elements.point = {\n          radius: 3,\n          pointStyle: \"circle\",\n          backgroundColor: o,\n          borderWidth: 1,\n          borderColor: o,\n          hitRadius: 1,\n          hoverRadius: 4,\n          hoverBorderWidth: 1\n        }, t.elements.Point = t.Element.extend({\n          inRange: function inRange(t, e) {\n            var a = this._view;\n            return a ? Math.pow(t - a.x, 2) + Math.pow(e - a.y, 2) < Math.pow(a.hitRadius + a.radius, 2) : !1;\n          },\n          inLabelRange: e,\n          inXRange: e,\n          inYRange: a,\n          getCenterPoint: function getCenterPoint() {\n            var t = this._view;\n            return {\n              x: t.x,\n              y: t.y\n            };\n          },\n          getArea: function getArea() {\n            return Math.PI * Math.pow(this._view.radius, 2);\n          },\n          tooltipPosition: function tooltipPosition() {\n            var t = this._view;\n            return {\n              x: t.x,\n              y: t.y,\n              padding: t.radius + t.borderWidth\n            };\n          },\n          draw: function draw() {\n            var e = this._view,\n                a = this._chart.ctx,\n                r = e.pointStyle,\n                l = e.radius,\n                s = e.x,\n                d = e.y;\n            e.skip || (a.strokeStyle = e.borderColor || o, a.lineWidth = i.getValueOrDefault(e.borderWidth, n.elements.point.borderWidth), a.fillStyle = e.backgroundColor || o, t.canvasHelpers.drawPoint(a, r, l, s, d));\n          }\n        });\n      };\n    }, {}],\n    40: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t) {\n          return void 0 !== t._view.width;\n        }\n\n        function a(t) {\n          var a,\n              i,\n              n,\n              o,\n              r = t._view;\n\n          if (e(t)) {\n            var l = r.width / 2;\n            a = r.x - l, i = r.x + l, n = Math.min(r.y, r.base), o = Math.max(r.y, r.base);\n          } else {\n            var s = r.height / 2;\n            a = Math.min(r.x, r.base), i = Math.max(r.x, r.base), n = r.y - s, o = r.y + s;\n          }\n\n          return {\n            left: a,\n            top: n,\n            right: i,\n            bottom: o\n          };\n        }\n\n        var i = t.defaults.global;\n        i.elements.rectangle = {\n          backgroundColor: i.defaultColor,\n          borderWidth: 0,\n          borderColor: i.defaultColor,\n          borderSkipped: \"bottom\"\n        }, t.elements.Rectangle = t.Element.extend({\n          draw: function draw() {\n            function t(t) {\n              return s[(u + t) % 4];\n            }\n\n            var e = this._chart.ctx,\n                a = this._view,\n                i = a.width / 2,\n                n = a.x - i,\n                o = a.x + i,\n                r = a.base - (a.base - a.y),\n                l = a.borderWidth / 2;\n            a.borderWidth && (n += l, o -= l, r += l), e.beginPath(), e.fillStyle = a.backgroundColor, e.strokeStyle = a.borderColor, e.lineWidth = a.borderWidth;\n            var s = [[n, a.base], [n, r], [o, r], [o, a.base]],\n                d = [\"bottom\", \"left\", \"top\", \"right\"],\n                u = d.indexOf(a.borderSkipped, 0);\n            -1 === u && (u = 0);\n            var c = t(0);\n            e.moveTo(c[0], c[1]);\n\n            for (var h = 1; 4 > h; h++) {\n              c = t(h), e.lineTo(c[0], c[1]);\n            }\n\n            e.fill(), a.borderWidth && e.stroke();\n          },\n          height: function height() {\n            var t = this._view;\n            return t.base - t.y;\n          },\n          inRange: function inRange(t, e) {\n            var i = !1;\n\n            if (this._view) {\n              var n = a(this);\n              i = t >= n.left && t <= n.right && e >= n.top && e <= n.bottom;\n            }\n\n            return i;\n          },\n          inLabelRange: function inLabelRange(t, i) {\n            var n = this;\n            if (!n._view) return !1;\n            var o = !1,\n                r = a(n);\n            return o = e(n) ? t >= r.left && t <= r.right : i >= r.top && i <= r.bottom;\n          },\n          inXRange: function inXRange(t) {\n            var e = a(this);\n            return t >= e.left && t <= e.right;\n          },\n          inYRange: function inYRange(t) {\n            var e = a(this);\n            return t >= e.top && t <= e.bottom;\n          },\n          getCenterPoint: function getCenterPoint() {\n            var t,\n                a,\n                i = this._view;\n            return e(this) ? (t = i.x, a = (i.y + i.base) / 2) : (t = (i.x + i.base) / 2, a = i.y), {\n              x: t,\n              y: a\n            };\n          },\n          getArea: function getArea() {\n            var t = this._view;\n            return t.width * Math.abs(t.y - t.base);\n          },\n          tooltipPosition: function tooltipPosition() {\n            var t = this._view;\n            return {\n              x: t.x,\n              y: t.y\n            };\n          }\n        });\n      };\n    }, {}],\n    41: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = {\n          position: \"bottom\"\n        },\n            i = t.Scale.extend({\n          getLabels: function getLabels() {\n            var t = this.chart.data;\n            return (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels;\n          },\n          determineDataLimits: function determineDataLimits() {\n            var t = this,\n                a = t.getLabels();\n            t.minIndex = 0, t.maxIndex = a.length - 1;\n            var i;\n            void 0 !== t.options.ticks.min && (i = e.indexOf(a, t.options.ticks.min), t.minIndex = -1 !== i ? i : t.minIndex), void 0 !== t.options.ticks.max && (i = e.indexOf(a, t.options.ticks.max), t.maxIndex = -1 !== i ? i : t.maxIndex), t.min = a[t.minIndex], t.max = a[t.maxIndex];\n          },\n          buildTicks: function buildTicks() {\n            var t = this,\n                e = t.getLabels();\n            t.ticks = 0 === t.minIndex && t.maxIndex === e.length - 1 ? e : e.slice(t.minIndex, t.maxIndex + 1);\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            var a = this,\n                i = a.chart.data,\n                n = a.isHorizontal();\n            return i.xLabels && n || i.yLabels && !n ? a.getRightValue(i.datasets[e].data[t]) : a.ticks[t];\n          },\n          getPixelForValue: function getPixelForValue(t, e, a, i) {\n            var n = this,\n                o = Math.max(n.maxIndex + 1 - n.minIndex - (n.options.gridLines.offsetGridLines ? 0 : 1), 1);\n\n            if (void 0 !== t && isNaN(e)) {\n              var r = n.getLabels(),\n                  l = r.indexOf(t);\n              e = -1 !== l ? l : e;\n            }\n\n            if (n.isHorizontal()) {\n              var s = n.width - (n.paddingLeft + n.paddingRight),\n                  d = s / o,\n                  u = d * (e - n.minIndex) + n.paddingLeft;\n              return (n.options.gridLines.offsetGridLines && i || n.maxIndex === n.minIndex && i) && (u += d / 2), n.left + Math.round(u);\n            }\n\n            var c = n.height - (n.paddingTop + n.paddingBottom),\n                h = c / o,\n                f = h * (e - n.minIndex) + n.paddingTop;\n            return n.options.gridLines.offsetGridLines && i && (f += h / 2), n.top + Math.round(f);\n          },\n          getPixelForTick: function getPixelForTick(t, e) {\n            return this.getPixelForValue(this.ticks[t], t + this.minIndex, null, e);\n          },\n          getValueForPixel: function getValueForPixel(t) {\n            var e,\n                a = this,\n                i = Math.max(a.ticks.length - (a.options.gridLines.offsetGridLines ? 0 : 1), 1),\n                n = a.isHorizontal(),\n                o = n ? a.width - (a.paddingLeft + a.paddingRight) : a.height - (a.paddingTop + a.paddingBottom),\n                r = o / i;\n            return t -= n ? a.left : a.top, a.options.gridLines.offsetGridLines && (t -= r / 2), t -= n ? a.paddingLeft : a.paddingTop, e = 0 >= t ? 0 : Math.round(t / r);\n          },\n          getBasePixel: function getBasePixel() {\n            return this.bottom;\n          }\n        });\n        t.scaleService.registerScaleType(\"category\", i, a);\n      };\n    }, {}],\n    42: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = {\n          position: \"left\",\n          ticks: {\n            callback: t.Ticks.formatters.linear\n          }\n        },\n            i = t.LinearScaleBase.extend({\n          determineDataLimits: function determineDataLimits() {\n            function t(t) {\n              return l ? t.xAxisID === a.id : t.yAxisID === a.id;\n            }\n\n            var a = this,\n                i = a.options,\n                n = a.chart,\n                o = n.data,\n                r = o.datasets,\n                l = a.isHorizontal();\n\n            if (a.min = null, a.max = null, i.stacked) {\n              var s = {};\n              e.each(r, function (o, r) {\n                var l = n.getDatasetMeta(r);\n                void 0 === s[l.type] && (s[l.type] = {\n                  positiveValues: [],\n                  negativeValues: []\n                });\n                var d = s[l.type].positiveValues,\n                    u = s[l.type].negativeValues;\n                n.isDatasetVisible(r) && t(l) && e.each(o.data, function (t, e) {\n                  var n = +a.getRightValue(t);\n                  isNaN(n) || l.data[e].hidden || (d[e] = d[e] || 0, u[e] = u[e] || 0, i.relativePoints ? d[e] = 100 : 0 > n ? u[e] += n : d[e] += n);\n                });\n              }), e.each(s, function (t) {\n                var i = t.positiveValues.concat(t.negativeValues),\n                    n = e.min(i),\n                    o = e.max(i);\n                a.min = null === a.min ? n : Math.min(a.min, n), a.max = null === a.max ? o : Math.max(a.max, o);\n              });\n            } else e.each(r, function (i, o) {\n              var r = n.getDatasetMeta(o);\n              n.isDatasetVisible(o) && t(r) && e.each(i.data, function (t, e) {\n                var i = +a.getRightValue(t);\n                isNaN(i) || r.data[e].hidden || (null === a.min ? a.min = i : i < a.min && (a.min = i), null === a.max ? a.max = i : i > a.max && (a.max = i));\n              });\n            });\n\n            this.handleTickRangeOptions();\n          },\n          getTickLimit: function getTickLimit() {\n            var a,\n                i = this,\n                n = i.options.ticks;\n            if (i.isHorizontal()) a = Math.min(n.maxTicksLimit ? n.maxTicksLimit : 11, Math.ceil(i.width / 50));else {\n              var o = e.getValueOrDefault(n.fontSize, t.defaults.global.defaultFontSize);\n              a = Math.min(n.maxTicksLimit ? n.maxTicksLimit : 11, Math.ceil(i.height / (2 * o)));\n            }\n            return a;\n          },\n          handleDirectionalChanges: function handleDirectionalChanges() {\n            this.isHorizontal() || this.ticks.reverse();\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            return +this.getRightValue(this.chart.data.datasets[e].data[t]);\n          },\n          getPixelForValue: function getPixelForValue(t) {\n            var e,\n                a,\n                i = this,\n                n = i.paddingLeft,\n                o = i.paddingBottom,\n                r = i.start,\n                l = +i.getRightValue(t),\n                s = i.end - r;\n            return i.isHorizontal() ? (a = i.width - (n + i.paddingRight), e = i.left + a / s * (l - r), Math.round(e + n)) : (a = i.height - (i.paddingTop + o), e = i.bottom - o - a / s * (l - r), Math.round(e));\n          },\n          getValueForPixel: function getValueForPixel(t) {\n            var e = this,\n                a = e.isHorizontal(),\n                i = e.paddingLeft,\n                n = e.paddingBottom,\n                o = a ? e.width - (i + e.paddingRight) : e.height - (e.paddingTop + n),\n                r = (a ? t - e.left - i : e.bottom - n - t) / o;\n            return e.start + (e.end - e.start) * r;\n          },\n          getPixelForTick: function getPixelForTick(t) {\n            return this.getPixelForValue(this.ticksAsNumbers[t]);\n          }\n        });\n        t.scaleService.registerScaleType(\"linear\", i, a);\n      };\n    }, {}],\n    43: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = e.noop;\n        t.LinearScaleBase = t.Scale.extend({\n          handleTickRangeOptions: function handleTickRangeOptions() {\n            var t = this,\n                a = t.options,\n                i = a.ticks;\n\n            if (i.beginAtZero) {\n              var n = e.sign(t.min),\n                  o = e.sign(t.max);\n              0 > n && 0 > o ? t.max = 0 : n > 0 && o > 0 && (t.min = 0);\n            }\n\n            void 0 !== i.min ? t.min = i.min : void 0 !== i.suggestedMin && (t.min = Math.min(t.min, i.suggestedMin)), void 0 !== i.max ? t.max = i.max : void 0 !== i.suggestedMax && (t.max = Math.max(t.max, i.suggestedMax)), t.min === t.max && (t.max++, i.beginAtZero || t.min--);\n          },\n          getTickLimit: a,\n          handleDirectionalChanges: a,\n          buildTicks: function buildTicks() {\n            var a = this,\n                i = a.options,\n                n = i.ticks,\n                o = a.getTickLimit();\n            o = Math.max(2, o);\n            var r = {\n              maxTicks: o,\n              min: n.min,\n              max: n.max,\n              stepSize: e.getValueOrDefault(n.fixedStepSize, n.stepSize)\n            },\n                l = a.ticks = t.Ticks.generators.linear(r, a);\n            a.handleDirectionalChanges(), a.max = e.max(l), a.min = e.min(l), n.reverse ? (l.reverse(), a.start = a.max, a.end = a.min) : (a.start = a.min, a.end = a.max);\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            var e = this;\n            e.ticksAsNumbers = e.ticks.slice(), e.zeroLineIndex = e.ticks.indexOf(0), t.Scale.prototype.convertTicksToLabels.call(e);\n          }\n        });\n      };\n    }, {}],\n    44: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = {\n          position: \"left\",\n          ticks: {\n            callback: t.Ticks.formatters.logarithmic\n          }\n        },\n            i = t.Scale.extend({\n          determineDataLimits: function determineDataLimits() {\n            function t(t) {\n              return d ? t.xAxisID === a.id : t.yAxisID === a.id;\n            }\n\n            var a = this,\n                i = a.options,\n                n = i.ticks,\n                o = a.chart,\n                r = o.data,\n                l = r.datasets,\n                s = e.getValueOrDefault,\n                d = a.isHorizontal();\n\n            if (a.min = null, a.max = null, a.minNotZero = null, i.stacked) {\n              var u = {};\n              e.each(l, function (n, r) {\n                var l = o.getDatasetMeta(r);\n                o.isDatasetVisible(r) && t(l) && (void 0 === u[l.type] && (u[l.type] = []), e.each(n.data, function (t, e) {\n                  var n = u[l.type],\n                      o = +a.getRightValue(t);\n                  isNaN(o) || l.data[e].hidden || (n[e] = n[e] || 0, i.relativePoints ? n[e] = 100 : n[e] += o);\n                }));\n              }), e.each(u, function (t) {\n                var i = e.min(t),\n                    n = e.max(t);\n                a.min = null === a.min ? i : Math.min(a.min, i), a.max = null === a.max ? n : Math.max(a.max, n);\n              });\n            } else e.each(l, function (i, n) {\n              var r = o.getDatasetMeta(n);\n              o.isDatasetVisible(n) && t(r) && e.each(i.data, function (t, e) {\n                var i = +a.getRightValue(t);\n                isNaN(i) || r.data[e].hidden || (null === a.min ? a.min = i : i < a.min && (a.min = i), null === a.max ? a.max = i : i > a.max && (a.max = i), 0 !== i && (null === a.minNotZero || i < a.minNotZero) && (a.minNotZero = i));\n              });\n            });\n\n            a.min = s(n.min, a.min), a.max = s(n.max, a.max), a.min === a.max && (0 !== a.min && null !== a.min ? (a.min = Math.pow(10, Math.floor(e.log10(a.min)) - 1), a.max = Math.pow(10, Math.floor(e.log10(a.max)) + 1)) : (a.min = 1, a.max = 10));\n          },\n          buildTicks: function buildTicks() {\n            var a = this,\n                i = a.options,\n                n = i.ticks,\n                o = {\n              min: n.min,\n              max: n.max\n            },\n                r = a.ticks = t.Ticks.generators.logarithmic(o, a);\n            a.isHorizontal() || r.reverse(), a.max = e.max(r), a.min = e.min(r), n.reverse ? (r.reverse(), a.start = a.max, a.end = a.min) : (a.start = a.min, a.end = a.max);\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            this.tickValues = this.ticks.slice(), t.Scale.prototype.convertTicksToLabels.call(this);\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            return +this.getRightValue(this.chart.data.datasets[e].data[t]);\n          },\n          getPixelForTick: function getPixelForTick(t) {\n            return this.getPixelForValue(this.tickValues[t]);\n          },\n          getPixelForValue: function getPixelForValue(t) {\n            var a,\n                i,\n                n,\n                o = this,\n                r = o.start,\n                l = +o.getRightValue(t),\n                s = o.paddingTop,\n                d = o.paddingBottom,\n                u = o.paddingLeft,\n                c = o.options,\n                h = c.ticks;\n            return o.isHorizontal() ? (n = e.log10(o.end) - e.log10(r), 0 === l ? i = o.left + u : (a = o.width - (u + o.paddingRight), i = o.left + a / n * (e.log10(l) - e.log10(r)), i += u)) : (a = o.height - (s + d), 0 !== r || h.reverse ? 0 === o.end && h.reverse ? (n = e.log10(o.start) - e.log10(o.minNotZero), i = l === o.end ? o.top + s : l === o.minNotZero ? o.top + s + 0.02 * a : o.top + s + 0.02 * a + 0.98 * a / n * (e.log10(l) - e.log10(o.minNotZero))) : (n = e.log10(o.end) - e.log10(r), a = o.height - (s + d), i = o.bottom - d - a / n * (e.log10(l) - e.log10(r))) : (n = e.log10(o.end) - e.log10(o.minNotZero), i = l === r ? o.bottom - d : l === o.minNotZero ? o.bottom - d - 0.02 * a : o.bottom - d - 0.02 * a - 0.98 * a / n * (e.log10(l) - e.log10(o.minNotZero)))), i;\n          },\n          getValueForPixel: function getValueForPixel(t) {\n            var a,\n                i,\n                n = this,\n                o = e.log10(n.end) - e.log10(n.start);\n            return n.isHorizontal() ? (i = n.width - (n.paddingLeft + n.paddingRight), a = n.start * Math.pow(10, (t - n.left - n.paddingLeft) * o / i)) : (i = n.height - (n.paddingTop + n.paddingBottom), a = Math.pow(10, (n.bottom - n.paddingBottom - t) * o / i) / n.start), a;\n          }\n        });\n        t.scaleService.registerScaleType(\"logarithmic\", i, a);\n      };\n    }, {}],\n    45: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = t.defaults.global,\n            i = {\n          display: !0,\n          animate: !0,\n          lineArc: !1,\n          position: \"chartArea\",\n          angleLines: {\n            display: !0,\n            color: \"rgba(0, 0, 0, 0.1)\",\n            lineWidth: 1\n          },\n          ticks: {\n            showLabelBackdrop: !0,\n            backdropColor: \"rgba(255,255,255,0.75)\",\n            backdropPaddingY: 2,\n            backdropPaddingX: 2,\n            callback: t.Ticks.formatters.linear\n          },\n          pointLabels: {\n            fontSize: 10,\n            callback: function callback(t) {\n              return t;\n            }\n          }\n        },\n            n = t.LinearScaleBase.extend({\n          getValueCount: function getValueCount() {\n            return this.chart.data.labels.length;\n          },\n          setDimensions: function setDimensions() {\n            var t = this,\n                i = t.options,\n                n = i.ticks;\n            t.width = t.maxWidth, t.height = t.maxHeight, t.xCenter = Math.round(t.width / 2), t.yCenter = Math.round(t.height / 2);\n            var o = e.min([t.height, t.width]),\n                r = e.getValueOrDefault(n.fontSize, a.defaultFontSize);\n            t.drawingArea = i.display ? o / 2 - (r / 2 + n.backdropPaddingY) : o / 2;\n          },\n          determineDataLimits: function determineDataLimits() {\n            var t = this,\n                a = t.chart;\n            t.min = null, t.max = null, e.each(a.data.datasets, function (i, n) {\n              if (a.isDatasetVisible(n)) {\n                var o = a.getDatasetMeta(n);\n                e.each(i.data, function (e, a) {\n                  var i = +t.getRightValue(e);\n                  isNaN(i) || o.data[a].hidden || (null === t.min ? t.min = i : i < t.min && (t.min = i), null === t.max ? t.max = i : i > t.max && (t.max = i));\n                });\n              }\n            }), t.handleTickRangeOptions();\n          },\n          getTickLimit: function getTickLimit() {\n            var t = this.options.ticks,\n                i = e.getValueOrDefault(t.fontSize, a.defaultFontSize);\n            return Math.min(t.maxTicksLimit ? t.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * i)));\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            var e = this;\n            t.LinearScaleBase.prototype.convertTicksToLabels.call(e), e.pointLabels = e.chart.data.labels.map(e.options.pointLabels.callback, e);\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            return +this.getRightValue(this.chart.data.datasets[e].data[t]);\n          },\n          fit: function fit() {\n            var t,\n                i,\n                n,\n                o,\n                r,\n                l,\n                s,\n                d,\n                u,\n                c,\n                h,\n                f,\n                g = this.options.pointLabels,\n                p = e.getValueOrDefault(g.fontSize, a.defaultFontSize),\n                m = e.getValueOrDefault(g.fontStyle, a.defaultFontStyle),\n                b = e.getValueOrDefault(g.fontFamily, a.defaultFontFamily),\n                v = e.fontString(p, m, b),\n                x = e.min([this.height / 2 - p - 5, this.width / 2]),\n                y = this.width,\n                k = 0;\n\n            for (this.ctx.font = v, i = 0; i < this.getValueCount(); i++) {\n              t = this.getPointPosition(i, x), n = this.ctx.measureText(this.pointLabels[i] ? this.pointLabels[i] : \"\").width + 5;\n              var S = this.getIndexAngle(i) + Math.PI / 2,\n                  w = 360 * S / (2 * Math.PI) % 360;\n              0 === w || 180 === w ? (o = n / 2, t.x + o > y && (y = t.x + o, r = i), t.x - o < k && (k = t.x - o, s = i)) : 180 > w ? t.x + n > y && (y = t.x + n, r = i) : t.x - n < k && (k = t.x - n, s = i);\n            }\n\n            u = k, c = Math.ceil(y - this.width), l = this.getIndexAngle(r), d = this.getIndexAngle(s), h = c / Math.sin(l + Math.PI / 2), f = u / Math.sin(d + Math.PI / 2), h = e.isNumber(h) ? h : 0, f = e.isNumber(f) ? f : 0, this.drawingArea = Math.round(x - (f + h) / 2), this.setCenterPoint(f, h);\n          },\n          setCenterPoint: function setCenterPoint(t, e) {\n            var a = this,\n                i = a.width - e - a.drawingArea,\n                n = t + a.drawingArea;\n            a.xCenter = Math.round((n + i) / 2 + a.left), a.yCenter = Math.round(a.height / 2 + a.top);\n          },\n          getIndexAngle: function getIndexAngle(t) {\n            var e = 2 * Math.PI / this.getValueCount(),\n                a = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0,\n                i = a * Math.PI * 2 / 360;\n            return t * e - Math.PI / 2 + i;\n          },\n          getDistanceFromCenterForValue: function getDistanceFromCenterForValue(t) {\n            var e = this;\n            if (null === t) return 0;\n            var a = e.drawingArea / (e.max - e.min);\n            return e.options.reverse ? (e.max - t) * a : (t - e.min) * a;\n          },\n          getPointPosition: function getPointPosition(t, e) {\n            var a = this,\n                i = a.getIndexAngle(t);\n            return {\n              x: Math.round(Math.cos(i) * e) + a.xCenter,\n              y: Math.round(Math.sin(i) * e) + a.yCenter\n            };\n          },\n          getPointPositionForValue: function getPointPositionForValue(t, e) {\n            return this.getPointPosition(t, this.getDistanceFromCenterForValue(e));\n          },\n          getBasePosition: function getBasePosition() {\n            var t = this,\n                e = t.min,\n                a = t.max;\n            return t.getPointPositionForValue(0, t.beginAtZero ? 0 : 0 > e && 0 > a ? a : e > 0 && a > 0 ? e : 0);\n          },\n          draw: function draw() {\n            var t = this,\n                i = t.options,\n                n = i.gridLines,\n                o = i.ticks,\n                r = i.angleLines,\n                l = i.pointLabels,\n                s = e.getValueOrDefault;\n\n            if (i.display) {\n              var d = t.ctx,\n                  u = s(o.fontSize, a.defaultFontSize),\n                  c = s(o.fontStyle, a.defaultFontStyle),\n                  h = s(o.fontFamily, a.defaultFontFamily),\n                  f = e.fontString(u, c, h);\n\n              if (e.each(t.ticks, function (r, l) {\n                if (l > 0 || i.reverse) {\n                  var c = t.getDistanceFromCenterForValue(t.ticksAsNumbers[l]),\n                      h = t.yCenter - c;\n                  if (n.display && 0 !== l) if (d.strokeStyle = e.getValueAtIndexOrDefault(n.color, l - 1), d.lineWidth = e.getValueAtIndexOrDefault(n.lineWidth, l - 1), i.lineArc) d.beginPath(), d.arc(t.xCenter, t.yCenter, c, 0, 2 * Math.PI), d.closePath(), d.stroke();else {\n                    d.beginPath();\n\n                    for (var g = 0; g < t.getValueCount(); g++) {\n                      var p = t.getPointPosition(g, c);\n                      0 === g ? d.moveTo(p.x, p.y) : d.lineTo(p.x, p.y);\n                    }\n\n                    d.closePath(), d.stroke();\n                  }\n\n                  if (o.display) {\n                    var m = s(o.fontColor, a.defaultFontColor);\n\n                    if (d.font = f, o.showLabelBackdrop) {\n                      var b = d.measureText(r).width;\n                      d.fillStyle = o.backdropColor, d.fillRect(t.xCenter - b / 2 - o.backdropPaddingX, h - u / 2 - o.backdropPaddingY, b + 2 * o.backdropPaddingX, u + 2 * o.backdropPaddingY);\n                    }\n\n                    d.textAlign = \"center\", d.textBaseline = \"middle\", d.fillStyle = m, d.fillText(r, t.xCenter, h);\n                  }\n                }\n              }), !i.lineArc) {\n                d.lineWidth = r.lineWidth, d.strokeStyle = r.color;\n\n                for (var g = t.getDistanceFromCenterForValue(i.reverse ? t.min : t.max), p = s(l.fontSize, a.defaultFontSize), m = s(l.fontStyle, a.defaultFontStyle), b = s(l.fontFamily, a.defaultFontFamily), v = e.fontString(p, m, b), x = t.getValueCount() - 1; x >= 0; x--) {\n                  if (r.display) {\n                    var y = t.getPointPosition(x, g);\n                    d.beginPath(), d.moveTo(t.xCenter, t.yCenter), d.lineTo(y.x, y.y), d.stroke(), d.closePath();\n                  }\n\n                  var k = t.getPointPosition(x, g + 5),\n                      S = s(l.fontColor, a.defaultFontColor);\n                  d.font = v, d.fillStyle = S;\n                  var w = t.pointLabels,\n                      M = this.getIndexAngle(x) + Math.PI / 2,\n                      C = 360 * M / (2 * Math.PI) % 360;\n                  0 === C || 180 === C ? d.textAlign = \"center\" : 180 > C ? d.textAlign = \"left\" : d.textAlign = \"right\", 90 === C || 270 === C ? d.textBaseline = \"middle\" : C > 270 || 90 > C ? d.textBaseline = \"bottom\" : d.textBaseline = \"top\", d.fillText(w[x] ? w[x] : \"\", k.x, k.y);\n                }\n              }\n            }\n          }\n        });\n        t.scaleService.registerScaleType(\"radialLinear\", n, i);\n      };\n    }, {}],\n    46: [function (t, e, a) {\n      \"use strict\";\n\n      var i = t(1);\n      i = \"function\" == typeof i ? i : window.moment, e.exports = function (t) {\n        var e = t.helpers,\n            a = {\n          units: [{\n            name: \"millisecond\",\n            steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n          }, {\n            name: \"second\",\n            steps: [1, 2, 5, 10, 30]\n          }, {\n            name: \"minute\",\n            steps: [1, 2, 5, 10, 30]\n          }, {\n            name: \"hour\",\n            steps: [1, 2, 3, 6, 12]\n          }, {\n            name: \"day\",\n            steps: [1, 2, 5]\n          }, {\n            name: \"week\",\n            maxStep: 4\n          }, {\n            name: \"month\",\n            maxStep: 3\n          }, {\n            name: \"quarter\",\n            maxStep: 4\n          }, {\n            name: \"year\",\n            maxStep: !1\n          }]\n        },\n            n = {\n          position: \"bottom\",\n          time: {\n            parser: !1,\n            format: !1,\n            unit: !1,\n            round: !1,\n            displayFormat: !1,\n            isoWeekday: !1,\n            minUnit: \"millisecond\",\n            displayFormats: {\n              millisecond: \"h:mm:ss.SSS a\",\n              second: \"h:mm:ss a\",\n              minute: \"h:mm:ss a\",\n              hour: \"MMM D, hA\",\n              day: \"ll\",\n              week: \"ll\",\n              month: \"MMM YYYY\",\n              quarter: \"[Q]Q - YYYY\",\n              year: \"YYYY\"\n            }\n          },\n          ticks: {\n            autoSkip: !1\n          }\n        },\n            o = t.Scale.extend({\n          initialize: function initialize() {\n            if (!i) throw new Error(\"Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com\");\n            t.Scale.prototype.initialize.call(this);\n          },\n          getLabelMoment: function getLabelMoment(t, e) {\n            return null === t || null === e ? null : \"undefined\" != typeof this.labelMoments[t] ? this.labelMoments[t][e] : null;\n          },\n          getLabelDiff: function getLabelDiff(t, e) {\n            var a = this;\n            return null === t || null === e ? null : (void 0 === a.labelDiffs && a.buildLabelDiffs(), \"undefined\" != typeof a.labelDiffs[t] ? a.labelDiffs[t][e] : null);\n          },\n          getMomentStartOf: function getMomentStartOf(t) {\n            var e = this;\n            return \"week\" === e.options.time.unit && e.options.time.isoWeekday !== !1 ? t.clone().startOf(\"isoWeek\").isoWeekday(e.options.time.isoWeekday) : t.clone().startOf(e.tickUnit);\n          },\n          determineDataLimits: function determineDataLimits() {\n            var t = this;\n            t.labelMoments = [];\n            var a = [];\n            t.chart.data.labels && t.chart.data.labels.length > 0 ? (e.each(t.chart.data.labels, function (e) {\n              var i = t.parseTime(e);\n              i.isValid() && (t.options.time.round && i.startOf(t.options.time.round), a.push(i));\n            }, t), t.firstTick = i.min.call(t, a), t.lastTick = i.max.call(t, a)) : (t.firstTick = null, t.lastTick = null), e.each(t.chart.data.datasets, function (n, o) {\n              var r = [],\n                  l = t.chart.isDatasetVisible(o);\n              \"object\" == _typeof(n.data[0]) && null !== n.data[0] ? e.each(n.data, function (e) {\n                var a = t.parseTime(t.getRightValue(e));\n                a.isValid() && (t.options.time.round && a.startOf(t.options.time.round), r.push(a), l && (t.firstTick = null !== t.firstTick ? i.min(t.firstTick, a) : a, t.lastTick = null !== t.lastTick ? i.max(t.lastTick, a) : a));\n              }, t) : r = a, t.labelMoments.push(r);\n            }, t), t.options.time.min && (t.firstTick = t.parseTime(t.options.time.min)), t.options.time.max && (t.lastTick = t.parseTime(t.options.time.max)), t.firstTick = (t.firstTick || i()).clone(), t.lastTick = (t.lastTick || i()).clone();\n          },\n          buildLabelDiffs: function buildLabelDiffs() {\n            var t = this;\n            t.labelDiffs = [];\n            var a = [];\n            t.chart.data.labels && t.chart.data.labels.length > 0 && e.each(t.chart.data.labels, function (e) {\n              var i = t.parseTime(e);\n              i.isValid() && (t.options.time.round && i.startOf(t.options.time.round), a.push(i.diff(t.firstTick, t.tickUnit, !0)));\n            }, t), e.each(t.chart.data.datasets, function (i) {\n              var n = [];\n              \"object\" == _typeof(i.data[0]) && null !== i.data[0] ? e.each(i.data, function (e) {\n                var a = t.parseTime(t.getRightValue(e));\n                a.isValid() && (t.options.time.round && a.startOf(t.options.time.round), n.push(a.diff(t.firstTick, t.tickUnit, !0)));\n              }, t) : n = a, t.labelDiffs.push(n);\n            }, t);\n          },\n          buildTicks: function buildTicks() {\n            var i = this;\n            i.ctx.save();\n            var n = e.getValueOrDefault(i.options.ticks.fontSize, t.defaults.global.defaultFontSize),\n                o = e.getValueOrDefault(i.options.ticks.fontStyle, t.defaults.global.defaultFontStyle),\n                r = e.getValueOrDefault(i.options.ticks.fontFamily, t.defaults.global.defaultFontFamily),\n                l = e.fontString(n, o, r);\n            if (i.ctx.font = l, i.ticks = [], i.unitScale = 1, i.scaleSizeInUnits = 0, i.options.time.unit) i.tickUnit = i.options.time.unit || \"day\", i.displayFormat = i.options.time.displayFormats[i.tickUnit], i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0), i.unitScale = e.getValueOrDefault(i.options.time.unitStepSize, 1);else {\n              var s = i.isHorizontal() ? i.width - (i.paddingLeft + i.paddingRight) : i.height - (i.paddingTop + i.paddingBottom),\n                  d = i.tickFormatFunction(i.firstTick, 0, []),\n                  u = i.ctx.measureText(d).width,\n                  c = Math.cos(e.toRadians(i.options.ticks.maxRotation)),\n                  h = Math.sin(e.toRadians(i.options.ticks.maxRotation));\n              u = u * c + n * h;\n              var f = s / u;\n              i.tickUnit = i.options.time.minUnit, i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0), i.displayFormat = i.options.time.displayFormats[i.tickUnit];\n\n              for (var g = 0, p = a.units[g]; g < a.units.length;) {\n                if (i.unitScale = 1, e.isArray(p.steps) && Math.ceil(i.scaleSizeInUnits / f) < e.max(p.steps)) {\n                  for (var m = 0; m < p.steps.length; ++m) {\n                    if (p.steps[m] >= Math.ceil(i.scaleSizeInUnits / f)) {\n                      i.unitScale = e.getValueOrDefault(i.options.time.unitStepSize, p.steps[m]);\n                      break;\n                    }\n                  }\n\n                  break;\n                }\n\n                if (p.maxStep === !1 || Math.ceil(i.scaleSizeInUnits / f) < p.maxStep) {\n                  i.unitScale = e.getValueOrDefault(i.options.time.unitStepSize, Math.ceil(i.scaleSizeInUnits / f));\n                  break;\n                }\n\n                ++g, p = a.units[g], i.tickUnit = p.name;\n                var b = i.firstTick.diff(i.getMomentStartOf(i.firstTick), i.tickUnit, !0),\n                    v = i.getMomentStartOf(i.lastTick.clone().add(1, i.tickUnit)).diff(i.lastTick, i.tickUnit, !0);\n                i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0) + b + v, i.displayFormat = i.options.time.displayFormats[p.name];\n              }\n            }\n            var x;\n\n            if (i.options.time.min ? x = i.getMomentStartOf(i.firstTick) : (i.firstTick = i.getMomentStartOf(i.firstTick), x = i.firstTick), !i.options.time.max) {\n              var y = i.getMomentStartOf(i.lastTick),\n                  k = y.diff(i.lastTick, i.tickUnit, !0);\n              0 > k ? i.lastTick = i.getMomentStartOf(i.lastTick.add(1, i.tickUnit)) : k >= 0 && (i.lastTick = y), i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0);\n            }\n\n            i.options.time.displayFormat && (i.displayFormat = i.options.time.displayFormat), i.ticks.push(i.firstTick.clone());\n\n            for (var S = 1; S <= i.scaleSizeInUnits; ++S) {\n              var w = x.clone().add(S, i.tickUnit);\n              if (i.options.time.max && w.diff(i.lastTick, i.tickUnit, !0) >= 0) break;\n              S % i.unitScale === 0 && i.ticks.push(w);\n            }\n\n            var M = i.ticks[i.ticks.length - 1].diff(i.lastTick, i.tickUnit);\n            (0 !== M || 0 === i.scaleSizeInUnits) && (i.options.time.max ? (i.ticks.push(i.lastTick.clone()), i.scaleSizeInUnits = i.lastTick.diff(i.ticks[0], i.tickUnit, !0)) : (i.ticks.push(i.lastTick.clone()), i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0))), i.ctx.restore(), i.labelDiffs = void 0;\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            var a = this,\n                i = a.chart.data.labels && t < a.chart.data.labels.length ? a.chart.data.labels[t] : \"\";\n            return \"object\" == _typeof(a.chart.data.datasets[e].data[0]) && (i = a.getRightValue(a.chart.data.datasets[e].data[t])), a.options.time.tooltipFormat && (i = a.parseTime(i).format(a.options.time.tooltipFormat)), i;\n          },\n          tickFormatFunction: function tickFormatFunction(t, a, i) {\n            var n = t.format(this.displayFormat),\n                o = this.options.ticks,\n                r = e.getValueOrDefault(o.callback, o.userCallback);\n            return r ? r(n, a, i) : n;\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            var t = this;\n            t.tickMoments = t.ticks, t.ticks = t.ticks.map(t.tickFormatFunction, t);\n          },\n          getPixelForValue: function getPixelForValue(t, e, a) {\n            var i = this,\n                n = null;\n\n            if (void 0 !== e && void 0 !== a && (n = i.getLabelDiff(a, e)), null === n && (t && t.isValid || (t = i.parseTime(i.getRightValue(t))), t && t.isValid && t.isValid() && (n = t.diff(i.firstTick, i.tickUnit, !0))), null !== n) {\n              var o = 0 !== n ? n / i.scaleSizeInUnits : n;\n\n              if (i.isHorizontal()) {\n                var r = i.width - (i.paddingLeft + i.paddingRight),\n                    l = r * o + i.paddingLeft;\n                return i.left + Math.round(l);\n              }\n\n              var s = i.height - (i.paddingTop + i.paddingBottom),\n                  d = s * o + i.paddingTop;\n              return i.top + Math.round(d);\n            }\n          },\n          getPixelForTick: function getPixelForTick(t) {\n            return this.getPixelForValue(this.tickMoments[t], null, null);\n          },\n          getValueForPixel: function getValueForPixel(t) {\n            var e = this,\n                a = e.isHorizontal() ? e.width - (e.paddingLeft + e.paddingRight) : e.height - (e.paddingTop + e.paddingBottom),\n                n = (t - (e.isHorizontal() ? e.left + e.paddingLeft : e.top + e.paddingTop)) / a;\n            return n *= e.scaleSizeInUnits, e.firstTick.clone().add(i.duration(n, e.tickUnit).asSeconds(), \"seconds\");\n          },\n          parseTime: function parseTime(t) {\n            var e = this;\n            return \"string\" == typeof e.options.time.parser ? i(t, e.options.time.parser) : \"function\" == typeof e.options.time.parser ? e.options.time.parser(t) : \"function\" == typeof t.getMonth || \"number\" == typeof t ? i(t) : t.isValid && t.isValid() ? t : \"string\" != typeof e.options.time.format && e.options.time.format.call ? (console.warn(\"options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale\"), e.options.time.format(t)) : i(t, e.options.time.format);\n          }\n        });\n        t.scaleService.registerScaleType(\"time\", o, n);\n      };\n    }, {\n      1: 1\n    }]\n  }, {}, [7])(7);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VixDQUFlRSxNQUFsQyxJQUNBaGxDLENBQUMsQ0FBQ2daLE9BQUYsQ0FBVThyQixJQUFWLENBQWVFLE1BQWYsQ0FBc0IvakMsSUFEdEIsSUFFQ21HLE9BQU8sQ0FBQ2dnQyxJQUFSLENBQ0Msd0lBREQsR0FHRHBuQyxDQUFDLENBQUNnWixPQUFGLENBQVU4ckIsSUFBVixDQUFlRSxNQUFmLENBQXNCcmxDLENBQXRCLENBTEEsSUFNQVcsQ0FBQyxDQUFDWCxDQUFELEVBQUlLLENBQUMsQ0FBQ2daLE9BQUYsQ0FBVThyQixJQUFWLENBQWVFLE1BQW5CLENBZEw7QUFlRDtBQTVYZ0IsU0FBZixDQXpDTjtBQXVhQXJsQyxRQUFBQSxDQUFDLENBQUM2cEIsWUFBRixDQUFleVQsaUJBQWYsQ0FBaUMsTUFBakMsRUFBeUNyOEIsQ0FBekMsRUFBNENMLENBQTVDO0FBQ0QsT0ExYUg7QUEyYUQsS0EvYUMsRUFnYkY7QUFBRSxTQUFHO0FBQUwsS0FoYkU7QUFqMVFOLEdBbkNLLEVBdXlSTCxFQXZ5UkssRUF3eVJMLENBQUMsQ0FBRCxDQXh5UkssRUF5eVJMLENBenlSSyxDQUFQO0FBMHlSRCxDQTN6UkEsQ0FBRCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWJvaWxlci1wbGF0ZS8uL3NyYy9saWIvQ2hhcnQvQ2hhcnQubWluLmpzPzM1NWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDaGFydC5qc1xuICogaHR0cDovL2NoYXJ0anMub3JnL1xuICogVmVyc2lvbjogMi40LjBcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNiBOaWNrIERvd25pZVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4gKi9cbiEoZnVuY3Rpb24gKHQpIHtcbiAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgbW9kdWxlKVxuICAgIG1vZHVsZS5leHBvcnRzID0gdCgpO1xuICBlbHNlIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kKSBkZWZpbmUoW10sIHQpO1xuICBlbHNlIHtcbiAgICB2YXIgZTtcbiAgICAoZSA9XG4gICAgICBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3dcbiAgICAgICAgPyB3aW5kb3dcbiAgICAgICAgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBnbG9iYWxcbiAgICAgICAgPyBnbG9iYWxcbiAgICAgICAgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBzZWxmXG4gICAgICAgID8gc2VsZlxuICAgICAgICA6IHRoaXMpLFxuICAgICAgKGUuQ2hhcnQgPSB0KCkpO1xuICB9XG59KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gdChlLCBhLCBpKSB7XG4gICAgZnVuY3Rpb24gbihyLCBsKSB7XG4gICAgICBpZiAoIWFbcl0pIHtcbiAgICAgICAgaWYgKCFlW3JdKSB7XG4gICAgICAgICAgdmFyIHMgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHJlcXVpcmUgJiYgcmVxdWlyZTtcbiAgICAgICAgICBpZiAoIWwgJiYgcykgcmV0dXJuIHMociwgITApO1xuICAgICAgICAgIGlmIChvKSByZXR1cm4gbyhyLCAhMCk7XG4gICAgICAgICAgdmFyIGQgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgciArIFwiJ1wiKTtcbiAgICAgICAgICB0aHJvdyAoKGQuY29kZSA9IFwiTU9EVUxFX05PVF9GT1VORFwiKSwgZCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHUgPSAoYVtyXSA9IHsgZXhwb3J0czoge30gfSk7XG4gICAgICAgIGVbcl1bMF0uY2FsbChcbiAgICAgICAgICB1LmV4cG9ydHMsXG4gICAgICAgICAgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBhID0gZVtyXVsxXVt0XTtcbiAgICAgICAgICAgIHJldHVybiBuKGEgPyBhIDogdCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB1LFxuICAgICAgICAgIHUuZXhwb3J0cyxcbiAgICAgICAgICB0LFxuICAgICAgICAgIGUsXG4gICAgICAgICAgYSxcbiAgICAgICAgICBpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYVtyXS5leHBvcnRzO1xuICAgIH1cbiAgICBmb3IgKFxuICAgICAgdmFyIG8gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHJlcXVpcmUgJiYgcmVxdWlyZSwgciA9IDA7XG4gICAgICByIDwgaS5sZW5ndGg7XG4gICAgICByKytcbiAgICApXG4gICAgICBuKGlbcl0pO1xuICAgIHJldHVybiBuO1xuICB9KShcbiAgICB7XG4gICAgICAxOiBbZnVuY3Rpb24gKHQsIGUsIGEpIHt9LCB7fV0sXG4gICAgICAyOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgZnVuY3Rpb24gaSh0KSB7XG4gICAgICAgICAgICBpZiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IC9eIyhbYS1mQS1GMC05XXszfSkkLyxcbiAgICAgICAgICAgICAgICBhID0gL14jKFthLWZBLUYwLTldezZ9KSQvLFxuICAgICAgICAgICAgICAgIGkgPVxuICAgICAgICAgICAgICAgICAgL15yZ2JhP1xcKFxccyooWystXT9cXGQrKVxccyosXFxzKihbKy1dP1xcZCspXFxzKixcXHMqKFsrLV0/XFxkKylcXHMqKD86LFxccyooWystXT9bXFxkXFwuXSspXFxzKik/XFwpJC8sXG4gICAgICAgICAgICAgICAgbiA9XG4gICAgICAgICAgICAgICAgICAvXnJnYmE/XFwoXFxzKihbKy1dP1tcXGRcXC5dKylcXCVcXHMqLFxccyooWystXT9bXFxkXFwuXSspXFwlXFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKVxcJVxccyooPzosXFxzKihbKy1dP1tcXGRcXC5dKylcXHMqKT9cXCkkLyxcbiAgICAgICAgICAgICAgICBvID0gLyhcXHcrKS8sXG4gICAgICAgICAgICAgICAgciA9IFswLCAwLCAwXSxcbiAgICAgICAgICAgICAgICBsID0gMSxcbiAgICAgICAgICAgICAgICBzID0gdC5tYXRjaChlKTtcbiAgICAgICAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgICAgICBzID0gc1sxXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IHIubGVuZ3RoOyBkKyspXG4gICAgICAgICAgICAgICAgICByW2RdID0gcGFyc2VJbnQoc1tkXSArIHNbZF0sIDE2KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgocyA9IHQubWF0Y2goYSkpKSB7XG4gICAgICAgICAgICAgICAgcyA9IHNbMV07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCByLmxlbmd0aDsgZCsrKVxuICAgICAgICAgICAgICAgICAgcltkXSA9IHBhcnNlSW50KHMuc2xpY2UoMiAqIGQsIDIgKiBkICsgMiksIDE2KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgocyA9IHQubWF0Y2goaSkpKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCByLmxlbmd0aDsgZCsrKSByW2RdID0gcGFyc2VJbnQoc1tkICsgMV0pO1xuICAgICAgICAgICAgICAgIGwgPSBwYXJzZUZsb2F0KHNbNF0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKChzID0gdC5tYXRjaChuKSkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IHIubGVuZ3RoOyBkKyspXG4gICAgICAgICAgICAgICAgICByW2RdID0gTWF0aC5yb3VuZCgyLjU1ICogcGFyc2VGbG9hdChzW2QgKyAxXSkpO1xuICAgICAgICAgICAgICAgIGwgPSBwYXJzZUZsb2F0KHNbNF0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKChzID0gdC5tYXRjaChvKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJ0cmFuc3BhcmVudFwiID09IHNbMV0pIHJldHVybiBbMCwgMCwgMCwgMF07XG4gICAgICAgICAgICAgICAgaWYgKCgociA9IHlbc1sxXV0pLCAhcikpIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IHIubGVuZ3RoOyBkKyspIHJbZF0gPSB2KHJbZF0sIDAsIDI1NSk7XG4gICAgICAgICAgICAgIHJldHVybiAobCA9IGwgfHwgMCA9PSBsID8gdihsLCAwLCAxKSA6IDEpLCAoclszXSA9IGwpLCByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBuKHQpIHtcbiAgICAgICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID1cbiAgICAgICAgICAgICAgICAgIC9eaHNsYT9cXChcXHMqKFsrLV0/XFxkKykoPzpkZWcpP1xccyosXFxzKihbKy1dP1tcXGRcXC5dKyklXFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqKD86LFxccyooWystXT9bXFxkXFwuXSspXFxzKik/XFwpLyxcbiAgICAgICAgICAgICAgICBhID0gdC5tYXRjaChlKTtcbiAgICAgICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHBhcnNlRmxvYXQoYVs0XSksXG4gICAgICAgICAgICAgICAgICBuID0gdihwYXJzZUludChhWzFdKSwgMCwgMzYwKSxcbiAgICAgICAgICAgICAgICAgIG8gPSB2KHBhcnNlRmxvYXQoYVsyXSksIDAsIDEwMCksXG4gICAgICAgICAgICAgICAgICByID0gdihwYXJzZUZsb2F0KGFbM10pLCAwLCAxMDApLFxuICAgICAgICAgICAgICAgICAgbCA9IHYoaXNOYU4oaSkgPyAxIDogaSwgMCwgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtuLCBvLCByLCBsXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBvKHQpIHtcbiAgICAgICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID1cbiAgICAgICAgICAgICAgICAgIC9eaHdiXFwoXFxzKihbKy1dP1xcZCspKD86ZGVnKT9cXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyosXFxzKihbKy1dP1tcXGRcXC5dKyklXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKS8sXG4gICAgICAgICAgICAgICAgYSA9IHQubWF0Y2goZSk7XG4gICAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBwYXJzZUZsb2F0KGFbNF0pLFxuICAgICAgICAgICAgICAgICAgbiA9IHYocGFyc2VJbnQoYVsxXSksIDAsIDM2MCksXG4gICAgICAgICAgICAgICAgICBvID0gdihwYXJzZUZsb2F0KGFbMl0pLCAwLCAxMDApLFxuICAgICAgICAgICAgICAgICAgciA9IHYocGFyc2VGbG9hdChhWzNdKSwgMCwgMTAwKSxcbiAgICAgICAgICAgICAgICAgIGwgPSB2KGlzTmFOKGkpID8gMSA6IGksIDAsIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbbiwgbywgciwgbF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcih0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IGkodCk7XG4gICAgICAgICAgICByZXR1cm4gZSAmJiBlLnNsaWNlKDAsIDMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBsKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gbih0KTtcbiAgICAgICAgICAgIHJldHVybiBlICYmIGUuc2xpY2UoMCwgMyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHModCkge1xuICAgICAgICAgICAgdmFyIGUgPSBpKHQpO1xuICAgICAgICAgICAgcmV0dXJuIGUgPyBlWzNdIDogKGUgPSBuKHQpKSA/IGVbM10gOiAoZSA9IG8odCkpID8gZVszXSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gZCh0KSB7XG4gICAgICAgICAgICByZXR1cm4gXCIjXCIgKyB4KHRbMF0pICsgeCh0WzFdKSArIHgodFsyXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHUodCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIDEgPiBlIHx8ICh0WzNdICYmIHRbM10gPCAxKVxuICAgICAgICAgICAgICA/IGModCwgZSlcbiAgICAgICAgICAgICAgOiBcInJnYihcIiArIHRbMF0gKyBcIiwgXCIgKyB0WzFdICsgXCIsIFwiICsgdFsyXSArIFwiKVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBjKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHZvaWQgMCAhPT0gdFszXSA/IHRbM10gOiAxKSxcbiAgICAgICAgICAgICAgXCJyZ2JhKFwiICsgdFswXSArIFwiLCBcIiArIHRbMV0gKyBcIiwgXCIgKyB0WzJdICsgXCIsIFwiICsgZSArIFwiKVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBoKHQsIGUpIHtcbiAgICAgICAgICAgIGlmICgxID4gZSB8fCAodFszXSAmJiB0WzNdIDwgMSkpIHJldHVybiBmKHQsIGUpO1xuICAgICAgICAgICAgdmFyIGEgPSBNYXRoLnJvdW5kKCh0WzBdIC8gMjU1KSAqIDEwMCksXG4gICAgICAgICAgICAgIGkgPSBNYXRoLnJvdW5kKCh0WzFdIC8gMjU1KSAqIDEwMCksXG4gICAgICAgICAgICAgIG4gPSBNYXRoLnJvdW5kKCh0WzJdIC8gMjU1KSAqIDEwMCk7XG4gICAgICAgICAgICByZXR1cm4gXCJyZ2IoXCIgKyBhICsgXCIlLCBcIiArIGkgKyBcIiUsIFwiICsgbiArIFwiJSlcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gZih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgYSA9IE1hdGgucm91bmQoKHRbMF0gLyAyNTUpICogMTAwKSxcbiAgICAgICAgICAgICAgaSA9IE1hdGgucm91bmQoKHRbMV0gLyAyNTUpICogMTAwKSxcbiAgICAgICAgICAgICAgbiA9IE1hdGgucm91bmQoKHRbMl0gLyAyNTUpICogMTAwKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIFwicmdiYShcIiArXG4gICAgICAgICAgICAgIGEgK1xuICAgICAgICAgICAgICBcIiUsIFwiICtcbiAgICAgICAgICAgICAgaSArXG4gICAgICAgICAgICAgIFwiJSwgXCIgK1xuICAgICAgICAgICAgICBuICtcbiAgICAgICAgICAgICAgXCIlLCBcIiArXG4gICAgICAgICAgICAgIChlIHx8IHRbM10gfHwgMSkgK1xuICAgICAgICAgICAgICBcIilcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gZyh0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gMSA+IGUgfHwgKHRbM10gJiYgdFszXSA8IDEpXG4gICAgICAgICAgICAgID8gcCh0LCBlKVxuICAgICAgICAgICAgICA6IFwiaHNsKFwiICsgdFswXSArIFwiLCBcIiArIHRbMV0gKyBcIiUsIFwiICsgdFsyXSArIFwiJSlcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcCh0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSB2b2lkIDAgIT09IHRbM10gPyB0WzNdIDogMSksXG4gICAgICAgICAgICAgIFwiaHNsYShcIiArIHRbMF0gKyBcIiwgXCIgKyB0WzFdICsgXCIlLCBcIiArIHRbMl0gKyBcIiUsIFwiICsgZSArIFwiKVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBtKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHZvaWQgMCAhPT0gdFszXSA/IHRbM10gOiAxKSxcbiAgICAgICAgICAgICAgXCJod2IoXCIgK1xuICAgICAgICAgICAgICAgIHRbMF0gK1xuICAgICAgICAgICAgICAgIFwiLCBcIiArXG4gICAgICAgICAgICAgICAgdFsxXSArXG4gICAgICAgICAgICAgICAgXCIlLCBcIiArXG4gICAgICAgICAgICAgICAgdFsyXSArXG4gICAgICAgICAgICAgICAgXCIlXCIgK1xuICAgICAgICAgICAgICAgICh2b2lkIDAgIT09IGUgJiYgMSAhPT0gZSA/IFwiLCBcIiArIGUgOiBcIlwiKSArXG4gICAgICAgICAgICAgICAgXCIpXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGIodCkge1xuICAgICAgICAgICAgcmV0dXJuIGtbdC5zbGljZSgwLCAzKV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHYodCwgZSwgYSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KGUsIHQpLCBhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24geCh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICByZXR1cm4gZS5sZW5ndGggPCAyID8gXCIwXCIgKyBlIDogZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHkgPSB0KDYpO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IHtcbiAgICAgICAgICAgIGdldFJnYmE6IGksXG4gICAgICAgICAgICBnZXRIc2xhOiBuLFxuICAgICAgICAgICAgZ2V0UmdiOiByLFxuICAgICAgICAgICAgZ2V0SHNsOiBsLFxuICAgICAgICAgICAgZ2V0SHdiOiBvLFxuICAgICAgICAgICAgZ2V0QWxwaGE6IHMsXG4gICAgICAgICAgICBoZXhTdHJpbmc6IGQsXG4gICAgICAgICAgICByZ2JTdHJpbmc6IHUsXG4gICAgICAgICAgICByZ2JhU3RyaW5nOiBjLFxuICAgICAgICAgICAgcGVyY2VudFN0cmluZzogaCxcbiAgICAgICAgICAgIHBlcmNlbnRhU3RyaW5nOiBmLFxuICAgICAgICAgICAgaHNsU3RyaW5nOiBnLFxuICAgICAgICAgICAgaHNsYVN0cmluZzogcCxcbiAgICAgICAgICAgIGh3YlN0cmluZzogbSxcbiAgICAgICAgICAgIGtleXdvcmQ6IGIsXG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgayA9IHt9O1xuICAgICAgICAgIGZvciAodmFyIFMgaW4geSkga1t5W1NdXSA9IFM7XG4gICAgICAgIH0sXG4gICAgICAgIHsgNjogNiB9LFxuICAgICAgXSxcbiAgICAgIDM6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICB2YXIgaSA9IHQoNSksXG4gICAgICAgICAgICBuID0gdCgyKSxcbiAgICAgICAgICAgIG8gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIG8pIHJldHVybiB0O1xuICAgICAgICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgbykpIHJldHVybiBuZXcgbyh0KTtcbiAgICAgICAgICAgICAgdGhpcy52YWx1ZXMgPSB7XG4gICAgICAgICAgICAgICAgcmdiOiBbMCwgMCwgMF0sXG4gICAgICAgICAgICAgICAgaHNsOiBbMCwgMCwgMF0sXG4gICAgICAgICAgICAgICAgaHN2OiBbMCwgMCwgMF0sXG4gICAgICAgICAgICAgICAgaHdiOiBbMCwgMCwgMF0sXG4gICAgICAgICAgICAgICAgY215azogWzAsIDAsIDAsIDBdLFxuICAgICAgICAgICAgICAgIGFscGhhOiAxLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpXG4gICAgICAgICAgICAgICAgaWYgKChlID0gbi5nZXRSZ2JhKHQpKSkgdGhpcy5zZXRWYWx1ZXMoXCJyZ2JcIiwgZSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKGUgPSBuLmdldEhzbGEodCkpKSB0aGlzLnNldFZhbHVlcyhcImhzbFwiLCBlKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmICghKGUgPSBuLmdldEh3Yih0KSkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHBhcnNlIGNvbG9yIGZyb20gc3RyaW5nIFwiJyArIHQgKyAnXCInXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlcyhcImh3YlwiLCBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIHQpXG4gICAgICAgICAgICAgICAgaWYgKCgoZSA9IHQpLCB2b2lkIDAgIT09IGUuciB8fCB2b2lkIDAgIT09IGUucmVkKSlcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVzKFwicmdiXCIsIGUpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZvaWQgMCAhPT0gZS5sIHx8IHZvaWQgMCAhPT0gZS5saWdodG5lc3MpXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlcyhcImhzbFwiLCBlKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2b2lkIDAgIT09IGUudiB8fCB2b2lkIDAgIT09IGUudmFsdWUpXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlcyhcImhzdlwiLCBlKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2b2lkIDAgIT09IGUudyB8fCB2b2lkIDAgIT09IGUud2hpdGVuZXNzKVxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZXMoXCJod2JcIiwgZSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBlLmMgJiYgdm9pZCAwID09PSBlLmN5YW4pXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICBcIlVuYWJsZSB0byBwYXJzZSBjb2xvciBmcm9tIG9iamVjdCBcIiArIEpTT04uc3RyaW5naWZ5KHQpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlcyhcImNteWtcIiwgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAoby5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICByZ2I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3BhY2UoXCJyZ2JcIiwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoc2w6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3BhY2UoXCJoc2xcIiwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoc3Y6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3BhY2UoXCJoc3ZcIiwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBod2I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3BhY2UoXCJod2JcIiwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbXlrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFNwYWNlKFwiY215a1wiLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJnYkFycmF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5yZ2I7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaHNsQXJyYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzLmhzbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoc3ZBcnJheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMuaHN2O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGh3YkFycmF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciB0ID0gdGhpcy52YWx1ZXM7XG4gICAgICAgICAgICAgIHJldHVybiAxICE9PSB0LmFscGhhID8gdC5od2IuY29uY2F0KFt0LmFscGhhXSkgOiB0Lmh3YjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbXlrQXJyYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzLmNteWs7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmdiYUFycmF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciB0ID0gdGhpcy52YWx1ZXM7XG4gICAgICAgICAgICAgIHJldHVybiB0LnJnYi5jb25jYXQoW3QuYWxwaGFdKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoc2xhQXJyYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnZhbHVlcztcbiAgICAgICAgICAgICAgcmV0dXJuIHQuaHNsLmNvbmNhdChbdC5hbHBoYV0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFscGhhOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0XG4gICAgICAgICAgICAgICAgPyB0aGlzLnZhbHVlcy5hbHBoYVxuICAgICAgICAgICAgICAgIDogKHRoaXMuc2V0VmFsdWVzKFwiYWxwaGFcIiwgdCksIHRoaXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2hhbm5lbChcInJnYlwiLCAwLCB0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBncmVlbjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2hhbm5lbChcInJnYlwiLCAxLCB0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDaGFubmVsKFwicmdiXCIsIDIsIHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGh1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB0ICYmICgodCAlPSAzNjApLCAodCA9IDAgPiB0ID8gMzYwICsgdCA6IHQpKSxcbiAgICAgICAgICAgICAgICB0aGlzLnNldENoYW5uZWwoXCJoc2xcIiwgMCwgdClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXR1cmF0aW9uOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDaGFubmVsKFwiaHNsXCIsIDEsIHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpZ2h0bmVzczogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2hhbm5lbChcImhzbFwiLCAyLCB0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXR1cmF0aW9udjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2hhbm5lbChcImhzdlwiLCAxLCB0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3aGl0ZW5lc3M6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldENoYW5uZWwoXCJod2JcIiwgMSwgdCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxhY2tuZXNzOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDaGFubmVsKFwiaHdiXCIsIDIsIHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDaGFubmVsKFwiaHN2XCIsIDIsIHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGN5YW46IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldENoYW5uZWwoXCJjbXlrXCIsIDAsIHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hZ2VudGE6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldENoYW5uZWwoXCJjbXlrXCIsIDEsIHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHllbGxvdzogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2hhbm5lbChcImNteWtcIiwgMiwgdCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxhY2s6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldENoYW5uZWwoXCJjbXlrXCIsIDMsIHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhleFN0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gbi5oZXhTdHJpbmcodGhpcy52YWx1ZXMucmdiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZ2JTdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG4ucmdiU3RyaW5nKHRoaXMudmFsdWVzLnJnYiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJnYmFTdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG4ucmdiYVN0cmluZyh0aGlzLnZhbHVlcy5yZ2IsIHRoaXMudmFsdWVzLmFscGhhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwZXJjZW50U3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuLnBlcmNlbnRTdHJpbmcodGhpcy52YWx1ZXMucmdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaHNsU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuLmhzbFN0cmluZyh0aGlzLnZhbHVlcy5oc2wsIHRoaXMudmFsdWVzLmFscGhhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoc2xhU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuLmhzbGFTdHJpbmcodGhpcy52YWx1ZXMuaHNsLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaHdiU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuLmh3YlN0cmluZyh0aGlzLnZhbHVlcy5od2IsIHRoaXMudmFsdWVzLmFscGhhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBrZXl3b3JkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuLmtleXdvcmQodGhpcy52YWx1ZXMucmdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmdiTnVtYmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciB0ID0gdGhpcy52YWx1ZXMucmdiO1xuICAgICAgICAgICAgICByZXR1cm4gKHRbMF0gPDwgMTYpIHwgKHRbMV0gPDwgOCkgfCB0WzJdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGx1bWlub3NpdHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IHRoaXMudmFsdWVzLnJnYiwgZSA9IFtdLCBhID0gMDsgYSA8IHQubGVuZ3RoOyBhKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHRbYV0gLyAyNTU7XG4gICAgICAgICAgICAgICAgZVthXSA9XG4gICAgICAgICAgICAgICAgICAwLjAzOTI4ID49IGkgPyBpIC8gMTIuOTIgOiBNYXRoLnBvdygoaSArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiAwLjIxMjYgKiBlWzBdICsgMC43MTUyICogZVsxXSArIDAuMDcyMiAqIGVbMl07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udHJhc3Q6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID0gdGhpcy5sdW1pbm9zaXR5KCksXG4gICAgICAgICAgICAgICAgYSA9IHQubHVtaW5vc2l0eSgpO1xuICAgICAgICAgICAgICByZXR1cm4gZSA+IGEgPyAoZSArIDAuMDUpIC8gKGEgKyAwLjA1KSA6IChhICsgMC4wNSkgLyAoZSArIDAuMDUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxldmVsOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuY29udHJhc3QodCk7XG4gICAgICAgICAgICAgIHJldHVybiBlID49IDcuMSA/IFwiQUFBXCIgOiBlID49IDQuNSA/IFwiQUFcIiA6IFwiXCI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGFyazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMudmFsdWVzLnJnYixcbiAgICAgICAgICAgICAgICBlID0gKDI5OSAqIHRbMF0gKyA1ODcgKiB0WzFdICsgMTE0ICogdFsyXSkgLyAxZTM7XG4gICAgICAgICAgICAgIHJldHVybiAxMjggPiBlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpZ2h0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiAhdGhpcy5kYXJrKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmVnYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIHQgPSBbXSwgZSA9IDA7IDMgPiBlOyBlKyspXG4gICAgICAgICAgICAgICAgdFtlXSA9IDI1NSAtIHRoaXMudmFsdWVzLnJnYltlXTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0VmFsdWVzKFwicmdiXCIsIHQpLCB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpZ2h0ZW46IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID0gdGhpcy52YWx1ZXMuaHNsO1xuICAgICAgICAgICAgICByZXR1cm4gKGVbMl0gKz0gZVsyXSAqIHQpLCB0aGlzLnNldFZhbHVlcyhcImhzbFwiLCBlKSwgdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXJrZW46IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID0gdGhpcy52YWx1ZXMuaHNsO1xuICAgICAgICAgICAgICByZXR1cm4gKGVbMl0gLT0gZVsyXSAqIHQpLCB0aGlzLnNldFZhbHVlcyhcImhzbFwiLCBlKSwgdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXR1cmF0ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnZhbHVlcy5oc2w7XG4gICAgICAgICAgICAgIHJldHVybiAoZVsxXSArPSBlWzFdICogdCksIHRoaXMuc2V0VmFsdWVzKFwiaHNsXCIsIGUpLCB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc2F0dXJhdGU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID0gdGhpcy52YWx1ZXMuaHNsO1xuICAgICAgICAgICAgICByZXR1cm4gKGVbMV0gLT0gZVsxXSAqIHQpLCB0aGlzLnNldFZhbHVlcyhcImhzbFwiLCBlKSwgdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3aGl0ZW46IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID0gdGhpcy52YWx1ZXMuaHdiO1xuICAgICAgICAgICAgICByZXR1cm4gKGVbMV0gKz0gZVsxXSAqIHQpLCB0aGlzLnNldFZhbHVlcyhcImh3YlwiLCBlKSwgdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibGFja2VuOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMudmFsdWVzLmh3YjtcbiAgICAgICAgICAgICAgcmV0dXJuIChlWzJdICs9IGVbMl0gKiB0KSwgdGhpcy5zZXRWYWx1ZXMoXCJod2JcIiwgZSksIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ3JleXNjYWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciB0ID0gdGhpcy52YWx1ZXMucmdiLFxuICAgICAgICAgICAgICAgIGUgPSAwLjMgKiB0WzBdICsgMC41OSAqIHRbMV0gKyAwLjExICogdFsyXTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0VmFsdWVzKFwicmdiXCIsIFtlLCBlLCBlXSksIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xlYXJlcjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnZhbHVlcy5hbHBoYTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0VmFsdWVzKFwiYWxwaGFcIiwgZSAtIGUgKiB0KSwgdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcGFxdWVyOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMudmFsdWVzLmFscGhhO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRWYWx1ZXMoXCJhbHBoYVwiLCBlICsgZSAqIHQpLCB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvdGF0ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnZhbHVlcy5oc2wsXG4gICAgICAgICAgICAgICAgYSA9IChlWzBdICsgdCkgJSAzNjA7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgKGVbMF0gPSAwID4gYSA/IDM2MCArIGEgOiBhKSwgdGhpcy5zZXRWYWx1ZXMoXCJoc2xcIiwgZSksIHRoaXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtaXg6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICBpID0gdCxcbiAgICAgICAgICAgICAgICBuID0gdm9pZCAwID09PSBlID8gMC41IDogZSxcbiAgICAgICAgICAgICAgICBvID0gMiAqIG4gLSAxLFxuICAgICAgICAgICAgICAgIHIgPSBhLmFscGhhKCkgLSBpLmFscGhhKCksXG4gICAgICAgICAgICAgICAgbCA9ICgobyAqIHIgPT09IC0xID8gbyA6IChvICsgcikgLyAoMSArIG8gKiByKSkgKyAxKSAvIDIsXG4gICAgICAgICAgICAgICAgcyA9IDEgLSBsO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZ2IoXG4gICAgICAgICAgICAgICAgbCAqIGEucmVkKCkgKyBzICogaS5yZWQoKSxcbiAgICAgICAgICAgICAgICBsICogYS5ncmVlbigpICsgcyAqIGkuZ3JlZW4oKSxcbiAgICAgICAgICAgICAgICBsICogYS5ibHVlKCkgKyBzICogaS5ibHVlKClcbiAgICAgICAgICAgICAgKS5hbHBoYShhLmFscGhhKCkgKiBuICsgaS5hbHBoYSgpICogKDEgLSBuKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9KU09OOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJnYigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciB0LFxuICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgYSA9IG5ldyBvKCksXG4gICAgICAgICAgICAgICAgaSA9IHRoaXMudmFsdWVzLFxuICAgICAgICAgICAgICAgIG4gPSBhLnZhbHVlcztcbiAgICAgICAgICAgICAgZm9yICh2YXIgciBpbiBpKVxuICAgICAgICAgICAgICAgIGkuaGFzT3duUHJvcGVydHkocikgJiZcbiAgICAgICAgICAgICAgICAgICgodCA9IGlbcl0pLFxuICAgICAgICAgICAgICAgICAgKGUgPSB7fS50b1N0cmluZy5jYWxsKHQpKSxcbiAgICAgICAgICAgICAgICAgIFwiW29iamVjdCBBcnJheV1cIiA9PT0gZVxuICAgICAgICAgICAgICAgICAgICA/IChuW3JdID0gdC5zbGljZSgwKSlcbiAgICAgICAgICAgICAgICAgICAgOiBcIltvYmplY3QgTnVtYmVyXVwiID09PSBlXG4gICAgICAgICAgICAgICAgICAgID8gKG5bcl0gPSB0KVxuICAgICAgICAgICAgICAgICAgICA6IGNvbnNvbGUuZXJyb3IoXCJ1bmV4cGVjdGVkIGNvbG9yIHZhbHVlOlwiLCB0KSk7XG4gICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICAgIChvLnByb3RvdHlwZS5zcGFjZXMgPSB7XG4gICAgICAgICAgICAgIHJnYjogW1wicmVkXCIsIFwiZ3JlZW5cIiwgXCJibHVlXCJdLFxuICAgICAgICAgICAgICBoc2w6IFtcImh1ZVwiLCBcInNhdHVyYXRpb25cIiwgXCJsaWdodG5lc3NcIl0sXG4gICAgICAgICAgICAgIGhzdjogW1wiaHVlXCIsIFwic2F0dXJhdGlvblwiLCBcInZhbHVlXCJdLFxuICAgICAgICAgICAgICBod2I6IFtcImh1ZVwiLCBcIndoaXRlbmVzc1wiLCBcImJsYWNrbmVzc1wiXSxcbiAgICAgICAgICAgICAgY215azogW1wiY3lhblwiLCBcIm1hZ2VudGFcIiwgXCJ5ZWxsb3dcIiwgXCJibGFja1wiXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKG8ucHJvdG90eXBlLm1heGVzID0ge1xuICAgICAgICAgICAgICByZ2I6IFsyNTUsIDI1NSwgMjU1XSxcbiAgICAgICAgICAgICAgaHNsOiBbMzYwLCAxMDAsIDEwMF0sXG4gICAgICAgICAgICAgIGhzdjogWzM2MCwgMTAwLCAxMDBdLFxuICAgICAgICAgICAgICBod2I6IFszNjAsIDEwMCwgMTAwXSxcbiAgICAgICAgICAgICAgY215azogWzEwMCwgMTAwLCAxMDAsIDEwMF0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIChvLnByb3RvdHlwZS5nZXRWYWx1ZXMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBlID0gdGhpcy52YWx1ZXMsIGEgPSB7fSwgaSA9IDA7IGkgPCB0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIGFbdC5jaGFyQXQoaSldID0gZVt0XVtpXTtcbiAgICAgICAgICAgICAgcmV0dXJuIDEgIT09IGUuYWxwaGEgJiYgKGEuYSA9IGUuYWxwaGEpLCBhO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAoby5wcm90b3R5cGUuc2V0VmFsdWVzID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgbiA9IHRoaXMudmFsdWVzLFxuICAgICAgICAgICAgICAgIG8gPSB0aGlzLnNwYWNlcyxcbiAgICAgICAgICAgICAgICByID0gdGhpcy5tYXhlcyxcbiAgICAgICAgICAgICAgICBsID0gMTtcbiAgICAgICAgICAgICAgaWYgKFwiYWxwaGFcIiA9PT0gdCkgbCA9IGU7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKGUubGVuZ3RoKVxuICAgICAgICAgICAgICAgIChuW3RdID0gZS5zbGljZSgwLCB0Lmxlbmd0aCkpLCAobCA9IGVbdC5sZW5ndGhdKTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAodm9pZCAwICE9PSBlW3QuY2hhckF0KDApXSkge1xuICAgICAgICAgICAgICAgIGZvciAoYSA9IDA7IGEgPCB0Lmxlbmd0aDsgYSsrKSBuW3RdW2FdID0gZVt0LmNoYXJBdChhKV07XG4gICAgICAgICAgICAgICAgbCA9IGUuYTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2b2lkIDAgIT09IGVbb1t0XVswXV0pIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG9bdF07XG4gICAgICAgICAgICAgICAgZm9yIChhID0gMDsgYSA8IHQubGVuZ3RoOyBhKyspIG5bdF1bYV0gPSBlW3NbYV1dO1xuICAgICAgICAgICAgICAgIGwgPSBlLmFscGhhO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoKG4uYWxwaGEgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICBNYXRoLm1pbigxLCB2b2lkIDAgPT09IGwgPyBuLmFscGhhIDogbClcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICBcImFscGhhXCIgPT09IHQpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgIHZhciBkO1xuICAgICAgICAgICAgICBmb3IgKGEgPSAwOyBhIDwgdC5sZW5ndGg7IGErKylcbiAgICAgICAgICAgICAgICAoZCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHJbdF1bYV0sIG5bdF1bYV0pKSksXG4gICAgICAgICAgICAgICAgICAoblt0XVthXSA9IE1hdGgucm91bmQoZCkpO1xuICAgICAgICAgICAgICBmb3IgKHZhciB1IGluIG8pIHUgIT09IHQgJiYgKG5bdV0gPSBpW3RdW3VdKG5bdF0pKTtcbiAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAoby5wcm90b3R5cGUuc2V0U3BhY2UgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICB2YXIgYSA9IGVbMF07XG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IGFcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2V0VmFsdWVzKHQpXG4gICAgICAgICAgICAgICAgOiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYSAmJiAoYSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpKSxcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVzKHQsIGEpLFxuICAgICAgICAgICAgICAgICAgdGhpcyk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIChvLnByb3RvdHlwZS5zZXRDaGFubmVsID0gZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLnZhbHVlc1t0XTtcbiAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gYVxuICAgICAgICAgICAgICAgID8gaVtlXVxuICAgICAgICAgICAgICAgIDogYSA9PT0gaVtlXVxuICAgICAgICAgICAgICAgID8gdGhpc1xuICAgICAgICAgICAgICAgIDogKChpW2VdID0gYSksIHRoaXMuc2V0VmFsdWVzKHQsIGkpLCB0aGlzKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ICYmICh3aW5kb3cuQ29sb3IgPSBvKSxcbiAgICAgICAgICAgIChlLmV4cG9ydHMgPSBvKTtcbiAgICAgICAgfSxcbiAgICAgICAgeyAyOiAyLCA1OiA1IH0sXG4gICAgICBdLFxuICAgICAgNDogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIGZ1bmN0aW9uIGkodCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG4gPSB0WzBdIC8gMjU1LFxuICAgICAgICAgICAgICBvID0gdFsxXSAvIDI1NSxcbiAgICAgICAgICAgICAgciA9IHRbMl0gLyAyNTUsXG4gICAgICAgICAgICAgIGwgPSBNYXRoLm1pbihuLCBvLCByKSxcbiAgICAgICAgICAgICAgcyA9IE1hdGgubWF4KG4sIG8sIHIpLFxuICAgICAgICAgICAgICBkID0gcyAtIGw7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICBzID09IGxcbiAgICAgICAgICAgICAgICA/IChlID0gMClcbiAgICAgICAgICAgICAgICA6IG4gPT0gc1xuICAgICAgICAgICAgICAgID8gKGUgPSAobyAtIHIpIC8gZClcbiAgICAgICAgICAgICAgICA6IG8gPT0gc1xuICAgICAgICAgICAgICAgID8gKGUgPSAyICsgKHIgLSBuKSAvIGQpXG4gICAgICAgICAgICAgICAgOiByID09IHMgJiYgKGUgPSA0ICsgKG4gLSBvKSAvIGQpLFxuICAgICAgICAgICAgICAoZSA9IE1hdGgubWluKDYwICogZSwgMzYwKSksXG4gICAgICAgICAgICAgIDAgPiBlICYmIChlICs9IDM2MCksXG4gICAgICAgICAgICAgIChpID0gKGwgKyBzKSAvIDIpLFxuICAgICAgICAgICAgICAoYSA9IHMgPT0gbCA/IDAgOiAwLjUgPj0gaSA/IGQgLyAocyArIGwpIDogZCAvICgyIC0gcyAtIGwpKSxcbiAgICAgICAgICAgICAgW2UsIDEwMCAqIGEsIDEwMCAqIGldXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBuKHQpIHtcbiAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICBuID0gdFswXSxcbiAgICAgICAgICAgICAgbyA9IHRbMV0sXG4gICAgICAgICAgICAgIHIgPSB0WzJdLFxuICAgICAgICAgICAgICBsID0gTWF0aC5taW4obiwgbywgciksXG4gICAgICAgICAgICAgIHMgPSBNYXRoLm1heChuLCBvLCByKSxcbiAgICAgICAgICAgICAgZCA9IHMgLSBsO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKGEgPSAwID09IHMgPyAwIDogKChkIC8gcykgKiAxZTMpIC8gMTApLFxuICAgICAgICAgICAgICBzID09IGxcbiAgICAgICAgICAgICAgICA/IChlID0gMClcbiAgICAgICAgICAgICAgICA6IG4gPT0gc1xuICAgICAgICAgICAgICAgID8gKGUgPSAobyAtIHIpIC8gZClcbiAgICAgICAgICAgICAgICA6IG8gPT0gc1xuICAgICAgICAgICAgICAgID8gKGUgPSAyICsgKHIgLSBuKSAvIGQpXG4gICAgICAgICAgICAgICAgOiByID09IHMgJiYgKGUgPSA0ICsgKG4gLSBvKSAvIGQpLFxuICAgICAgICAgICAgICAoZSA9IE1hdGgubWluKDYwICogZSwgMzYwKSksXG4gICAgICAgICAgICAgIDAgPiBlICYmIChlICs9IDM2MCksXG4gICAgICAgICAgICAgIChpID0gKChzIC8gMjU1KSAqIDFlMykgLyAxMCksXG4gICAgICAgICAgICAgIFtlLCBhLCBpXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbyh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHRbMF0sXG4gICAgICAgICAgICAgIGEgPSB0WzFdLFxuICAgICAgICAgICAgICBuID0gdFsyXSxcbiAgICAgICAgICAgICAgbyA9IGkodClbMF0sXG4gICAgICAgICAgICAgIHIgPSAoMSAvIDI1NSkgKiBNYXRoLm1pbihlLCBNYXRoLm1pbihhLCBuKSksXG4gICAgICAgICAgICAgIG4gPSAxIC0gKDEgLyAyNTUpICogTWF0aC5tYXgoZSwgTWF0aC5tYXgoYSwgbikpO1xuICAgICAgICAgICAgcmV0dXJuIFtvLCAxMDAgKiByLCAxMDAgKiBuXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbCh0KSB7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgbyA9IHRbMF0gLyAyNTUsXG4gICAgICAgICAgICAgIHIgPSB0WzFdIC8gMjU1LFxuICAgICAgICAgICAgICBsID0gdFsyXSAvIDI1NTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIChuID0gTWF0aC5taW4oMSAtIG8sIDEgLSByLCAxIC0gbCkpLFxuICAgICAgICAgICAgICAoZSA9ICgxIC0gbyAtIG4pIC8gKDEgLSBuKSB8fCAwKSxcbiAgICAgICAgICAgICAgKGEgPSAoMSAtIHIgLSBuKSAvICgxIC0gbikgfHwgMCksXG4gICAgICAgICAgICAgIChpID0gKDEgLSBsIC0gbikgLyAoMSAtIG4pIHx8IDApLFxuICAgICAgICAgICAgICBbMTAwICogZSwgMTAwICogYSwgMTAwICogaSwgMTAwICogbl1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHModCkge1xuICAgICAgICAgICAgcmV0dXJuIEdbSlNPTi5zdHJpbmdpZnkodCldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBkKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdFswXSAvIDI1NSxcbiAgICAgICAgICAgICAgYSA9IHRbMV0gLyAyNTUsXG4gICAgICAgICAgICAgIGkgPSB0WzJdIC8gMjU1O1xuICAgICAgICAgICAgKGUgPSBlID4gMC4wNDA0NSA/IE1hdGgucG93KChlICsgMC4wNTUpIC8gMS4wNTUsIDIuNCkgOiBlIC8gMTIuOTIpLFxuICAgICAgICAgICAgICAoYSA9XG4gICAgICAgICAgICAgICAgYSA+IDAuMDQwNDUgPyBNYXRoLnBvdygoYSArIDAuMDU1KSAvIDEuMDU1LCAyLjQpIDogYSAvIDEyLjkyKSxcbiAgICAgICAgICAgICAgKGkgPVxuICAgICAgICAgICAgICAgIGkgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKGkgKyAwLjA1NSkgLyAxLjA1NSwgMi40KSA6IGkgLyAxMi45Mik7XG4gICAgICAgICAgICB2YXIgbiA9IDAuNDEyNCAqIGUgKyAwLjM1NzYgKiBhICsgMC4xODA1ICogaSxcbiAgICAgICAgICAgICAgbyA9IDAuMjEyNiAqIGUgKyAwLjcxNTIgKiBhICsgMC4wNzIyICogaSxcbiAgICAgICAgICAgICAgciA9IDAuMDE5MyAqIGUgKyAwLjExOTIgKiBhICsgMC45NTA1ICogaTtcbiAgICAgICAgICAgIHJldHVybiBbMTAwICogbiwgMTAwICogbywgMTAwICogcl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHUodCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG4gPSBkKHQpLFxuICAgICAgICAgICAgICBvID0gblswXSxcbiAgICAgICAgICAgICAgciA9IG5bMV0sXG4gICAgICAgICAgICAgIGwgPSBuWzJdO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKG8gLz0gOTUuMDQ3KSxcbiAgICAgICAgICAgICAgKHIgLz0gMTAwKSxcbiAgICAgICAgICAgICAgKGwgLz0gMTA4Ljg4MyksXG4gICAgICAgICAgICAgIChvID0gbyA+IDAuMDA4ODU2ID8gTWF0aC5wb3cobywgMSAvIDMpIDogNy43ODcgKiBvICsgMTYgLyAxMTYpLFxuICAgICAgICAgICAgICAociA9IHIgPiAwLjAwODg1NiA/IE1hdGgucG93KHIsIDEgLyAzKSA6IDcuNzg3ICogciArIDE2IC8gMTE2KSxcbiAgICAgICAgICAgICAgKGwgPSBsID4gMC4wMDg4NTYgPyBNYXRoLnBvdyhsLCAxIC8gMykgOiA3Ljc4NyAqIGwgKyAxNiAvIDExNiksXG4gICAgICAgICAgICAgIChlID0gMTE2ICogciAtIDE2KSxcbiAgICAgICAgICAgICAgKGEgPSA1MDAgKiAobyAtIHIpKSxcbiAgICAgICAgICAgICAgKGkgPSAyMDAgKiAociAtIGwpKSxcbiAgICAgICAgICAgICAgW2UsIGEsIGldXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBjKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBXKHUodCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBoKHQpIHtcbiAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICByID0gdFswXSAvIDM2MCxcbiAgICAgICAgICAgICAgbCA9IHRbMV0gLyAxMDAsXG4gICAgICAgICAgICAgIHMgPSB0WzJdIC8gMTAwO1xuICAgICAgICAgICAgaWYgKDAgPT0gbCkgcmV0dXJuIChvID0gMjU1ICogcyksIFtvLCBvLCBvXTtcbiAgICAgICAgICAgIChhID0gMC41ID4gcyA/IHMgKiAoMSArIGwpIDogcyArIGwgLSBzICogbCksXG4gICAgICAgICAgICAgIChlID0gMiAqIHMgLSBhKSxcbiAgICAgICAgICAgICAgKG4gPSBbMCwgMCwgMF0pO1xuICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IDMgPiBkOyBkKyspXG4gICAgICAgICAgICAgIChpID0gciArICgxIC8gMykgKiAtKGQgLSAxKSksXG4gICAgICAgICAgICAgICAgMCA+IGkgJiYgaSsrLFxuICAgICAgICAgICAgICAgIGkgPiAxICYmIGktLSxcbiAgICAgICAgICAgICAgICAobyA9XG4gICAgICAgICAgICAgICAgICAxID4gNiAqIGlcbiAgICAgICAgICAgICAgICAgICAgPyBlICsgNiAqIChhIC0gZSkgKiBpXG4gICAgICAgICAgICAgICAgICAgIDogMSA+IDIgKiBpXG4gICAgICAgICAgICAgICAgICAgID8gYVxuICAgICAgICAgICAgICAgICAgICA6IDIgPiAzICogaVxuICAgICAgICAgICAgICAgICAgICA/IGUgKyAoYSAtIGUpICogKDIgLyAzIC0gaSkgKiA2XG4gICAgICAgICAgICAgICAgICAgIDogZSksXG4gICAgICAgICAgICAgICAgKG5bZF0gPSAyNTUgKiBvKTtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBmKHQpIHtcbiAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBpID0gdFswXSxcbiAgICAgICAgICAgICAgbiA9IHRbMV0gLyAxMDAsXG4gICAgICAgICAgICAgIG8gPSB0WzJdIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIDAgPT09IG9cbiAgICAgICAgICAgICAgPyBbMCwgMCwgMF1cbiAgICAgICAgICAgICAgOiAoKG8gKj0gMiksXG4gICAgICAgICAgICAgICAgKG4gKj0gMSA+PSBvID8gbyA6IDIgLSBvKSxcbiAgICAgICAgICAgICAgICAoYSA9IChvICsgbikgLyAyKSxcbiAgICAgICAgICAgICAgICAoZSA9ICgyICogbikgLyAobyArIG4pKSxcbiAgICAgICAgICAgICAgICBbaSwgMTAwICogZSwgMTAwICogYV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBwKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBvKGgodCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBtKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBsKGgodCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB2KHQpIHtcbiAgICAgICAgICAgIHJldHVybiBzKGgodCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB4KHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdFswXSAvIDYwLFxuICAgICAgICAgICAgICBhID0gdFsxXSAvIDEwMCxcbiAgICAgICAgICAgICAgaSA9IHRbMl0gLyAxMDAsXG4gICAgICAgICAgICAgIG4gPSBNYXRoLmZsb29yKGUpICUgNixcbiAgICAgICAgICAgICAgbyA9IGUgLSBNYXRoLmZsb29yKGUpLFxuICAgICAgICAgICAgICByID0gMjU1ICogaSAqICgxIC0gYSksXG4gICAgICAgICAgICAgIGwgPSAyNTUgKiBpICogKDEgLSBhICogbyksXG4gICAgICAgICAgICAgIHMgPSAyNTUgKiBpICogKDEgLSBhICogKDEgLSBvKSksXG4gICAgICAgICAgICAgIGkgPSAyNTUgKiBpO1xuICAgICAgICAgICAgc3dpdGNoIChuKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gW2ksIHMsIHJdO1xuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtsLCBpLCByXTtcbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBbciwgaSwgc107XG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gW3IsIGwsIGldO1xuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtzLCByLCBpXTtcbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHJldHVybiBbaSwgciwgbF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHkodCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGkgPSB0WzBdLFxuICAgICAgICAgICAgICBuID0gdFsxXSAvIDEwMCxcbiAgICAgICAgICAgICAgbyA9IHRbMl0gLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAoYSA9ICgyIC0gbikgKiBvKSxcbiAgICAgICAgICAgICAgKGUgPSBuICogbyksXG4gICAgICAgICAgICAgIChlIC89IDEgPj0gYSA/IGEgOiAyIC0gYSksXG4gICAgICAgICAgICAgIChlID0gZSB8fCAwKSxcbiAgICAgICAgICAgICAgKGEgLz0gMiksXG4gICAgICAgICAgICAgIFtpLCAxMDAgKiBlLCAxMDAgKiBhXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gayh0KSB7XG4gICAgICAgICAgICByZXR1cm4gbyh4KHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gUyh0KSB7XG4gICAgICAgICAgICByZXR1cm4gbCh4KHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gdyh0KSB7XG4gICAgICAgICAgICByZXR1cm4gcyh4KHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gTSh0KSB7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgbyA9IHRbMF0gLyAzNjAsXG4gICAgICAgICAgICAgIGwgPSB0WzFdIC8gMTAwLFxuICAgICAgICAgICAgICBzID0gdFsyXSAvIDEwMCxcbiAgICAgICAgICAgICAgZCA9IGwgKyBzO1xuICAgICAgICAgICAgc3dpdGNoIChcbiAgICAgICAgICAgICAgKGQgPiAxICYmICgobCAvPSBkKSwgKHMgLz0gZCkpLFxuICAgICAgICAgICAgICAoZSA9IE1hdGguZmxvb3IoNiAqIG8pKSxcbiAgICAgICAgICAgICAgKGEgPSAxIC0gcyksXG4gICAgICAgICAgICAgIChpID0gNiAqIG8gLSBlKSxcbiAgICAgICAgICAgICAgMCAhPSAoMSAmIGUpICYmIChpID0gMSAtIGkpLFxuICAgICAgICAgICAgICAobiA9IGwgKyBpICogKGEgLSBsKSksXG4gICAgICAgICAgICAgIGUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgKHIgPSBhKSwgKGcgPSBuKSwgKGIgPSBsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIChyID0gbiksIChnID0gYSksIChiID0gbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAociA9IGwpLCAoZyA9IGEpLCAoYiA9IG4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgKHIgPSBsKSwgKGcgPSBuKSwgKGIgPSBhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIChyID0gbiksIChnID0gbCksIChiID0gYSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAociA9IGEpLCAoZyA9IGwpLCAoYiA9IG4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFsyNTUgKiByLCAyNTUgKiBnLCAyNTUgKiBiXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gQyh0KSB7XG4gICAgICAgICAgICByZXR1cm4gaShNKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gRCh0KSB7XG4gICAgICAgICAgICByZXR1cm4gbihNKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gSSh0KSB7XG4gICAgICAgICAgICByZXR1cm4gbChNKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gQSh0KSB7XG4gICAgICAgICAgICByZXR1cm4gcyhNKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gVCh0KSB7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgbiA9IHRbMF0gLyAxMDAsXG4gICAgICAgICAgICAgIG8gPSB0WzFdIC8gMTAwLFxuICAgICAgICAgICAgICByID0gdFsyXSAvIDEwMCxcbiAgICAgICAgICAgICAgbCA9IHRbM10gLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAoZSA9IDEgLSBNYXRoLm1pbigxLCBuICogKDEgLSBsKSArIGwpKSxcbiAgICAgICAgICAgICAgKGEgPSAxIC0gTWF0aC5taW4oMSwgbyAqICgxIC0gbCkgKyBsKSksXG4gICAgICAgICAgICAgIChpID0gMSAtIE1hdGgubWluKDEsIHIgKiAoMSAtIGwpICsgbCkpLFxuICAgICAgICAgICAgICBbMjU1ICogZSwgMjU1ICogYSwgMjU1ICogaV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIFAodCkge1xuICAgICAgICAgICAgcmV0dXJuIGkoVCh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEYodCkge1xuICAgICAgICAgICAgcmV0dXJuIG4oVCh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIF8odCkge1xuICAgICAgICAgICAgcmV0dXJuIG8oVCh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIFIodCkge1xuICAgICAgICAgICAgcmV0dXJuIHMoVCh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIFYodCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG4gPSB0WzBdIC8gMTAwLFxuICAgICAgICAgICAgICBvID0gdFsxXSAvIDEwMCxcbiAgICAgICAgICAgICAgciA9IHRbMl0gLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAoZSA9IDMuMjQwNiAqIG4gKyAtMS41MzcyICogbyArIHIgKiAtMC40OTg2KSxcbiAgICAgICAgICAgICAgKGEgPSBuICogLTAuOTY4OSArIDEuODc1OCAqIG8gKyAwLjA0MTUgKiByKSxcbiAgICAgICAgICAgICAgKGkgPSAwLjA1NTcgKiBuICsgbyAqIC0wLjIwNCArIDEuMDU3ICogciksXG4gICAgICAgICAgICAgIChlID1cbiAgICAgICAgICAgICAgICBlID4gMC4wMDMxMzA4XG4gICAgICAgICAgICAgICAgICA/IDEuMDU1ICogTWF0aC5wb3coZSwgMSAvIDIuNCkgLSAwLjA1NVxuICAgICAgICAgICAgICAgICAgOiAoZSA9IDEyLjkyICogZSkpLFxuICAgICAgICAgICAgICAoYSA9XG4gICAgICAgICAgICAgICAgYSA+IDAuMDAzMTMwOFxuICAgICAgICAgICAgICAgICAgPyAxLjA1NSAqIE1hdGgucG93KGEsIDEgLyAyLjQpIC0gMC4wNTVcbiAgICAgICAgICAgICAgICAgIDogKGEgPSAxMi45MiAqIGEpKSxcbiAgICAgICAgICAgICAgKGkgPVxuICAgICAgICAgICAgICAgIGkgPiAwLjAwMzEzMDhcbiAgICAgICAgICAgICAgICAgID8gMS4wNTUgKiBNYXRoLnBvdyhpLCAxIC8gMi40KSAtIDAuMDU1XG4gICAgICAgICAgICAgICAgICA6IChpID0gMTIuOTIgKiBpKSksXG4gICAgICAgICAgICAgIChlID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgZSksIDEpKSxcbiAgICAgICAgICAgICAgKGEgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBhKSwgMSkpLFxuICAgICAgICAgICAgICAoaSA9IE1hdGgubWluKE1hdGgubWF4KDAsIGkpLCAxKSksXG4gICAgICAgICAgICAgIFsyNTUgKiBlLCAyNTUgKiBhLCAyNTUgKiBpXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gTCh0KSB7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgbiA9IHRbMF0sXG4gICAgICAgICAgICAgIG8gPSB0WzFdLFxuICAgICAgICAgICAgICByID0gdFsyXTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIChuIC89IDk1LjA0NyksXG4gICAgICAgICAgICAgIChvIC89IDEwMCksXG4gICAgICAgICAgICAgIChyIC89IDEwOC44ODMpLFxuICAgICAgICAgICAgICAobiA9IG4gPiAwLjAwODg1NiA/IE1hdGgucG93KG4sIDEgLyAzKSA6IDcuNzg3ICogbiArIDE2IC8gMTE2KSxcbiAgICAgICAgICAgICAgKG8gPSBvID4gMC4wMDg4NTYgPyBNYXRoLnBvdyhvLCAxIC8gMykgOiA3Ljc4NyAqIG8gKyAxNiAvIDExNiksXG4gICAgICAgICAgICAgIChyID0gciA+IDAuMDA4ODU2ID8gTWF0aC5wb3cociwgMSAvIDMpIDogNy43ODcgKiByICsgMTYgLyAxMTYpLFxuICAgICAgICAgICAgICAoZSA9IDExNiAqIG8gLSAxNiksXG4gICAgICAgICAgICAgIChhID0gNTAwICogKG4gLSBvKSksXG4gICAgICAgICAgICAgIChpID0gMjAwICogKG8gLSByKSksXG4gICAgICAgICAgICAgIFtlLCBhLCBpXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gTyh0KSB7XG4gICAgICAgICAgICByZXR1cm4gVyhMKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gQih0KSB7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgbyA9IHRbMF0sXG4gICAgICAgICAgICAgIHIgPSB0WzFdLFxuICAgICAgICAgICAgICBsID0gdFsyXTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDggPj0gb1xuICAgICAgICAgICAgICAgID8gKChhID0gKDEwMCAqIG8pIC8gOTAzLjMpLCAobiA9IDcuNzg3ICogKGEgLyAxMDApICsgMTYgLyAxMTYpKVxuICAgICAgICAgICAgICAgIDogKChhID0gMTAwICogTWF0aC5wb3coKG8gKyAxNikgLyAxMTYsIDMpKSxcbiAgICAgICAgICAgICAgICAgIChuID0gTWF0aC5wb3coYSAvIDEwMCwgMSAvIDMpKSksXG4gICAgICAgICAgICAgIChlID1cbiAgICAgICAgICAgICAgICAwLjAwODg1NiA+PSBlIC8gOTUuMDQ3XG4gICAgICAgICAgICAgICAgICA/IChlID0gKDk1LjA0NyAqIChyIC8gNTAwICsgbiAtIDE2IC8gMTE2KSkgLyA3Ljc4NylcbiAgICAgICAgICAgICAgICAgIDogOTUuMDQ3ICogTWF0aC5wb3cociAvIDUwMCArIG4sIDMpKSxcbiAgICAgICAgICAgICAgKGkgPVxuICAgICAgICAgICAgICAgIDAuMDA4ODU5ID49IGkgLyAxMDguODgzXG4gICAgICAgICAgICAgICAgICA/IChpID0gKDEwOC44ODMgKiAobiAtIGwgLyAyMDAgLSAxNiAvIDExNikpIC8gNy43ODcpXG4gICAgICAgICAgICAgICAgICA6IDEwOC44ODMgKiBNYXRoLnBvdyhuIC0gbCAvIDIwMCwgMykpLFxuICAgICAgICAgICAgICBbZSwgYSwgaV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIFcodCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG4gPSB0WzBdLFxuICAgICAgICAgICAgICBvID0gdFsxXSxcbiAgICAgICAgICAgICAgciA9IHRbMl07XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAoZSA9IE1hdGguYXRhbjIociwgbykpLFxuICAgICAgICAgICAgICAoYSA9ICgzNjAgKiBlKSAvIDIgLyBNYXRoLlBJKSxcbiAgICAgICAgICAgICAgMCA+IGEgJiYgKGEgKz0gMzYwKSxcbiAgICAgICAgICAgICAgKGkgPSBNYXRoLnNxcnQobyAqIG8gKyByICogcikpLFxuICAgICAgICAgICAgICBbbiwgaSwgYV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHoodCkge1xuICAgICAgICAgICAgcmV0dXJuIFYoQih0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIE4odCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG4gPSB0WzBdLFxuICAgICAgICAgICAgICBvID0gdFsxXSxcbiAgICAgICAgICAgICAgciA9IHRbMl07XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAoaSA9IChyIC8gMzYwKSAqIDIgKiBNYXRoLlBJKSxcbiAgICAgICAgICAgICAgKGUgPSBvICogTWF0aC5jb3MoaSkpLFxuICAgICAgICAgICAgICAoYSA9IG8gKiBNYXRoLnNpbihpKSksXG4gICAgICAgICAgICAgIFtuLCBlLCBhXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gRSh0KSB7XG4gICAgICAgICAgICByZXR1cm4gQihOKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gSCh0KSB7XG4gICAgICAgICAgICByZXR1cm4geihOKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gVSh0KSB7XG4gICAgICAgICAgICByZXR1cm4gWlt0XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gaih0KSB7XG4gICAgICAgICAgICByZXR1cm4gaShVKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcSh0KSB7XG4gICAgICAgICAgICByZXR1cm4gbihVKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gWSh0KSB7XG4gICAgICAgICAgICByZXR1cm4gbyhVKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gWCh0KSB7XG4gICAgICAgICAgICByZXR1cm4gbChVKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gSyh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdShVKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gSih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZChVKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZS5leHBvcnRzID0ge1xuICAgICAgICAgICAgcmdiMmhzbDogaSxcbiAgICAgICAgICAgIHJnYjJoc3Y6IG4sXG4gICAgICAgICAgICByZ2IyaHdiOiBvLFxuICAgICAgICAgICAgcmdiMmNteWs6IGwsXG4gICAgICAgICAgICByZ2Iya2V5d29yZDogcyxcbiAgICAgICAgICAgIHJnYjJ4eXo6IGQsXG4gICAgICAgICAgICByZ2IybGFiOiB1LFxuICAgICAgICAgICAgcmdiMmxjaDogYyxcbiAgICAgICAgICAgIGhzbDJyZ2I6IGgsXG4gICAgICAgICAgICBoc2wyaHN2OiBmLFxuICAgICAgICAgICAgaHNsMmh3YjogcCxcbiAgICAgICAgICAgIGhzbDJjbXlrOiBtLFxuICAgICAgICAgICAgaHNsMmtleXdvcmQ6IHYsXG4gICAgICAgICAgICBoc3YycmdiOiB4LFxuICAgICAgICAgICAgaHN2MmhzbDogeSxcbiAgICAgICAgICAgIGhzdjJod2I6IGssXG4gICAgICAgICAgICBoc3YyY215azogUyxcbiAgICAgICAgICAgIGhzdjJrZXl3b3JkOiB3LFxuICAgICAgICAgICAgaHdiMnJnYjogTSxcbiAgICAgICAgICAgIGh3YjJoc2w6IEMsXG4gICAgICAgICAgICBod2IyaHN2OiBELFxuICAgICAgICAgICAgaHdiMmNteWs6IEksXG4gICAgICAgICAgICBod2Iya2V5d29yZDogQSxcbiAgICAgICAgICAgIGNteWsycmdiOiBULFxuICAgICAgICAgICAgY215azJoc2w6IFAsXG4gICAgICAgICAgICBjbXlrMmhzdjogRixcbiAgICAgICAgICAgIGNteWsyaHdiOiBfLFxuICAgICAgICAgICAgY215azJrZXl3b3JkOiBSLFxuICAgICAgICAgICAga2V5d29yZDJyZ2I6IFUsXG4gICAgICAgICAgICBrZXl3b3JkMmhzbDogaixcbiAgICAgICAgICAgIGtleXdvcmQyaHN2OiBxLFxuICAgICAgICAgICAga2V5d29yZDJod2I6IFksXG4gICAgICAgICAgICBrZXl3b3JkMmNteWs6IFgsXG4gICAgICAgICAgICBrZXl3b3JkMmxhYjogSyxcbiAgICAgICAgICAgIGtleXdvcmQyeHl6OiBKLFxuICAgICAgICAgICAgeHl6MnJnYjogVixcbiAgICAgICAgICAgIHh5ejJsYWI6IEwsXG4gICAgICAgICAgICB4eXoybGNoOiBPLFxuICAgICAgICAgICAgbGFiMnh5ejogQixcbiAgICAgICAgICAgIGxhYjJyZ2I6IHosXG4gICAgICAgICAgICBsYWIybGNoOiBXLFxuICAgICAgICAgICAgbGNoMmxhYjogTixcbiAgICAgICAgICAgIGxjaDJ4eXo6IEUsXG4gICAgICAgICAgICBsY2gycmdiOiBILFxuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIFogPSB7XG4gICAgICAgICAgICAgIGFsaWNlYmx1ZTogWzI0MCwgMjQ4LCAyNTVdLFxuICAgICAgICAgICAgICBhbnRpcXVld2hpdGU6IFsyNTAsIDIzNSwgMjE1XSxcbiAgICAgICAgICAgICAgYXF1YTogWzAsIDI1NSwgMjU1XSxcbiAgICAgICAgICAgICAgYXF1YW1hcmluZTogWzEyNywgMjU1LCAyMTJdLFxuICAgICAgICAgICAgICBhenVyZTogWzI0MCwgMjU1LCAyNTVdLFxuICAgICAgICAgICAgICBiZWlnZTogWzI0NSwgMjQ1LCAyMjBdLFxuICAgICAgICAgICAgICBiaXNxdWU6IFsyNTUsIDIyOCwgMTk2XSxcbiAgICAgICAgICAgICAgYmxhY2s6IFswLCAwLCAwXSxcbiAgICAgICAgICAgICAgYmxhbmNoZWRhbG1vbmQ6IFsyNTUsIDIzNSwgMjA1XSxcbiAgICAgICAgICAgICAgYmx1ZTogWzAsIDAsIDI1NV0sXG4gICAgICAgICAgICAgIGJsdWV2aW9sZXQ6IFsxMzgsIDQzLCAyMjZdLFxuICAgICAgICAgICAgICBicm93bjogWzE2NSwgNDIsIDQyXSxcbiAgICAgICAgICAgICAgYnVybHl3b29kOiBbMjIyLCAxODQsIDEzNV0sXG4gICAgICAgICAgICAgIGNhZGV0Ymx1ZTogWzk1LCAxNTgsIDE2MF0sXG4gICAgICAgICAgICAgIGNoYXJ0cmV1c2U6IFsxMjcsIDI1NSwgMF0sXG4gICAgICAgICAgICAgIGNob2NvbGF0ZTogWzIxMCwgMTA1LCAzMF0sXG4gICAgICAgICAgICAgIGNvcmFsOiBbMjU1LCAxMjcsIDgwXSxcbiAgICAgICAgICAgICAgY29ybmZsb3dlcmJsdWU6IFsxMDAsIDE0OSwgMjM3XSxcbiAgICAgICAgICAgICAgY29ybnNpbGs6IFsyNTUsIDI0OCwgMjIwXSxcbiAgICAgICAgICAgICAgY3JpbXNvbjogWzIyMCwgMjAsIDYwXSxcbiAgICAgICAgICAgICAgY3lhbjogWzAsIDI1NSwgMjU1XSxcbiAgICAgICAgICAgICAgZGFya2JsdWU6IFswLCAwLCAxMzldLFxuICAgICAgICAgICAgICBkYXJrY3lhbjogWzAsIDEzOSwgMTM5XSxcbiAgICAgICAgICAgICAgZGFya2dvbGRlbnJvZDogWzE4NCwgMTM0LCAxMV0sXG4gICAgICAgICAgICAgIGRhcmtncmF5OiBbMTY5LCAxNjksIDE2OV0sXG4gICAgICAgICAgICAgIGRhcmtncmVlbjogWzAsIDEwMCwgMF0sXG4gICAgICAgICAgICAgIGRhcmtncmV5OiBbMTY5LCAxNjksIDE2OV0sXG4gICAgICAgICAgICAgIGRhcmtraGFraTogWzE4OSwgMTgzLCAxMDddLFxuICAgICAgICAgICAgICBkYXJrbWFnZW50YTogWzEzOSwgMCwgMTM5XSxcbiAgICAgICAgICAgICAgZGFya29saXZlZ3JlZW46IFs4NSwgMTA3LCA0N10sXG4gICAgICAgICAgICAgIGRhcmtvcmFuZ2U6IFsyNTUsIDE0MCwgMF0sXG4gICAgICAgICAgICAgIGRhcmtvcmNoaWQ6IFsxNTMsIDUwLCAyMDRdLFxuICAgICAgICAgICAgICBkYXJrcmVkOiBbMTM5LCAwLCAwXSxcbiAgICAgICAgICAgICAgZGFya3NhbG1vbjogWzIzMywgMTUwLCAxMjJdLFxuICAgICAgICAgICAgICBkYXJrc2VhZ3JlZW46IFsxNDMsIDE4OCwgMTQzXSxcbiAgICAgICAgICAgICAgZGFya3NsYXRlYmx1ZTogWzcyLCA2MSwgMTM5XSxcbiAgICAgICAgICAgICAgZGFya3NsYXRlZ3JheTogWzQ3LCA3OSwgNzldLFxuICAgICAgICAgICAgICBkYXJrc2xhdGVncmV5OiBbNDcsIDc5LCA3OV0sXG4gICAgICAgICAgICAgIGRhcmt0dXJxdW9pc2U6IFswLCAyMDYsIDIwOV0sXG4gICAgICAgICAgICAgIGRhcmt2aW9sZXQ6IFsxNDgsIDAsIDIxMV0sXG4gICAgICAgICAgICAgIGRlZXBwaW5rOiBbMjU1LCAyMCwgMTQ3XSxcbiAgICAgICAgICAgICAgZGVlcHNreWJsdWU6IFswLCAxOTEsIDI1NV0sXG4gICAgICAgICAgICAgIGRpbWdyYXk6IFsxMDUsIDEwNSwgMTA1XSxcbiAgICAgICAgICAgICAgZGltZ3JleTogWzEwNSwgMTA1LCAxMDVdLFxuICAgICAgICAgICAgICBkb2RnZXJibHVlOiBbMzAsIDE0NCwgMjU1XSxcbiAgICAgICAgICAgICAgZmlyZWJyaWNrOiBbMTc4LCAzNCwgMzRdLFxuICAgICAgICAgICAgICBmbG9yYWx3aGl0ZTogWzI1NSwgMjUwLCAyNDBdLFxuICAgICAgICAgICAgICBmb3Jlc3RncmVlbjogWzM0LCAxMzksIDM0XSxcbiAgICAgICAgICAgICAgZnVjaHNpYTogWzI1NSwgMCwgMjU1XSxcbiAgICAgICAgICAgICAgZ2FpbnNib3JvOiBbMjIwLCAyMjAsIDIyMF0sXG4gICAgICAgICAgICAgIGdob3N0d2hpdGU6IFsyNDgsIDI0OCwgMjU1XSxcbiAgICAgICAgICAgICAgZ29sZDogWzI1NSwgMjE1LCAwXSxcbiAgICAgICAgICAgICAgZ29sZGVucm9kOiBbMjE4LCAxNjUsIDMyXSxcbiAgICAgICAgICAgICAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLFxuICAgICAgICAgICAgICBncmVlbjogWzAsIDEyOCwgMF0sXG4gICAgICAgICAgICAgIGdyZWVueWVsbG93OiBbMTczLCAyNTUsIDQ3XSxcbiAgICAgICAgICAgICAgZ3JleTogWzEyOCwgMTI4LCAxMjhdLFxuICAgICAgICAgICAgICBob25leWRldzogWzI0MCwgMjU1LCAyNDBdLFxuICAgICAgICAgICAgICBob3RwaW5rOiBbMjU1LCAxMDUsIDE4MF0sXG4gICAgICAgICAgICAgIGluZGlhbnJlZDogWzIwNSwgOTIsIDkyXSxcbiAgICAgICAgICAgICAgaW5kaWdvOiBbNzUsIDAsIDEzMF0sXG4gICAgICAgICAgICAgIGl2b3J5OiBbMjU1LCAyNTUsIDI0MF0sXG4gICAgICAgICAgICAgIGtoYWtpOiBbMjQwLCAyMzAsIDE0MF0sXG4gICAgICAgICAgICAgIGxhdmVuZGVyOiBbMjMwLCAyMzAsIDI1MF0sXG4gICAgICAgICAgICAgIGxhdmVuZGVyYmx1c2g6IFsyNTUsIDI0MCwgMjQ1XSxcbiAgICAgICAgICAgICAgbGF3bmdyZWVuOiBbMTI0LCAyNTIsIDBdLFxuICAgICAgICAgICAgICBsZW1vbmNoaWZmb246IFsyNTUsIDI1MCwgMjA1XSxcbiAgICAgICAgICAgICAgbGlnaHRibHVlOiBbMTczLCAyMTYsIDIzMF0sXG4gICAgICAgICAgICAgIGxpZ2h0Y29yYWw6IFsyNDAsIDEyOCwgMTI4XSxcbiAgICAgICAgICAgICAgbGlnaHRjeWFuOiBbMjI0LCAyNTUsIDI1NV0sXG4gICAgICAgICAgICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiBbMjUwLCAyNTAsIDIxMF0sXG4gICAgICAgICAgICAgIGxpZ2h0Z3JheTogWzIxMSwgMjExLCAyMTFdLFxuICAgICAgICAgICAgICBsaWdodGdyZWVuOiBbMTQ0LCAyMzgsIDE0NF0sXG4gICAgICAgICAgICAgIGxpZ2h0Z3JleTogWzIxMSwgMjExLCAyMTFdLFxuICAgICAgICAgICAgICBsaWdodHBpbms6IFsyNTUsIDE4MiwgMTkzXSxcbiAgICAgICAgICAgICAgbGlnaHRzYWxtb246IFsyNTUsIDE2MCwgMTIyXSxcbiAgICAgICAgICAgICAgbGlnaHRzZWFncmVlbjogWzMyLCAxNzgsIDE3MF0sXG4gICAgICAgICAgICAgIGxpZ2h0c2t5Ymx1ZTogWzEzNSwgMjA2LCAyNTBdLFxuICAgICAgICAgICAgICBsaWdodHNsYXRlZ3JheTogWzExOSwgMTM2LCAxNTNdLFxuICAgICAgICAgICAgICBsaWdodHNsYXRlZ3JleTogWzExOSwgMTM2LCAxNTNdLFxuICAgICAgICAgICAgICBsaWdodHN0ZWVsYmx1ZTogWzE3NiwgMTk2LCAyMjJdLFxuICAgICAgICAgICAgICBsaWdodHllbGxvdzogWzI1NSwgMjU1LCAyMjRdLFxuICAgICAgICAgICAgICBsaW1lOiBbMCwgMjU1LCAwXSxcbiAgICAgICAgICAgICAgbGltZWdyZWVuOiBbNTAsIDIwNSwgNTBdLFxuICAgICAgICAgICAgICBsaW5lbjogWzI1MCwgMjQwLCAyMzBdLFxuICAgICAgICAgICAgICBtYWdlbnRhOiBbMjU1LCAwLCAyNTVdLFxuICAgICAgICAgICAgICBtYXJvb246IFsxMjgsIDAsIDBdLFxuICAgICAgICAgICAgICBtZWRpdW1hcXVhbWFyaW5lOiBbMTAyLCAyMDUsIDE3MF0sXG4gICAgICAgICAgICAgIG1lZGl1bWJsdWU6IFswLCAwLCAyMDVdLFxuICAgICAgICAgICAgICBtZWRpdW1vcmNoaWQ6IFsxODYsIDg1LCAyMTFdLFxuICAgICAgICAgICAgICBtZWRpdW1wdXJwbGU6IFsxNDcsIDExMiwgMjE5XSxcbiAgICAgICAgICAgICAgbWVkaXVtc2VhZ3JlZW46IFs2MCwgMTc5LCAxMTNdLFxuICAgICAgICAgICAgICBtZWRpdW1zbGF0ZWJsdWU6IFsxMjMsIDEwNCwgMjM4XSxcbiAgICAgICAgICAgICAgbWVkaXVtc3ByaW5nZ3JlZW46IFswLCAyNTAsIDE1NF0sXG4gICAgICAgICAgICAgIG1lZGl1bXR1cnF1b2lzZTogWzcyLCAyMDksIDIwNF0sXG4gICAgICAgICAgICAgIG1lZGl1bXZpb2xldHJlZDogWzE5OSwgMjEsIDEzM10sXG4gICAgICAgICAgICAgIG1pZG5pZ2h0Ymx1ZTogWzI1LCAyNSwgMTEyXSxcbiAgICAgICAgICAgICAgbWludGNyZWFtOiBbMjQ1LCAyNTUsIDI1MF0sXG4gICAgICAgICAgICAgIG1pc3R5cm9zZTogWzI1NSwgMjI4LCAyMjVdLFxuICAgICAgICAgICAgICBtb2NjYXNpbjogWzI1NSwgMjI4LCAxODFdLFxuICAgICAgICAgICAgICBuYXZham93aGl0ZTogWzI1NSwgMjIyLCAxNzNdLFxuICAgICAgICAgICAgICBuYXZ5OiBbMCwgMCwgMTI4XSxcbiAgICAgICAgICAgICAgb2xkbGFjZTogWzI1MywgMjQ1LCAyMzBdLFxuICAgICAgICAgICAgICBvbGl2ZTogWzEyOCwgMTI4LCAwXSxcbiAgICAgICAgICAgICAgb2xpdmVkcmFiOiBbMTA3LCAxNDIsIDM1XSxcbiAgICAgICAgICAgICAgb3JhbmdlOiBbMjU1LCAxNjUsIDBdLFxuICAgICAgICAgICAgICBvcmFuZ2VyZWQ6IFsyNTUsIDY5LCAwXSxcbiAgICAgICAgICAgICAgb3JjaGlkOiBbMjE4LCAxMTIsIDIxNF0sXG4gICAgICAgICAgICAgIHBhbGVnb2xkZW5yb2Q6IFsyMzgsIDIzMiwgMTcwXSxcbiAgICAgICAgICAgICAgcGFsZWdyZWVuOiBbMTUyLCAyNTEsIDE1Ml0sXG4gICAgICAgICAgICAgIHBhbGV0dXJxdW9pc2U6IFsxNzUsIDIzOCwgMjM4XSxcbiAgICAgICAgICAgICAgcGFsZXZpb2xldHJlZDogWzIxOSwgMTEyLCAxNDddLFxuICAgICAgICAgICAgICBwYXBheWF3aGlwOiBbMjU1LCAyMzksIDIxM10sXG4gICAgICAgICAgICAgIHBlYWNocHVmZjogWzI1NSwgMjE4LCAxODVdLFxuICAgICAgICAgICAgICBwZXJ1OiBbMjA1LCAxMzMsIDYzXSxcbiAgICAgICAgICAgICAgcGluazogWzI1NSwgMTkyLCAyMDNdLFxuICAgICAgICAgICAgICBwbHVtOiBbMjIxLCAxNjAsIDIyMV0sXG4gICAgICAgICAgICAgIHBvd2RlcmJsdWU6IFsxNzYsIDIyNCwgMjMwXSxcbiAgICAgICAgICAgICAgcHVycGxlOiBbMTI4LCAwLCAxMjhdLFxuICAgICAgICAgICAgICByZWJlY2NhcHVycGxlOiBbMTAyLCA1MSwgMTUzXSxcbiAgICAgICAgICAgICAgcmVkOiBbMjU1LCAwLCAwXSxcbiAgICAgICAgICAgICAgcm9zeWJyb3duOiBbMTg4LCAxNDMsIDE0M10sXG4gICAgICAgICAgICAgIHJveWFsYmx1ZTogWzY1LCAxMDUsIDIyNV0sXG4gICAgICAgICAgICAgIHNhZGRsZWJyb3duOiBbMTM5LCA2OSwgMTldLFxuICAgICAgICAgICAgICBzYWxtb246IFsyNTAsIDEyOCwgMTE0XSxcbiAgICAgICAgICAgICAgc2FuZHlicm93bjogWzI0NCwgMTY0LCA5Nl0sXG4gICAgICAgICAgICAgIHNlYWdyZWVuOiBbNDYsIDEzOSwgODddLFxuICAgICAgICAgICAgICBzZWFzaGVsbDogWzI1NSwgMjQ1LCAyMzhdLFxuICAgICAgICAgICAgICBzaWVubmE6IFsxNjAsIDgyLCA0NV0sXG4gICAgICAgICAgICAgIHNpbHZlcjogWzE5MiwgMTkyLCAxOTJdLFxuICAgICAgICAgICAgICBza3libHVlOiBbMTM1LCAyMDYsIDIzNV0sXG4gICAgICAgICAgICAgIHNsYXRlYmx1ZTogWzEwNiwgOTAsIDIwNV0sXG4gICAgICAgICAgICAgIHNsYXRlZ3JheTogWzExMiwgMTI4LCAxNDRdLFxuICAgICAgICAgICAgICBzbGF0ZWdyZXk6IFsxMTIsIDEyOCwgMTQ0XSxcbiAgICAgICAgICAgICAgc25vdzogWzI1NSwgMjUwLCAyNTBdLFxuICAgICAgICAgICAgICBzcHJpbmdncmVlbjogWzAsIDI1NSwgMTI3XSxcbiAgICAgICAgICAgICAgc3RlZWxibHVlOiBbNzAsIDEzMCwgMTgwXSxcbiAgICAgICAgICAgICAgdGFuOiBbMjEwLCAxODAsIDE0MF0sXG4gICAgICAgICAgICAgIHRlYWw6IFswLCAxMjgsIDEyOF0sXG4gICAgICAgICAgICAgIHRoaXN0bGU6IFsyMTYsIDE5MSwgMjE2XSxcbiAgICAgICAgICAgICAgdG9tYXRvOiBbMjU1LCA5OSwgNzFdLFxuICAgICAgICAgICAgICB0dXJxdW9pc2U6IFs2NCwgMjI0LCAyMDhdLFxuICAgICAgICAgICAgICB2aW9sZXQ6IFsyMzgsIDEzMCwgMjM4XSxcbiAgICAgICAgICAgICAgd2hlYXQ6IFsyNDUsIDIyMiwgMTc5XSxcbiAgICAgICAgICAgICAgd2hpdGU6IFsyNTUsIDI1NSwgMjU1XSxcbiAgICAgICAgICAgICAgd2hpdGVzbW9rZTogWzI0NSwgMjQ1LCAyNDVdLFxuICAgICAgICAgICAgICB5ZWxsb3c6IFsyNTUsIDI1NSwgMF0sXG4gICAgICAgICAgICAgIHllbGxvd2dyZWVuOiBbMTU0LCAyMDUsIDUwXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBHID0ge307XG4gICAgICAgICAgZm9yICh2YXIgUSBpbiBaKSBHW0pTT04uc3RyaW5naWZ5KFpbUV0pXSA9IFE7XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDU6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICB2YXIgaSA9IHQoNCksXG4gICAgICAgICAgICBuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IGQoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgZm9yICh2YXIgbyBpbiBpKSB7XG4gICAgICAgICAgICBuW28gKyBcIlJhd1wiXSA9IChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgXCJudW1iZXJcIiA9PSB0eXBlb2YgZSAmJlxuICAgICAgICAgICAgICAgICAgICAoZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpLFxuICAgICAgICAgICAgICAgICAgaVt0XShlKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KShvKTtcbiAgICAgICAgICAgIHZhciByID0gLyhcXHcrKTIoXFx3KykvLmV4ZWMobyksXG4gICAgICAgICAgICAgIGwgPSByWzFdLFxuICAgICAgICAgICAgICBzID0gclsyXTtcbiAgICAgICAgICAgIChuW2xdID0gbltsXSB8fCB7fSksXG4gICAgICAgICAgICAgIChuW2xdW3NdID0gbltvXSA9XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgXCJudW1iZXJcIiA9PSB0eXBlb2YgZSAmJlxuICAgICAgICAgICAgICAgICAgICAgIChlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gaVt0XShlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGEgfHwgdm9pZCAwID09PSBhKSByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBhLmxlbmd0aDsgbisrKSBhW25dID0gTWF0aC5yb3VuZChhW25dKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pKG8pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnZzID0ge307XG4gICAgICAgICAgfTtcbiAgICAgICAgICAoZC5wcm90b3R5cGUucm91dGVTcGFjZSA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGVbMF07XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSBhXG4gICAgICAgICAgICAgID8gdGhpcy5nZXRWYWx1ZXModClcbiAgICAgICAgICAgICAgOiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYSAmJiAoYSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpKSxcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlcyh0LCBhKSk7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgICAoZC5wcm90b3R5cGUuc2V0VmFsdWVzID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAodGhpcy5zcGFjZSA9IHQpLCAodGhpcy5jb252cyA9IHt9KSwgKHRoaXMuY29udnNbdF0gPSBlKSwgdGhpc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAoZC5wcm90b3R5cGUuZ2V0VmFsdWVzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmNvbnZzW3RdO1xuICAgICAgICAgICAgICBpZiAoIWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMuc3BhY2UsXG4gICAgICAgICAgICAgICAgICBpID0gdGhpcy5jb252c1thXTtcbiAgICAgICAgICAgICAgICAoZSA9IG5bYV1bdF0oaSkpLCAodGhpcy5jb252c1t0XSA9IGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBbXCJyZ2JcIiwgXCJoc2xcIiwgXCJoc3ZcIiwgXCJjbXlrXCIsIFwia2V5d29yZFwiXS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIGQucHJvdG90eXBlW3RdID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yb3V0ZVNwYWNlKHQsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIChlLmV4cG9ydHMgPSBuKTtcbiAgICAgICAgfSxcbiAgICAgICAgeyA0OiA0IH0sXG4gICAgICBdLFxuICAgICAgNjogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIGUuZXhwb3J0cyA9IHtcbiAgICAgICAgICAgIGFsaWNlYmx1ZTogWzI0MCwgMjQ4LCAyNTVdLFxuICAgICAgICAgICAgYW50aXF1ZXdoaXRlOiBbMjUwLCAyMzUsIDIxNV0sXG4gICAgICAgICAgICBhcXVhOiBbMCwgMjU1LCAyNTVdLFxuICAgICAgICAgICAgYXF1YW1hcmluZTogWzEyNywgMjU1LCAyMTJdLFxuICAgICAgICAgICAgYXp1cmU6IFsyNDAsIDI1NSwgMjU1XSxcbiAgICAgICAgICAgIGJlaWdlOiBbMjQ1LCAyNDUsIDIyMF0sXG4gICAgICAgICAgICBiaXNxdWU6IFsyNTUsIDIyOCwgMTk2XSxcbiAgICAgICAgICAgIGJsYWNrOiBbMCwgMCwgMF0sXG4gICAgICAgICAgICBibGFuY2hlZGFsbW9uZDogWzI1NSwgMjM1LCAyMDVdLFxuICAgICAgICAgICAgYmx1ZTogWzAsIDAsIDI1NV0sXG4gICAgICAgICAgICBibHVldmlvbGV0OiBbMTM4LCA0MywgMjI2XSxcbiAgICAgICAgICAgIGJyb3duOiBbMTY1LCA0MiwgNDJdLFxuICAgICAgICAgICAgYnVybHl3b29kOiBbMjIyLCAxODQsIDEzNV0sXG4gICAgICAgICAgICBjYWRldGJsdWU6IFs5NSwgMTU4LCAxNjBdLFxuICAgICAgICAgICAgY2hhcnRyZXVzZTogWzEyNywgMjU1LCAwXSxcbiAgICAgICAgICAgIGNob2NvbGF0ZTogWzIxMCwgMTA1LCAzMF0sXG4gICAgICAgICAgICBjb3JhbDogWzI1NSwgMTI3LCA4MF0sXG4gICAgICAgICAgICBjb3JuZmxvd2VyYmx1ZTogWzEwMCwgMTQ5LCAyMzddLFxuICAgICAgICAgICAgY29ybnNpbGs6IFsyNTUsIDI0OCwgMjIwXSxcbiAgICAgICAgICAgIGNyaW1zb246IFsyMjAsIDIwLCA2MF0sXG4gICAgICAgICAgICBjeWFuOiBbMCwgMjU1LCAyNTVdLFxuICAgICAgICAgICAgZGFya2JsdWU6IFswLCAwLCAxMzldLFxuICAgICAgICAgICAgZGFya2N5YW46IFswLCAxMzksIDEzOV0sXG4gICAgICAgICAgICBkYXJrZ29sZGVucm9kOiBbMTg0LCAxMzQsIDExXSxcbiAgICAgICAgICAgIGRhcmtncmF5OiBbMTY5LCAxNjksIDE2OV0sXG4gICAgICAgICAgICBkYXJrZ3JlZW46IFswLCAxMDAsIDBdLFxuICAgICAgICAgICAgZGFya2dyZXk6IFsxNjksIDE2OSwgMTY5XSxcbiAgICAgICAgICAgIGRhcmtraGFraTogWzE4OSwgMTgzLCAxMDddLFxuICAgICAgICAgICAgZGFya21hZ2VudGE6IFsxMzksIDAsIDEzOV0sXG4gICAgICAgICAgICBkYXJrb2xpdmVncmVlbjogWzg1LCAxMDcsIDQ3XSxcbiAgICAgICAgICAgIGRhcmtvcmFuZ2U6IFsyNTUsIDE0MCwgMF0sXG4gICAgICAgICAgICBkYXJrb3JjaGlkOiBbMTUzLCA1MCwgMjA0XSxcbiAgICAgICAgICAgIGRhcmtyZWQ6IFsxMzksIDAsIDBdLFxuICAgICAgICAgICAgZGFya3NhbG1vbjogWzIzMywgMTUwLCAxMjJdLFxuICAgICAgICAgICAgZGFya3NlYWdyZWVuOiBbMTQzLCAxODgsIDE0M10sXG4gICAgICAgICAgICBkYXJrc2xhdGVibHVlOiBbNzIsIDYxLCAxMzldLFxuICAgICAgICAgICAgZGFya3NsYXRlZ3JheTogWzQ3LCA3OSwgNzldLFxuICAgICAgICAgICAgZGFya3NsYXRlZ3JleTogWzQ3LCA3OSwgNzldLFxuICAgICAgICAgICAgZGFya3R1cnF1b2lzZTogWzAsIDIwNiwgMjA5XSxcbiAgICAgICAgICAgIGRhcmt2aW9sZXQ6IFsxNDgsIDAsIDIxMV0sXG4gICAgICAgICAgICBkZWVwcGluazogWzI1NSwgMjAsIDE0N10sXG4gICAgICAgICAgICBkZWVwc2t5Ymx1ZTogWzAsIDE5MSwgMjU1XSxcbiAgICAgICAgICAgIGRpbWdyYXk6IFsxMDUsIDEwNSwgMTA1XSxcbiAgICAgICAgICAgIGRpbWdyZXk6IFsxMDUsIDEwNSwgMTA1XSxcbiAgICAgICAgICAgIGRvZGdlcmJsdWU6IFszMCwgMTQ0LCAyNTVdLFxuICAgICAgICAgICAgZmlyZWJyaWNrOiBbMTc4LCAzNCwgMzRdLFxuICAgICAgICAgICAgZmxvcmFsd2hpdGU6IFsyNTUsIDI1MCwgMjQwXSxcbiAgICAgICAgICAgIGZvcmVzdGdyZWVuOiBbMzQsIDEzOSwgMzRdLFxuICAgICAgICAgICAgZnVjaHNpYTogWzI1NSwgMCwgMjU1XSxcbiAgICAgICAgICAgIGdhaW5zYm9ybzogWzIyMCwgMjIwLCAyMjBdLFxuICAgICAgICAgICAgZ2hvc3R3aGl0ZTogWzI0OCwgMjQ4LCAyNTVdLFxuICAgICAgICAgICAgZ29sZDogWzI1NSwgMjE1LCAwXSxcbiAgICAgICAgICAgIGdvbGRlbnJvZDogWzIxOCwgMTY1LCAzMl0sXG4gICAgICAgICAgICBncmF5OiBbMTI4LCAxMjgsIDEyOF0sXG4gICAgICAgICAgICBncmVlbjogWzAsIDEyOCwgMF0sXG4gICAgICAgICAgICBncmVlbnllbGxvdzogWzE3MywgMjU1LCA0N10sXG4gICAgICAgICAgICBncmV5OiBbMTI4LCAxMjgsIDEyOF0sXG4gICAgICAgICAgICBob25leWRldzogWzI0MCwgMjU1LCAyNDBdLFxuICAgICAgICAgICAgaG90cGluazogWzI1NSwgMTA1LCAxODBdLFxuICAgICAgICAgICAgaW5kaWFucmVkOiBbMjA1LCA5MiwgOTJdLFxuICAgICAgICAgICAgaW5kaWdvOiBbNzUsIDAsIDEzMF0sXG4gICAgICAgICAgICBpdm9yeTogWzI1NSwgMjU1LCAyNDBdLFxuICAgICAgICAgICAga2hha2k6IFsyNDAsIDIzMCwgMTQwXSxcbiAgICAgICAgICAgIGxhdmVuZGVyOiBbMjMwLCAyMzAsIDI1MF0sXG4gICAgICAgICAgICBsYXZlbmRlcmJsdXNoOiBbMjU1LCAyNDAsIDI0NV0sXG4gICAgICAgICAgICBsYXduZ3JlZW46IFsxMjQsIDI1MiwgMF0sXG4gICAgICAgICAgICBsZW1vbmNoaWZmb246IFsyNTUsIDI1MCwgMjA1XSxcbiAgICAgICAgICAgIGxpZ2h0Ymx1ZTogWzE3MywgMjE2LCAyMzBdLFxuICAgICAgICAgICAgbGlnaHRjb3JhbDogWzI0MCwgMTI4LCAxMjhdLFxuICAgICAgICAgICAgbGlnaHRjeWFuOiBbMjI0LCAyNTUsIDI1NV0sXG4gICAgICAgICAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogWzI1MCwgMjUwLCAyMTBdLFxuICAgICAgICAgICAgbGlnaHRncmF5OiBbMjExLCAyMTEsIDIxMV0sXG4gICAgICAgICAgICBsaWdodGdyZWVuOiBbMTQ0LCAyMzgsIDE0NF0sXG4gICAgICAgICAgICBsaWdodGdyZXk6IFsyMTEsIDIxMSwgMjExXSxcbiAgICAgICAgICAgIGxpZ2h0cGluazogWzI1NSwgMTgyLCAxOTNdLFxuICAgICAgICAgICAgbGlnaHRzYWxtb246IFsyNTUsIDE2MCwgMTIyXSxcbiAgICAgICAgICAgIGxpZ2h0c2VhZ3JlZW46IFszMiwgMTc4LCAxNzBdLFxuICAgICAgICAgICAgbGlnaHRza3libHVlOiBbMTM1LCAyMDYsIDI1MF0sXG4gICAgICAgICAgICBsaWdodHNsYXRlZ3JheTogWzExOSwgMTM2LCAxNTNdLFxuICAgICAgICAgICAgbGlnaHRzbGF0ZWdyZXk6IFsxMTksIDEzNiwgMTUzXSxcbiAgICAgICAgICAgIGxpZ2h0c3RlZWxibHVlOiBbMTc2LCAxOTYsIDIyMl0sXG4gICAgICAgICAgICBsaWdodHllbGxvdzogWzI1NSwgMjU1LCAyMjRdLFxuICAgICAgICAgICAgbGltZTogWzAsIDI1NSwgMF0sXG4gICAgICAgICAgICBsaW1lZ3JlZW46IFs1MCwgMjA1LCA1MF0sXG4gICAgICAgICAgICBsaW5lbjogWzI1MCwgMjQwLCAyMzBdLFxuICAgICAgICAgICAgbWFnZW50YTogWzI1NSwgMCwgMjU1XSxcbiAgICAgICAgICAgIG1hcm9vbjogWzEyOCwgMCwgMF0sXG4gICAgICAgICAgICBtZWRpdW1hcXVhbWFyaW5lOiBbMTAyLCAyMDUsIDE3MF0sXG4gICAgICAgICAgICBtZWRpdW1ibHVlOiBbMCwgMCwgMjA1XSxcbiAgICAgICAgICAgIG1lZGl1bW9yY2hpZDogWzE4NiwgODUsIDIxMV0sXG4gICAgICAgICAgICBtZWRpdW1wdXJwbGU6IFsxNDcsIDExMiwgMjE5XSxcbiAgICAgICAgICAgIG1lZGl1bXNlYWdyZWVuOiBbNjAsIDE3OSwgMTEzXSxcbiAgICAgICAgICAgIG1lZGl1bXNsYXRlYmx1ZTogWzEyMywgMTA0LCAyMzhdLFxuICAgICAgICAgICAgbWVkaXVtc3ByaW5nZ3JlZW46IFswLCAyNTAsIDE1NF0sXG4gICAgICAgICAgICBtZWRpdW10dXJxdW9pc2U6IFs3MiwgMjA5LCAyMDRdLFxuICAgICAgICAgICAgbWVkaXVtdmlvbGV0cmVkOiBbMTk5LCAyMSwgMTMzXSxcbiAgICAgICAgICAgIG1pZG5pZ2h0Ymx1ZTogWzI1LCAyNSwgMTEyXSxcbiAgICAgICAgICAgIG1pbnRjcmVhbTogWzI0NSwgMjU1LCAyNTBdLFxuICAgICAgICAgICAgbWlzdHlyb3NlOiBbMjU1LCAyMjgsIDIyNV0sXG4gICAgICAgICAgICBtb2NjYXNpbjogWzI1NSwgMjI4LCAxODFdLFxuICAgICAgICAgICAgbmF2YWpvd2hpdGU6IFsyNTUsIDIyMiwgMTczXSxcbiAgICAgICAgICAgIG5hdnk6IFswLCAwLCAxMjhdLFxuICAgICAgICAgICAgb2xkbGFjZTogWzI1MywgMjQ1LCAyMzBdLFxuICAgICAgICAgICAgb2xpdmU6IFsxMjgsIDEyOCwgMF0sXG4gICAgICAgICAgICBvbGl2ZWRyYWI6IFsxMDcsIDE0MiwgMzVdLFxuICAgICAgICAgICAgb3JhbmdlOiBbMjU1LCAxNjUsIDBdLFxuICAgICAgICAgICAgb3JhbmdlcmVkOiBbMjU1LCA2OSwgMF0sXG4gICAgICAgICAgICBvcmNoaWQ6IFsyMTgsIDExMiwgMjE0XSxcbiAgICAgICAgICAgIHBhbGVnb2xkZW5yb2Q6IFsyMzgsIDIzMiwgMTcwXSxcbiAgICAgICAgICAgIHBhbGVncmVlbjogWzE1MiwgMjUxLCAxNTJdLFxuICAgICAgICAgICAgcGFsZXR1cnF1b2lzZTogWzE3NSwgMjM4LCAyMzhdLFxuICAgICAgICAgICAgcGFsZXZpb2xldHJlZDogWzIxOSwgMTEyLCAxNDddLFxuICAgICAgICAgICAgcGFwYXlhd2hpcDogWzI1NSwgMjM5LCAyMTNdLFxuICAgICAgICAgICAgcGVhY2hwdWZmOiBbMjU1LCAyMTgsIDE4NV0sXG4gICAgICAgICAgICBwZXJ1OiBbMjA1LCAxMzMsIDYzXSxcbiAgICAgICAgICAgIHBpbms6IFsyNTUsIDE5MiwgMjAzXSxcbiAgICAgICAgICAgIHBsdW06IFsyMjEsIDE2MCwgMjIxXSxcbiAgICAgICAgICAgIHBvd2RlcmJsdWU6IFsxNzYsIDIyNCwgMjMwXSxcbiAgICAgICAgICAgIHB1cnBsZTogWzEyOCwgMCwgMTI4XSxcbiAgICAgICAgICAgIHJlYmVjY2FwdXJwbGU6IFsxMDIsIDUxLCAxNTNdLFxuICAgICAgICAgICAgcmVkOiBbMjU1LCAwLCAwXSxcbiAgICAgICAgICAgIHJvc3licm93bjogWzE4OCwgMTQzLCAxNDNdLFxuICAgICAgICAgICAgcm95YWxibHVlOiBbNjUsIDEwNSwgMjI1XSxcbiAgICAgICAgICAgIHNhZGRsZWJyb3duOiBbMTM5LCA2OSwgMTldLFxuICAgICAgICAgICAgc2FsbW9uOiBbMjUwLCAxMjgsIDExNF0sXG4gICAgICAgICAgICBzYW5keWJyb3duOiBbMjQ0LCAxNjQsIDk2XSxcbiAgICAgICAgICAgIHNlYWdyZWVuOiBbNDYsIDEzOSwgODddLFxuICAgICAgICAgICAgc2Vhc2hlbGw6IFsyNTUsIDI0NSwgMjM4XSxcbiAgICAgICAgICAgIHNpZW5uYTogWzE2MCwgODIsIDQ1XSxcbiAgICAgICAgICAgIHNpbHZlcjogWzE5MiwgMTkyLCAxOTJdLFxuICAgICAgICAgICAgc2t5Ymx1ZTogWzEzNSwgMjA2LCAyMzVdLFxuICAgICAgICAgICAgc2xhdGVibHVlOiBbMTA2LCA5MCwgMjA1XSxcbiAgICAgICAgICAgIHNsYXRlZ3JheTogWzExMiwgMTI4LCAxNDRdLFxuICAgICAgICAgICAgc2xhdGVncmV5OiBbMTEyLCAxMjgsIDE0NF0sXG4gICAgICAgICAgICBzbm93OiBbMjU1LCAyNTAsIDI1MF0sXG4gICAgICAgICAgICBzcHJpbmdncmVlbjogWzAsIDI1NSwgMTI3XSxcbiAgICAgICAgICAgIHN0ZWVsYmx1ZTogWzcwLCAxMzAsIDE4MF0sXG4gICAgICAgICAgICB0YW46IFsyMTAsIDE4MCwgMTQwXSxcbiAgICAgICAgICAgIHRlYWw6IFswLCAxMjgsIDEyOF0sXG4gICAgICAgICAgICB0aGlzdGxlOiBbMjE2LCAxOTEsIDIxNl0sXG4gICAgICAgICAgICB0b21hdG86IFsyNTUsIDk5LCA3MV0sXG4gICAgICAgICAgICB0dXJxdW9pc2U6IFs2NCwgMjI0LCAyMDhdLFxuICAgICAgICAgICAgdmlvbGV0OiBbMjM4LCAxMzAsIDIzOF0sXG4gICAgICAgICAgICB3aGVhdDogWzI0NSwgMjIyLCAxNzldLFxuICAgICAgICAgICAgd2hpdGU6IFsyNTUsIDI1NSwgMjU1XSxcbiAgICAgICAgICAgIHdoaXRlc21va2U6IFsyNDUsIDI0NSwgMjQ1XSxcbiAgICAgICAgICAgIHllbGxvdzogWzI1NSwgMjU1LCAwXSxcbiAgICAgICAgICAgIHllbGxvd2dyZWVuOiBbMTU0LCAyMDUsIDUwXSxcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICA3OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgdmFyIGkgPSB0KDI4KSgpO1xuICAgICAgICAgIHQoMjYpKGkpLFxuICAgICAgICAgICAgdCgyMikoaSksXG4gICAgICAgICAgICB0KDI1KShpKSxcbiAgICAgICAgICAgIHQoMjEpKGkpLFxuICAgICAgICAgICAgdCgyMykoaSksXG4gICAgICAgICAgICB0KDI0KShpKSxcbiAgICAgICAgICAgIHQoMjkpKGkpLFxuICAgICAgICAgICAgdCgzMykoaSksXG4gICAgICAgICAgICB0KDMxKShpKSxcbiAgICAgICAgICAgIHQoMzQpKGkpLFxuICAgICAgICAgICAgdCgzMikoaSksXG4gICAgICAgICAgICB0KDM1KShpKSxcbiAgICAgICAgICAgIHQoMzApKGkpLFxuICAgICAgICAgICAgdCgyNykoaSksXG4gICAgICAgICAgICB0KDM2KShpKSxcbiAgICAgICAgICAgIHQoMzcpKGkpLFxuICAgICAgICAgICAgdCgzOCkoaSksXG4gICAgICAgICAgICB0KDM5KShpKSxcbiAgICAgICAgICAgIHQoNDApKGkpLFxuICAgICAgICAgICAgdCg0MykoaSksXG4gICAgICAgICAgICB0KDQxKShpKSxcbiAgICAgICAgICAgIHQoNDIpKGkpLFxuICAgICAgICAgICAgdCg0NCkoaSksXG4gICAgICAgICAgICB0KDQ1KShpKSxcbiAgICAgICAgICAgIHQoNDYpKGkpLFxuICAgICAgICAgICAgdCgxNSkoaSksXG4gICAgICAgICAgICB0KDE2KShpKSxcbiAgICAgICAgICAgIHQoMTcpKGkpLFxuICAgICAgICAgICAgdCgxOCkoaSksXG4gICAgICAgICAgICB0KDE5KShpKSxcbiAgICAgICAgICAgIHQoMjApKGkpLFxuICAgICAgICAgICAgdCg4KShpKSxcbiAgICAgICAgICAgIHQoOSkoaSksXG4gICAgICAgICAgICB0KDEwKShpKSxcbiAgICAgICAgICAgIHQoMTEpKGkpLFxuICAgICAgICAgICAgdCgxMikoaSksXG4gICAgICAgICAgICB0KDEzKShpKSxcbiAgICAgICAgICAgIHQoMTQpKGkpLFxuICAgICAgICAgICAgKHdpbmRvdy5DaGFydCA9IGUuZXhwb3J0cyA9IGkpO1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgMTA6IDEwLFxuICAgICAgICAgIDExOiAxMSxcbiAgICAgICAgICAxMjogMTIsXG4gICAgICAgICAgMTM6IDEzLFxuICAgICAgICAgIDE0OiAxNCxcbiAgICAgICAgICAxNTogMTUsXG4gICAgICAgICAgMTY6IDE2LFxuICAgICAgICAgIDE3OiAxNyxcbiAgICAgICAgICAxODogMTgsXG4gICAgICAgICAgMTk6IDE5LFxuICAgICAgICAgIDIwOiAyMCxcbiAgICAgICAgICAyMTogMjEsXG4gICAgICAgICAgMjI6IDIyLFxuICAgICAgICAgIDIzOiAyMyxcbiAgICAgICAgICAyNDogMjQsXG4gICAgICAgICAgMjU6IDI1LFxuICAgICAgICAgIDI2OiAyNixcbiAgICAgICAgICAyNzogMjcsXG4gICAgICAgICAgMjg6IDI4LFxuICAgICAgICAgIDI5OiAyOSxcbiAgICAgICAgICAzMDogMzAsXG4gICAgICAgICAgMzE6IDMxLFxuICAgICAgICAgIDMyOiAzMixcbiAgICAgICAgICAzMzogMzMsXG4gICAgICAgICAgMzQ6IDM0LFxuICAgICAgICAgIDM1OiAzNSxcbiAgICAgICAgICAzNjogMzYsXG4gICAgICAgICAgMzc6IDM3LFxuICAgICAgICAgIDM4OiAzOCxcbiAgICAgICAgICAzOTogMzksXG4gICAgICAgICAgNDA6IDQwLFxuICAgICAgICAgIDQxOiA0MSxcbiAgICAgICAgICA0MjogNDIsXG4gICAgICAgICAgNDM6IDQzLFxuICAgICAgICAgIDQ0OiA0NCxcbiAgICAgICAgICA0NTogNDUsXG4gICAgICAgICAgNDY6IDQ2LFxuICAgICAgICAgIDg6IDgsXG4gICAgICAgICAgOTogOSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICA4OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHQuQmFyID0gZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChhLnR5cGUgPSBcImJhclwiKSwgbmV3IHQoZSwgYSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDk6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdC5CdWJibGUgPSBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICByZXR1cm4gKGEudHlwZSA9IFwiYnViYmxlXCIpLCBuZXcgdChlLCBhKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMTA6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdC5Eb3VnaG51dCA9IGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgIHJldHVybiAoYS50eXBlID0gXCJkb3VnaG51dFwiKSwgbmV3IHQoZSwgYSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDExOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHQuTGluZSA9IGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgIHJldHVybiAoYS50eXBlID0gXCJsaW5lXCIpLCBuZXcgdChlLCBhKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMTI6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdC5Qb2xhckFyZWEgPSBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICByZXR1cm4gKGEudHlwZSA9IFwicG9sYXJBcmVhXCIpLCBuZXcgdChlLCBhKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMTM6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdC5SYWRhciA9IGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgIHJldHVybiAoYS50eXBlID0gXCJyYWRhclwiKSwgbmV3IHQoZSwgYSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDE0OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0ge1xuICAgICAgICAgICAgICBob3ZlcjogeyBtb2RlOiBcInNpbmdsZVwiIH0sXG4gICAgICAgICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgICAgIHhBeGVzOiBbeyB0eXBlOiBcImxpbmVhclwiLCBwb3NpdGlvbjogXCJib3R0b21cIiwgaWQ6IFwieC1heGlzLTFcIiB9XSxcbiAgICAgICAgICAgICAgICB5QXhlczogW3sgdHlwZTogXCJsaW5lYXJcIiwgcG9zaXRpb246IFwibGVmdFwiLCBpZDogXCJ5LWF4aXMtMVwiIH1dLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB0b29sdGlwczoge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICAgICAgICAgICAgdGl0bGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgbGFiZWw6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIihcIiArIHQueExhYmVsICsgXCIsIFwiICsgdC55TGFiZWwgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAodC5kZWZhdWx0cy5zY2F0dGVyID0gZSksXG4gICAgICAgICAgICAgICh0LmNvbnRyb2xsZXJzLnNjYXR0ZXIgPSB0LmNvbnRyb2xsZXJzLmxpbmUpLFxuICAgICAgICAgICAgICAodC5TY2F0dGVyID0gZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGEudHlwZSA9IFwic2NhdHRlclwiKSwgbmV3IHQoZSwgYSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDE1OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzO1xuICAgICAgICAgICAgKHQuZGVmYXVsdHMuYmFyID0ge1xuICAgICAgICAgICAgICBob3ZlcjogeyBtb2RlOiBcImxhYmVsXCIgfSxcbiAgICAgICAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICAgICAgeEF4ZXM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjYXRlZ29yeVwiLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeVBlcmNlbnRhZ2U6IDAuOCxcbiAgICAgICAgICAgICAgICAgICAgYmFyUGVyY2VudGFnZTogMC45LFxuICAgICAgICAgICAgICAgICAgICBncmlkTGluZXM6IHsgb2Zmc2V0R3JpZExpbmVzOiAhMCB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHlBeGVzOiBbeyB0eXBlOiBcImxpbmVhclwiIH1dLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICh0LmNvbnRyb2xsZXJzLmJhciA9IHQuRGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBkYXRhRWxlbWVudFR5cGU6IHQuZWxlbWVudHMuUmVjdGFuZ2xlLFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgICAgICB0LkRhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5pbml0aWFsaXplLmNhbGwodGhpcywgZSwgYSksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmdldE1ldGEoKS5iYXIgPSAhMCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRCYXJDb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhID0gMDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChcbiAgICAgICAgICAgICAgICAgICAgICB0LmNoYXJ0LmRhdGEuZGF0YXNldHMsXG4gICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdC5jaGFydC5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uYmFyICYmIHQuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSAmJiArK2E7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGFcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICBlLmVhY2goXG4gICAgICAgICAgICAgICAgICAgIGEuZ2V0TWV0YSgpLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYS51cGRhdGVFbGVtZW50KGUsIGksIHQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlRWxlbWVudDogZnVuY3Rpb24gKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbyA9IG4uZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICByID0gbi5nZXRTY2FsZUZvcklkKG8ueEF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIGwgPSBuLmdldFNjYWxlRm9ySWQoby55QXhpc0lEKSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IGwuZ2V0QmFzZVBpeGVsKCksXG4gICAgICAgICAgICAgICAgICAgIGQgPSBuLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucmVjdGFuZ2xlLFxuICAgICAgICAgICAgICAgICAgICB1ID0gdC5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIGMgPSBuLmdldERhdGFzZXQoKTtcbiAgICAgICAgICAgICAgICAgICh0Ll94U2NhbGUgPSByKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuX3lTY2FsZSA9IGwpLFxuICAgICAgICAgICAgICAgICAgICAodC5fZGF0YXNldEluZGV4ID0gbi5pbmRleCksXG4gICAgICAgICAgICAgICAgICAgICh0Ll9pbmRleCA9IGEpO1xuICAgICAgICAgICAgICAgICAgdmFyIGggPSBuLmdldFJ1bGVyKGEpO1xuICAgICAgICAgICAgICAgICAgKHQuX21vZGVsID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiBuLmNhbGN1bGF0ZUJhclgoYSwgbi5pbmRleCwgaCksXG4gICAgICAgICAgICAgICAgICAgIHk6IGkgPyBzIDogbi5jYWxjdWxhdGVCYXJZKGEsIG4uaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogbi5jaGFydC5kYXRhLmxhYmVsc1thXSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YXNldExhYmVsOiBjLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICBiYXNlOiBpID8gcyA6IG4uY2FsY3VsYXRlQmFyQmFzZShuLmluZGV4LCBhKSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG4uY2FsY3VsYXRlQmFyV2lkdGgoaCksXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdS5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA/IHUuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJTa2lwcGVkOiB1LmJvcmRlclNraXBwZWRcbiAgICAgICAgICAgICAgICAgICAgICA/IHUuYm9yZGVyU2tpcHBlZFxuICAgICAgICAgICAgICAgICAgICAgIDogZC5ib3JkZXJTa2lwcGVkLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogdS5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgID8gdS5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGMuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQuYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiB1LmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgPyB1LmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYy5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZC5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB0LnBpdm90KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVCYXJCYXNlOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gYS5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIG4gPSBhLmdldFNjYWxlRm9ySWQoaS55QXhpc0lEKSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IDA7XG4gICAgICAgICAgICAgICAgICBpZiAobi5vcHRpb25zLnN0YWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGEuY2hhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gci5kYXRhLmRhdGFzZXRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IE51bWJlcihsW3RdLmRhdGFbZV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgdCA+IGQ7XG4gICAgICAgICAgICAgICAgICAgICAgZCsrXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gbFtkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSByLmdldERhdGFzZXRNZXRhKGQpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuYmFyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjLnlBeGlzSUQgPT09IG4uaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuaXNEYXRhc2V0VmlzaWJsZShkKVxuICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBOdW1iZXIodS5kYXRhW2VdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gKz0gMCA+IHMgPyBNYXRoLm1pbihoLCAwKSA6IE1hdGgubWF4KGgsIDApO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5nZXRQaXhlbEZvclZhbHVlKG8pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uZ2V0QmFzZVBpeGVsKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRSdWxlcjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBuID0gYS5nZXRTY2FsZUZvcklkKGkueEF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIG8gPSBhLmdldEJhckNvdW50KCk7XG4gICAgICAgICAgICAgICAgICBlID1cbiAgICAgICAgICAgICAgICAgICAgXCJjYXRlZ29yeVwiID09PSBuLm9wdGlvbnMudHlwZVxuICAgICAgICAgICAgICAgICAgICAgID8gbi5nZXRQaXhlbEZvclRpY2sodCArIDEpIC0gbi5nZXRQaXhlbEZvclRpY2sodClcbiAgICAgICAgICAgICAgICAgICAgICA6IG4ud2lkdGggLyBuLnRpY2tzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgIHZhciByID0gZSAqIG4ub3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGwgPSAoZSAtIGUgKiBuLm9wdGlvbnMuY2F0ZWdvcnlQZXJjZW50YWdlKSAvIDIsXG4gICAgICAgICAgICAgICAgICAgIHMgPSByIC8gbztcbiAgICAgICAgICAgICAgICAgIGlmIChuLnRpY2tzLmxlbmd0aCAhPT0gYS5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBuLnRpY2tzLmxlbmd0aCAvIGEuY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBzICo9IGQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgdSA9IHMgKiBuLm9wdGlvbnMuYmFyUGVyY2VudGFnZSxcbiAgICAgICAgICAgICAgICAgICAgYyA9IHMgLSBzICogbi5vcHRpb25zLmJhclBlcmNlbnRhZ2U7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0Q291bnQ6IG8sXG4gICAgICAgICAgICAgICAgICAgIHRpY2tXaWR0aDogZSxcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlXaWR0aDogcixcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlTcGFjaW5nOiBsLFxuICAgICAgICAgICAgICAgICAgICBmdWxsQmFyV2lkdGg6IHMsXG4gICAgICAgICAgICAgICAgICAgIGJhcldpZHRoOiB1LFxuICAgICAgICAgICAgICAgICAgICBiYXJTcGFjaW5nOiBjLFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZUJhcldpZHRoOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmdldFNjYWxlRm9ySWQodGhpcy5nZXRNZXRhKCkueEF4aXNJRCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZS5vcHRpb25zLmJhclRoaWNrbmVzc1xuICAgICAgICAgICAgICAgICAgICA/IGUub3B0aW9ucy5iYXJUaGlja25lc3NcbiAgICAgICAgICAgICAgICAgICAgOiBlLm9wdGlvbnMuc3RhY2tlZFxuICAgICAgICAgICAgICAgICAgICA/IHQuY2F0ZWdvcnlXaWR0aFxuICAgICAgICAgICAgICAgICAgICA6IHQuYmFyV2lkdGg7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRCYXJJbmRleDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICAgIGZvciAoYSA9IDA7IHQgPiBhOyArK2EpXG4gICAgICAgICAgICAgICAgICAgIChlID0gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YShhKSksXG4gICAgICAgICAgICAgICAgICAgICAgZS5iYXIgJiYgdGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGEpICYmICsraTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlQmFyWDogZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBvID0gaS5nZXRTY2FsZUZvcklkKG4ueEF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIHIgPSBpLmdldEJhckluZGV4KGUpLFxuICAgICAgICAgICAgICAgICAgICBsID0gby5nZXRQaXhlbEZvclZhbHVlKG51bGwsIHQsIGUsIGkuY2hhcnQuaXNDb21ibyk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAobCAtPSBpLmNoYXJ0LmlzQ29tYm8gPyBhLnRpY2tXaWR0aCAvIDIgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgby5vcHRpb25zLnN0YWNrZWRcbiAgICAgICAgICAgICAgICAgICAgICA/IGwgKyBhLmNhdGVnb3J5V2lkdGggLyAyICsgYS5jYXRlZ29yeVNwYWNpbmdcbiAgICAgICAgICAgICAgICAgICAgICA6IGwgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5iYXJXaWR0aCAvIDIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5jYXRlZ29yeVNwYWNpbmcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5iYXJXaWR0aCAqIHIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5iYXJTcGFjaW5nIC8gMiArXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmJhclNwYWNpbmcgKiByXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlQmFyWTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBuID0gYS5nZXRTY2FsZUZvcklkKGkueUF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIG8gPSBOdW1iZXIoYS5nZXREYXRhc2V0KCkuZGF0YVt0XSk7XG4gICAgICAgICAgICAgICAgICBpZiAobi5vcHRpb25zLnN0YWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDAsIGwgPSAwLCBzID0gMDsgZSA+IHM7IHMrKykge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gYS5jaGFydC5kYXRhLmRhdGFzZXRzW3NdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdSA9IGEuY2hhcnQuZ2V0RGF0YXNldE1ldGEocyk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdS5iYXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHUueUF4aXNJRCA9PT0gbi5pZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgYS5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKHMpXG4gICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IE51bWJlcihkLmRhdGFbdF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgMCA+IGMgPyAobCArPSBjIHx8IDApIDogKHIgKz0gYyB8fCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgPiBvXG4gICAgICAgICAgICAgICAgICAgICAgPyBuLmdldFBpeGVsRm9yVmFsdWUobCArIG8pXG4gICAgICAgICAgICAgICAgICAgICAgOiBuLmdldFBpeGVsRm9yVmFsdWUociArIG8pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uZ2V0UGl4ZWxGb3JWYWx1ZShvKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0IHx8IDEsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBpLmdldE1ldGEoKS5kYXRhLFxuICAgICAgICAgICAgICAgICAgICByID0gaS5nZXREYXRhc2V0KCk7XG4gICAgICAgICAgICAgICAgICBmb3IgKGUgPSAwLCBhID0gby5sZW5ndGg7IGEgPiBlOyArK2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSByLmRhdGFbZV07XG4gICAgICAgICAgICAgICAgICAgIG51bGwgPT09IGwgfHxcbiAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IGwgfHxcbiAgICAgICAgICAgICAgICAgICAgICBpc05hTihsKSB8fFxuICAgICAgICAgICAgICAgICAgICAgIG9bZV0udHJhbnNpdGlvbihuKS5kcmF3KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXRIb3ZlclN0eWxlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdC5fZGF0YXNldEluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQuX2luZGV4LFxuICAgICAgICAgICAgICAgICAgICBuID0gdC5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0Ll9tb2RlbDtcbiAgICAgICAgICAgICAgICAgIChvLmJhY2tncm91bmRDb2xvciA9IG4uaG92ZXJCYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgPyBuLmhvdmVyQmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmhvdmVyQmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZ2V0SG92ZXJDb2xvcihvLmJhY2tncm91bmRDb2xvcilcbiAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uYm9yZGVyQ29sb3IgPSBuLmhvdmVyQm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA/IG4uaG92ZXJCb3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEuaG92ZXJCb3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZS5nZXRIb3ZlckNvbG9yKG8uYm9yZGVyQ29sb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uYm9yZGVyV2lkdGggPSBuLmhvdmVyQm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICA/IG4uaG92ZXJCb3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEuaG92ZXJCb3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgby5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVIb3ZlclN0eWxlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdC5fZGF0YXNldEluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQuX2luZGV4LFxuICAgICAgICAgICAgICAgICAgICBuID0gdC5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0Ll9tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5yZWN0YW5nbGU7XG4gICAgICAgICAgICAgICAgICAoby5iYWNrZ3JvdW5kQ29sb3IgPSBuLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICA/IG4uYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICByLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAoby5ib3JkZXJDb2xvciA9IG4uYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA/IG4uYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uYm9yZGVyV2lkdGggPSBuLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgPyBuLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgci5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAodC5kZWZhdWx0cy5ob3Jpem9udGFsQmFyID0ge1xuICAgICAgICAgICAgICAgIGhvdmVyOiB7IG1vZGU6IFwibGFiZWxcIiB9LFxuICAgICAgICAgICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgICAgICAgeEF4ZXM6IFt7IHR5cGU6IFwibGluZWFyXCIsIHBvc2l0aW9uOiBcImJvdHRvbVwiIH1dLFxuICAgICAgICAgICAgICAgICAgeUF4ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcImxlZnRcIixcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNhdGVnb3J5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlQZXJjZW50YWdlOiAwLjgsXG4gICAgICAgICAgICAgICAgICAgICAgYmFyUGVyY2VudGFnZTogMC45LFxuICAgICAgICAgICAgICAgICAgICAgIGdyaWRMaW5lczogeyBvZmZzZXRHcmlkTGluZXM6ICEwIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZWxlbWVudHM6IHsgcmVjdGFuZ2xlOiB7IGJvcmRlclNraXBwZWQ6IFwibGVmdFwiIH0gfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwczoge1xuICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0WzBdLnlMYWJlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGEgPSB0WzBdLnlMYWJlbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUubGFiZWxzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRbMF0uaW5kZXggPCBlLmxhYmVscy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhID0gZS5sYWJlbHNbdFswXS5pbmRleF0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGUuZGF0YXNldHNbdC5kYXRhc2V0SW5kZXhdLmxhYmVsIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgKyBcIjogXCIgKyB0LnhMYWJlbDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICh0LmNvbnRyb2xsZXJzLmhvcml6b250YWxCYXIgPSB0LmNvbnRyb2xsZXJzLmJhci5leHRlbmQoe1xuICAgICAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnQ6IGZ1bmN0aW9uICh0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBuLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgciA9IG4uZ2V0U2NhbGVGb3JJZChvLnhBeGlzSUQpLFxuICAgICAgICAgICAgICAgICAgICBsID0gbi5nZXRTY2FsZUZvcklkKG8ueUF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIHMgPSByLmdldEJhc2VQaXhlbCgpLFxuICAgICAgICAgICAgICAgICAgICBkID0gdC5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIHUgPSBuLmdldERhdGFzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgYyA9IG4uY2hhcnQub3B0aW9ucy5lbGVtZW50cy5yZWN0YW5nbGU7XG4gICAgICAgICAgICAgICAgICAodC5feFNjYWxlID0gciksXG4gICAgICAgICAgICAgICAgICAgICh0Ll95U2NhbGUgPSBsKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuX2RhdGFzZXRJbmRleCA9IG4uaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAodC5faW5kZXggPSBhKTtcbiAgICAgICAgICAgICAgICAgIHZhciBoID0gbi5nZXRSdWxlcihhKTtcbiAgICAgICAgICAgICAgICAgICh0Ll9tb2RlbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogaSA/IHMgOiBuLmNhbGN1bGF0ZUJhclgoYSwgbi5pbmRleCksXG4gICAgICAgICAgICAgICAgICAgIHk6IG4uY2FsY3VsYXRlQmFyWShhLCBuLmluZGV4LCBoKSxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG4uY2hhcnQuZGF0YS5sYWJlbHNbYV0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFzZXRMYWJlbDogdS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgYmFzZTogaSA/IHMgOiBuLmNhbGN1bGF0ZUJhckJhc2Uobi5pbmRleCwgYSksXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogbi5jYWxjdWxhdGVCYXJIZWlnaHQoaCksXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZC5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA/IGQuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGMuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJTa2lwcGVkOiBkLmJvcmRlclNraXBwZWRcbiAgICAgICAgICAgICAgICAgICAgICA/IGQuYm9yZGVyU2tpcHBlZFxuICAgICAgICAgICAgICAgICAgICAgIDogYy5ib3JkZXJTa2lwcGVkLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogZC5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgID8gZC5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGMuYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiBkLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgPyBkLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYy5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAodC5kcmF3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNbKHUgKyB0KSAlIDRdO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuX2NoYXJ0LmN0eCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLl92aWV3LFxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGEuaGVpZ2h0IC8gMixcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBhLnkgLSBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IGEueSArIGksXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gYS5iYXNlIC0gKGEuYmFzZSAtIGEueCksXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gYS5ib3JkZXJXaWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgYS5ib3JkZXJXaWR0aCAmJiAoKG4gKz0gbCksIChvIC09IGwpLCAociArPSBsKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmJlZ2luUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGUuZmlsbFN0eWxlID0gYS5iYWNrZ3JvdW5kQ29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGUuc3Ryb2tlU3R5bGUgPSBhLmJvcmRlckNvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLmxpbmVXaWR0aCA9IGEuYm9yZGVyV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBbYS5iYXNlLCBvXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW2EuYmFzZSwgbl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtyLCBuXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW3IsIG9dLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBbXCJib3R0b21cIiwgXCJsZWZ0XCIsIFwidG9wXCIsIFwicmlnaHRcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICB1ID0gZC5pbmRleE9mKGEuYm9yZGVyU2tpcHBlZCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgLTEgPT09IHUgJiYgKHUgPSAwKSwgZS5tb3ZlVG8uYXBwbHkoZSwgdCgwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDE7IDQgPiBjOyBjKyspIGUubGluZVRvLmFwcGx5KGUsIHQoYykpO1xuICAgICAgICAgICAgICAgICAgICAgIGUuZmlsbCgpLCBhLmJvcmRlcldpZHRoICYmIGUuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB0LnBpdm90KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVCYXJCYXNlOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gYS5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIG4gPSBhLmdldFNjYWxlRm9ySWQoaS54QXhpc0lEKSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IDA7XG4gICAgICAgICAgICAgICAgICBpZiAobi5vcHRpb25zLnN0YWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGEuY2hhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gci5kYXRhLmRhdGFzZXRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IE51bWJlcihsW3RdLmRhdGFbZV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgdCA+IGQ7XG4gICAgICAgICAgICAgICAgICAgICAgZCsrXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gbFtkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSByLmdldERhdGFzZXRNZXRhKGQpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuYmFyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjLnhBeGlzSUQgPT09IG4uaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuaXNEYXRhc2V0VmlzaWJsZShkKVxuICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBOdW1iZXIodS5kYXRhW2VdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gKz0gMCA+IHMgPyBNYXRoLm1pbihoLCAwKSA6IE1hdGgubWF4KGgsIDApO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5nZXRQaXhlbEZvclZhbHVlKG8pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uZ2V0QmFzZVBpeGVsKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRSdWxlcjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBuID0gYS5nZXRTY2FsZUZvcklkKGkueUF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIG8gPSBhLmdldEJhckNvdW50KCk7XG4gICAgICAgICAgICAgICAgICBlID1cbiAgICAgICAgICAgICAgICAgICAgXCJjYXRlZ29yeVwiID09PSBuLm9wdGlvbnMudHlwZVxuICAgICAgICAgICAgICAgICAgICAgID8gbi5nZXRQaXhlbEZvclRpY2sodCArIDEpIC0gbi5nZXRQaXhlbEZvclRpY2sodClcbiAgICAgICAgICAgICAgICAgICAgICA6IG4ud2lkdGggLyBuLnRpY2tzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgIHZhciByID0gZSAqIG4ub3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGwgPSAoZSAtIGUgKiBuLm9wdGlvbnMuY2F0ZWdvcnlQZXJjZW50YWdlKSAvIDIsXG4gICAgICAgICAgICAgICAgICAgIHMgPSByIC8gbztcbiAgICAgICAgICAgICAgICAgIGlmIChuLnRpY2tzLmxlbmd0aCAhPT0gYS5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBuLnRpY2tzLmxlbmd0aCAvIGEuY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBzICo9IGQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgdSA9IHMgKiBuLm9wdGlvbnMuYmFyUGVyY2VudGFnZSxcbiAgICAgICAgICAgICAgICAgICAgYyA9IHMgLSBzICogbi5vcHRpb25zLmJhclBlcmNlbnRhZ2U7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0Q291bnQ6IG8sXG4gICAgICAgICAgICAgICAgICAgIHRpY2tIZWlnaHQ6IGUsXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5SGVpZ2h0OiByLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeVNwYWNpbmc6IGwsXG4gICAgICAgICAgICAgICAgICAgIGZ1bGxCYXJIZWlnaHQ6IHMsXG4gICAgICAgICAgICAgICAgICAgIGJhckhlaWdodDogdSxcbiAgICAgICAgICAgICAgICAgICAgYmFyU3BhY2luZzogYyxcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVCYXJIZWlnaHQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGEgPSBlLmdldFNjYWxlRm9ySWQoZS5nZXRNZXRhKCkueUF4aXNJRCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYS5vcHRpb25zLmJhclRoaWNrbmVzc1xuICAgICAgICAgICAgICAgICAgICA/IGEub3B0aW9ucy5iYXJUaGlja25lc3NcbiAgICAgICAgICAgICAgICAgICAgOiBhLm9wdGlvbnMuc3RhY2tlZFxuICAgICAgICAgICAgICAgICAgICA/IHQuY2F0ZWdvcnlIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgOiB0LmJhckhlaWdodDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZUJhclg6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGEuZ2V0U2NhbGVGb3JJZChpLnhBeGlzSUQpLFxuICAgICAgICAgICAgICAgICAgICBvID0gTnVtYmVyKGEuZ2V0RGF0YXNldCgpLmRhdGFbdF0pO1xuICAgICAgICAgICAgICAgICAgaWYgKG4ub3B0aW9ucy5zdGFja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwLCBsID0gMCwgcyA9IDA7IGUgPiBzOyBzKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGEuY2hhcnQuZGF0YS5kYXRhc2V0c1tzXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBhLmNoYXJ0LmdldERhdGFzZXRNZXRhKHMpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHUuYmFyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB1LnhBeGlzSUQgPT09IG4uaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShzKVxuICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBOdW1iZXIoZC5kYXRhW3RdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIDAgPiBjID8gKGwgKz0gYyB8fCAwKSA6IChyICs9IGMgfHwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwID4gb1xuICAgICAgICAgICAgICAgICAgICAgID8gbi5nZXRQaXhlbEZvclZhbHVlKGwgKyBvKVxuICAgICAgICAgICAgICAgICAgICAgIDogbi5nZXRQaXhlbEZvclZhbHVlKHIgKyBvKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBuLmdldFBpeGVsRm9yVmFsdWUobyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVCYXJZOiBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBuID0gaS5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIG8gPSBpLmdldFNjYWxlRm9ySWQobi55QXhpc0lEKSxcbiAgICAgICAgICAgICAgICAgICAgciA9IGkuZ2V0QmFySW5kZXgoZSksXG4gICAgICAgICAgICAgICAgICAgIGwgPSBvLmdldFBpeGVsRm9yVmFsdWUobnVsbCwgdCwgZSwgaS5jaGFydC5pc0NvbWJvKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIChsIC09IGkuY2hhcnQuaXNDb21ibyA/IGEudGlja0hlaWdodCAvIDIgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgby5vcHRpb25zLnN0YWNrZWRcbiAgICAgICAgICAgICAgICAgICAgICA/IGwgKyBhLmNhdGVnb3J5SGVpZ2h0IC8gMiArIGEuY2F0ZWdvcnlTcGFjaW5nXG4gICAgICAgICAgICAgICAgICAgICAgOiBsICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuYmFySGVpZ2h0IC8gMiArXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmNhdGVnb3J5U3BhY2luZyArXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmJhckhlaWdodCAqIHIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5iYXJTcGFjaW5nIC8gMiArXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmJhclNwYWNpbmcgKiByXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAxNjogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycztcbiAgICAgICAgICAgICh0LmRlZmF1bHRzLmJ1YmJsZSA9IHtcbiAgICAgICAgICAgICAgaG92ZXI6IHsgbW9kZTogXCJzaW5nbGVcIiB9LFxuICAgICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgICB4QXhlczogW3sgdHlwZTogXCJsaW5lYXJcIiwgcG9zaXRpb246IFwiYm90dG9tXCIsIGlkOiBcIngtYXhpcy0wXCIgfV0sXG4gICAgICAgICAgICAgICAgeUF4ZXM6IFt7IHR5cGU6IFwibGluZWFyXCIsIHBvc2l0aW9uOiBcImxlZnRcIiwgaWQ6IFwieS1heGlzLTBcIiB9XSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGUuZGF0YXNldHNbdC5kYXRhc2V0SW5kZXhdLmxhYmVsIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaSA9IGUuZGF0YXNldHNbdC5kYXRhc2V0SW5kZXhdLmRhdGFbdC5pbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgYSArIFwiOiAoXCIgKyB0LnhMYWJlbCArIFwiLCBcIiArIHQueUxhYmVsICsgXCIsIFwiICsgaS5yICsgXCIpXCJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5jb250cm9sbGVycy5idWJibGUgPSB0LkRhdGFzZXRDb250cm9sbGVyLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiB0LmVsZW1lbnRzLlBvaW50LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBuID0gaS5kYXRhO1xuICAgICAgICAgICAgICAgICAgZS5lYWNoKG4sIGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGEudXBkYXRlRWxlbWVudChlLCBpLCB0KTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlRWxlbWVudDogZnVuY3Rpb24gKGEsIGksIG4pIHtcbiAgICAgICAgICAgICAgICAgIHZhciBvID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgciA9IG8uZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBsID0gby5nZXRTY2FsZUZvcklkKHIueEF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIHMgPSBvLmdldFNjYWxlRm9ySWQoci55QXhpc0lEKSxcbiAgICAgICAgICAgICAgICAgICAgZCA9IGEuY3VzdG9tIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICB1ID0gby5nZXREYXRhc2V0KCksXG4gICAgICAgICAgICAgICAgICAgIGMgPSB1LmRhdGFbaV0sXG4gICAgICAgICAgICAgICAgICAgIGggPSBvLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQsXG4gICAgICAgICAgICAgICAgICAgIGYgPSBvLmluZGV4O1xuICAgICAgICAgICAgICAgICAgZS5leHRlbmQoYSwge1xuICAgICAgICAgICAgICAgICAgICBfeFNjYWxlOiBsLFxuICAgICAgICAgICAgICAgICAgICBfeVNjYWxlOiBzLFxuICAgICAgICAgICAgICAgICAgICBfZGF0YXNldEluZGV4OiBmLFxuICAgICAgICAgICAgICAgICAgICBfaW5kZXg6IGksXG4gICAgICAgICAgICAgICAgICAgIF9tb2RlbDoge1xuICAgICAgICAgICAgICAgICAgICAgIHg6IG5cbiAgICAgICAgICAgICAgICAgICAgICAgID8gbC5nZXRQaXhlbEZvckRlY2ltYWwoMC41KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBsLmdldFBpeGVsRm9yVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PSB0eXBlb2YgYyA/IGMgOiBOYU4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uY2hhcnQuaXNDb21ib1xuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIHk6IG4gPyBzLmdldEJhc2VQaXhlbCgpIDogcy5nZXRQaXhlbEZvclZhbHVlKGMsIGksIGYpLFxuICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogbiA/IDAgOiBkLnJhZGl1cyA/IGQucmFkaXVzIDogby5nZXRSYWRpdXMoYyksXG4gICAgICAgICAgICAgICAgICAgICAgaGl0UmFkaXVzOiBkLmhpdFJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBkLmhpdFJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1LmhpdFJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGguaGl0UmFkaXVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgdC5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlSG92ZXJTdHlsZS5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgICBoXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB2YXIgZyA9IGEuX21vZGVsO1xuICAgICAgICAgICAgICAgICAgKGcuc2tpcCA9IGQuc2tpcCA/IGQuc2tpcCA6IGlzTmFOKGcueCkgfHwgaXNOYU4oZy55KSksXG4gICAgICAgICAgICAgICAgICAgIGEucGl2b3QoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFJhZGl1czogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0LnIgfHwgdGhpcy5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LnJhZGl1cztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICB0LkRhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5zZXRIb3ZlclN0eWxlLmNhbGwoaSwgYSk7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IGkuY2hhcnQuZGF0YS5kYXRhc2V0c1thLl9kYXRhc2V0SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICBvID0gYS5faW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBhLmN1c3RvbSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IGEuX21vZGVsO1xuICAgICAgICAgICAgICAgICAgbC5yYWRpdXMgPSByLmhvdmVyUmFkaXVzXG4gICAgICAgICAgICAgICAgICAgID8gci5ob3ZlclJhZGl1c1xuICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgbi5ob3ZlclJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgICAgICBpLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQuaG92ZXJSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICApICsgaS5nZXRSYWRpdXMobi5kYXRhW29dKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZUhvdmVyU3R5bGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICB0LkRhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5yZW1vdmVIb3ZlclN0eWxlLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgIGEuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gYS5jaGFydC5kYXRhLmRhdGFzZXRzW2UuX2RhdGFzZXRJbmRleF0uZGF0YVtlLl9pbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIG4gPSBlLmN1c3RvbSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGUuX21vZGVsO1xuICAgICAgICAgICAgICAgICAgby5yYWRpdXMgPSBuLnJhZGl1cyA/IG4ucmFkaXVzIDogYS5nZXRSYWRpdXMoaSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDE3OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzLFxuICAgICAgICAgICAgICBhID0gdC5kZWZhdWx0cztcbiAgICAgICAgICAgIChhLmRvdWdobnV0ID0ge1xuICAgICAgICAgICAgICBhbmltYXRpb246IHsgYW5pbWF0ZVJvdGF0ZTogITAsIGFuaW1hdGVTY2FsZTogITEgfSxcbiAgICAgICAgICAgICAgYXNwZWN0UmF0aW86IDEsXG4gICAgICAgICAgICAgIGhvdmVyOiB7IG1vZGU6IFwic2luZ2xlXCIgfSxcbiAgICAgICAgICAgICAgbGVnZW5kQ2FsbGJhY2s6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSBbXTtcbiAgICAgICAgICAgICAgICBlLnB1c2goJzx1bCBjbGFzc05hbWU9XCInICsgdC5pZCArICctbGVnZW5kXCI+Jyk7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0LmRhdGEsXG4gICAgICAgICAgICAgICAgICBpID0gYS5kYXRhc2V0cyxcbiAgICAgICAgICAgICAgICAgIG4gPSBhLmxhYmVscztcbiAgICAgICAgICAgICAgICBpZiAoaS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gMDsgbyA8IGlbMF0uZGF0YS5sZW5ndGg7ICsrbylcbiAgICAgICAgICAgICAgICAgICAgZS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICc8bGk+PHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgaVswXS5iYWNrZ3JvdW5kQ29sb3Jbb10gK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1wiPjwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgbltvXSAmJiBlLnB1c2gobltvXSksXG4gICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKFwiPC9saT5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUucHVzaChcIjwvdWw+XCIpLCBlLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVMYWJlbHM6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gdC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5sYWJlbHMubGVuZ3RoICYmIGEuZGF0YXNldHMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgPyBhLmxhYmVscy5tYXAoZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0LmdldERhdGFzZXRNZXRhKDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBhLmRhdGFzZXRzWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBvLmRhdGFbbl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IChsICYmIGwuY3VzdG9tKSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IHQub3B0aW9ucy5lbGVtZW50cy5hcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IHMuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHMuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQoci5iYWNrZ3JvdW5kQ29sb3IsIG4sIHUuYmFja2dyb3VuZENvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gcy5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQoci5ib3JkZXJDb2xvciwgbiwgdS5ib3JkZXJDb2xvciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHMuYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcy5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkKHIuYm9yZGVyV2lkdGgsIG4sIHUuYm9yZGVyV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46IGlzTmFOKHIuZGF0YVtuXSkgfHwgby5kYXRhW25dLmhpZGRlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgIG8gPSBlLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICByID0gdGhpcy5jaGFydDtcbiAgICAgICAgICAgICAgICAgIGZvciAoYSA9IDAsIGkgPSAoci5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7IGkgPiBhOyArK2EpXG4gICAgICAgICAgICAgICAgICAgIChuID0gci5nZXREYXRhc2V0TWV0YShhKSksXG4gICAgICAgICAgICAgICAgICAgICAgbi5kYXRhW29dICYmIChuLmRhdGFbb10uaGlkZGVuID0gIW4uZGF0YVtvXS5oaWRkZW4pO1xuICAgICAgICAgICAgICAgICAgci51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjdXRvdXRQZXJjZW50YWdlOiA1MCxcbiAgICAgICAgICAgICAgcm90YXRpb246IE1hdGguUEkgKiAtMC41LFxuICAgICAgICAgICAgICBjaXJjdW1mZXJlbmNlOiAyICogTWF0aC5QSSxcbiAgICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiBmdW5jdGlvbiAodCwgYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGEubGFiZWxzW3QuaW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAgIG4gPSBcIjogXCIgKyBhLmRhdGFzZXRzW3QuZGF0YXNldEluZGV4XS5kYXRhW3QuaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIGUuaXNBcnJheShpKSA/ICgoaSA9IGkuc2xpY2UoKSksIChpWzBdICs9IG4pKSA6IChpICs9IG4pLFxuICAgICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoYS5waWUgPSBlLmNsb25lKGEuZG91Z2hudXQpKSxcbiAgICAgICAgICAgICAgZS5leHRlbmQoYS5waWUsIHsgY3V0b3V0UGVyY2VudGFnZTogMCB9KSxcbiAgICAgICAgICAgICAgKHQuY29udHJvbGxlcnMuZG91Z2hudXQgPSB0LmNvbnRyb2xsZXJzLnBpZSA9XG4gICAgICAgICAgICAgICAgdC5EYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuICAgICAgICAgICAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiB0LmVsZW1lbnRzLkFyYyxcbiAgICAgICAgICAgICAgICAgIGxpbmtTY2FsZXM6IGUubm9vcCxcbiAgICAgICAgICAgICAgICAgIGdldFJpbmdJbmRleDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IDAsIGEgPSAwOyB0ID4gYTsgKythKVxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShhKSAmJiArK2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgIGkgPSBhLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICAgIG4gPSBpLmNoYXJ0QXJlYSxcbiAgICAgICAgICAgICAgICAgICAgICBvID0gaS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgIHIgPSBvLmVsZW1lbnRzLmFyYyxcbiAgICAgICAgICAgICAgICAgICAgICBsID0gbi5yaWdodCAtIG4ubGVmdCAtIHIuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgcyA9IG4uYm90dG9tIC0gbi50b3AgLSByLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgIGQgPSBNYXRoLm1pbihsLCBzKSxcbiAgICAgICAgICAgICAgICAgICAgICB1ID0geyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgICAgYyA9IGEuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICAgIGggPSBvLmN1dG91dFBlcmNlbnRhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgZiA9IG8uY2lyY3VtZmVyZW5jZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGYgPCAyICogTWF0aC5QSSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBnID0gby5yb3RhdGlvbiAlICgyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgICAgICAgZyArPVxuICAgICAgICAgICAgICAgICAgICAgICAgMiAqXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLlBJICpcbiAgICAgICAgICAgICAgICAgICAgICAgIChnID49IE1hdGguUEkgPyAtMSA6IGcgPCAtTWF0aC5QSSA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IGcgKyBmLFxuICAgICAgICAgICAgICAgICAgICAgICAgbSA9IHsgeDogTWF0aC5jb3MoZyksIHk6IE1hdGguc2luKGcpIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBiID0geyB4OiBNYXRoLmNvcyhwKSwgeTogTWF0aC5zaW4ocCkgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHYgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAoMCA+PSBnICYmIHAgPj0gMCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGcgPD0gMiAqIE1hdGguUEkgJiYgMiAqIE1hdGguUEkgPD0gcCksXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGcgPD0gMC41ICogTWF0aC5QSSAmJiAwLjUgKiBNYXRoLlBJIDw9IHApIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChnIDw9IDIuNSAqIE1hdGguUEkgJiYgMi41ICogTWF0aC5QSSA8PSBwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAoZyA8PSAtTWF0aC5QSSAmJiAtTWF0aC5QSSA8PSBwKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoZyA8PSBNYXRoLlBJICYmIE1hdGguUEkgPD0gcCksXG4gICAgICAgICAgICAgICAgICAgICAgICBrID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGcgPD0gMC41ICogLU1hdGguUEkgJiYgMC41ICogLU1hdGguUEkgPD0gcCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGcgPD0gMS41ICogTWF0aC5QSSAmJiAxLjUgKiBNYXRoLlBJIDw9IHApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUyA9IGggLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB3ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ueCAqIChtLnggPCAwID8gMSA6IFMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnggKiAoYi54IDwgMCA/IDEgOiBTKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeToga1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gLTFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IE1hdGgubWluKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnkgKiAobS55IDwgMCA/IDEgOiBTKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi55ICogKGIueSA8IDAgPyAxIDogUylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgTSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDogdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ueCAqIChtLnggPiAwID8gMSA6IFMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnggKiAoYi54ID4gMCA/IDEgOiBTKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeTogeFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ueSAqIChtLnkgPiAwID8gMSA6IFMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnkgKiAoYi55ID4gMCA/IDEgOiBTKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBDID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMC41ICogKE0ueCAtIHcueCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMC41ICogKE0ueSAtIHcueSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgIChkID0gTWF0aC5taW4obCAvIEMud2lkdGgsIHMgLyBDLmhlaWdodCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPSB7IHg6IChNLnggKyB3LngpICogLTAuNSwgeTogKE0ueSArIHcueSkgKiAtMC41IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIChpLmJvcmRlcldpZHRoID0gYS5nZXRNYXhCb3JkZXJXaWR0aChjLmRhdGEpKSxcbiAgICAgICAgICAgICAgICAgICAgICAoaS5vdXRlclJhZGl1cyA9IE1hdGgubWF4KChkIC0gaS5ib3JkZXJXaWR0aCkgLyAyLCAwKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGkuaW5uZXJSYWRpdXMgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICAgIGggPyAoaS5vdXRlclJhZGl1cyAvIDEwMCkgKiBoIDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAoaS5yYWRpdXNMZW5ndGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgKGkub3V0ZXJSYWRpdXMgLSBpLmlubmVyUmFkaXVzKSAvXG4gICAgICAgICAgICAgICAgICAgICAgICBpLmdldFZpc2libGVEYXRhc2V0Q291bnQoKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGkub2Zmc2V0WCA9IHUueCAqIGkub3V0ZXJSYWRpdXMpLFxuICAgICAgICAgICAgICAgICAgICAgIChpLm9mZnNldFkgPSB1LnkgKiBpLm91dGVyUmFkaXVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAoYy50b3RhbCA9IGEuY2FsY3VsYXRlVG90YWwoKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGEub3V0ZXJSYWRpdXMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgaS5vdXRlclJhZGl1cyAtXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnJhZGl1c0xlbmd0aCAqIGEuZ2V0UmluZ0luZGV4KGEuaW5kZXgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAoYS5pbm5lclJhZGl1cyA9IGEub3V0ZXJSYWRpdXMgLSBpLnJhZGl1c0xlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGMuZGF0YSwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEudXBkYXRlRWxlbWVudChlLCBpLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB1cGRhdGVFbGVtZW50OiBmdW5jdGlvbiAodCwgYSwgaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgbyA9IG4uY2hhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgciA9IG8uY2hhcnRBcmVhLFxuICAgICAgICAgICAgICAgICAgICAgIGwgPSBvLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgcyA9IGwuYW5pbWF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgIGQgPSAoci5sZWZ0ICsgci5yaWdodCkgLyAyLFxuICAgICAgICAgICAgICAgICAgICAgIHUgPSAoci50b3AgKyByLmJvdHRvbSkgLyAyLFxuICAgICAgICAgICAgICAgICAgICAgIGMgPSBsLnJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgIGggPSBsLnJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgIGYgPSBuLmdldERhdGFzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgICBnID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGkgJiYgcy5hbmltYXRlUm90YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IHQuaGlkZGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IG4uY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZShmLmRhdGFbYV0pICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobC5jaXJjdW1mZXJlbmNlIC8gKDIgKiBNYXRoLlBJKSksXG4gICAgICAgICAgICAgICAgICAgICAgcCA9IGkgJiYgcy5hbmltYXRlU2NhbGUgPyAwIDogbi5pbm5lclJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICBtID0gaSAmJiBzLmFuaW1hdGVTY2FsZSA/IDAgOiBuLm91dGVyUmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgIGIgPSBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdDtcbiAgICAgICAgICAgICAgICAgICAgZS5leHRlbmQodCwge1xuICAgICAgICAgICAgICAgICAgICAgIF9kYXRhc2V0SW5kZXg6IG4uaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgX2luZGV4OiBhLFxuICAgICAgICAgICAgICAgICAgICAgIF9tb2RlbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogZCArIG8ub2Zmc2V0WCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHUgKyBvLm9mZnNldFksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydEFuZ2xlOiBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQW5nbGU6IGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaXJjdW1mZXJlbmNlOiBnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0ZXJSYWRpdXM6IG0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpbm5lclJhZGl1czogcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBiKGYubGFiZWwsIGEsIG8uZGF0YS5sYWJlbHNbYV0pLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IHQuX21vZGVsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUhvdmVyU3R5bGUodCksXG4gICAgICAgICAgICAgICAgICAgICAgKGkgJiYgcy5hbmltYXRlUm90YXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKDAgPT09IGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAodi5zdGFydEFuZ2xlID0gbC5yb3RhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAodi5zdGFydEFuZ2xlID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uZ2V0TWV0YSgpLmRhdGFbYSAtIDFdLl9tb2RlbC5lbmRBbmdsZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAodi5lbmRBbmdsZSA9IHYuc3RhcnRBbmdsZSArIHYuY2lyY3VtZmVyZW5jZSkpLFxuICAgICAgICAgICAgICAgICAgICAgIHQucGl2b3QoKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICByZW1vdmVIb3ZlclN0eWxlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0LkRhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5yZW1vdmVIb3ZlclN0eWxlLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5hcmNcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBjYWxjdWxhdGVUb3RhbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgICAgICAgICAgICBhID0gdGhpcy5nZXREYXRhc2V0KCksXG4gICAgICAgICAgICAgICAgICAgICAgaSA9IHRoaXMuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICAgIG4gPSAwO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChpLmRhdGEsIGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAodCA9IGEuZGF0YVtpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlzTmFOKHQpIHx8IGUuaGlkZGVuIHx8IChuICs9IE1hdGguYWJzKHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBuXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmdldE1ldGEoKS50b3RhbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPiAwICYmICFpc05hTih0KSA/IDIgKiBNYXRoLlBJICogKHQgLyBlKSA6IDA7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ2V0TWF4Qm9yZGVyV2lkdGg6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGUsIGEsIGkgPSAwLCBuID0gdGhpcy5pbmRleCwgbyA9IHQubGVuZ3RoLCByID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICBvID4gcjtcbiAgICAgICAgICAgICAgICAgICAgICByKytcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIChlID0gdFtyXS5fbW9kZWwgPyB0W3JdLl9tb2RlbC5ib3JkZXJXaWR0aCA6IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGEgPSB0W3JdLl9jaGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRbcl0uX2NoYXJ0LmNvbmZpZy5kYXRhLmRhdGFzZXRzW25dLmhvdmVyQm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChpID0gZSA+IGkgPyBlIDogaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoaSA9IGEgPiBpID8gYSA6IGkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDE4OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUodCwgZSkge1xuICAgICAgICAgICAgICByZXR1cm4gYS5nZXRWYWx1ZU9yRGVmYXVsdCh0LnNob3dMaW5lLCBlLnNob3dMaW5lcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYSA9IHQuaGVscGVycztcbiAgICAgICAgICAgICh0LmRlZmF1bHRzLmxpbmUgPSB7XG4gICAgICAgICAgICAgIHNob3dMaW5lczogITAsXG4gICAgICAgICAgICAgIHNwYW5HYXBzOiAhMSxcbiAgICAgICAgICAgICAgaG92ZXI6IHsgbW9kZTogXCJsYWJlbFwiIH0sXG4gICAgICAgICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgICAgIHhBeGVzOiBbeyB0eXBlOiBcImNhdGVnb3J5XCIsIGlkOiBcIngtYXhpcy0wXCIgfV0sXG4gICAgICAgICAgICAgICAgeUF4ZXM6IFt7IHR5cGU6IFwibGluZWFyXCIsIGlkOiBcInktYXhpcy0wXCIgfV0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKHQuY29udHJvbGxlcnMubGluZSA9IHQuRGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IHQuZWxlbWVudHMuTGluZSxcbiAgICAgICAgICAgICAgICBkYXRhRWxlbWVudFR5cGU6IHQuZWxlbWVudHMuUG9pbnQsXG4gICAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBsID0gci5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIHMgPSBsLmRhdGFzZXQsXG4gICAgICAgICAgICAgICAgICAgIGQgPSBsLmRhdGEgfHwgW10sXG4gICAgICAgICAgICAgICAgICAgIHUgPSByLmNoYXJ0Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGMgPSB1LmVsZW1lbnRzLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGggPSByLmdldFNjYWxlRm9ySWQobC55QXhpc0lEKSxcbiAgICAgICAgICAgICAgICAgICAgZiA9IHIuZ2V0RGF0YXNldCgpLFxuICAgICAgICAgICAgICAgICAgICBnID0gZShmLCB1KTtcbiAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgIGcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoKG8gPSBzLmN1c3RvbSB8fCB7fSksXG4gICAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBmLnRlbnNpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gZi5saW5lVGVuc2lvbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGYubGluZVRlbnNpb24gPSBmLnRlbnNpb24pLFxuICAgICAgICAgICAgICAgICAgICAgIChzLl9zY2FsZSA9IGgpLFxuICAgICAgICAgICAgICAgICAgICAgIChzLl9kYXRhc2V0SW5kZXggPSByLmluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAocy5fY2hpbGRyZW4gPSBkKSxcbiAgICAgICAgICAgICAgICAgICAgICAocy5fbW9kZWwgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuR2FwczogZi5zcGFuR2FwcyA/IGYuc3BhbkdhcHMgOiB1LnNwYW5HYXBzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVuc2lvbjogby50ZW5zaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gby50ZW5zaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYS5nZXRWYWx1ZU9yRGVmYXVsdChmLmxpbmVUZW5zaW9uLCBjLnRlbnNpb24pLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8uYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogZi5iYWNrZ3JvdW5kQ29sb3IgfHwgYy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogby5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8uYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmLmJvcmRlcldpZHRoIHx8IGMuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogby5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8uYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmLmJvcmRlckNvbG9yIHx8IGMuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDYXBTdHlsZTogby5ib3JkZXJDYXBTdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8uYm9yZGVyQ2FwU3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmLmJvcmRlckNhcFN0eWxlIHx8IGMuYm9yZGVyQ2FwU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJEYXNoOiBvLmJvcmRlckRhc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvLmJvcmRlckRhc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmLmJvcmRlckRhc2ggfHwgYy5ib3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogby5ib3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gby5ib3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogZi5ib3JkZXJEYXNoT2Zmc2V0IHx8IGMuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckpvaW5TdHlsZTogby5ib3JkZXJKb2luU3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvLmJvcmRlckpvaW5TdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGYuYm9yZGVySm9pblN0eWxlIHx8IGMuYm9yZGVySm9pblN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogby5maWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gby5maWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogdm9pZCAwICE9PSBmLmZpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmLmZpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjLmZpbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwcGVkTGluZTogby5zdGVwcGVkTGluZVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8uc3RlcHBlZExpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhLmdldFZhbHVlT3JEZWZhdWx0KGYuc3RlcHBlZExpbmUsIGMuc3RlcHBlZCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjdWJpY0ludGVycG9sYXRpb25Nb2RlOiBvLmN1YmljSW50ZXJwb2xhdGlvbk1vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvLmN1YmljSW50ZXJwb2xhdGlvbk1vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5jdWJpY0ludGVycG9sYXRpb25Nb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5jdWJpY0ludGVycG9sYXRpb25Nb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlVG9wOiBoLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlQm90dG9tOiBoLmJvdHRvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlWmVybzogaC5nZXRCYXNlUGl4ZWwoKSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBzLnBpdm90KCkpLFxuICAgICAgICAgICAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgIG4gPSBkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgbiA+IGk7XG4gICAgICAgICAgICAgICAgICAgICsraVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICByLnVwZGF0ZUVsZW1lbnQoZFtpXSwgaSwgdCk7XG4gICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICBnICYmXG4gICAgICAgICAgICAgICAgICAgICAgMCAhPT0gcy5fbW9kZWwudGVuc2lvbiAmJlxuICAgICAgICAgICAgICAgICAgICAgIHIudXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cygpLFxuICAgICAgICAgICAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgIG4gPSBkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgbiA+IGk7XG4gICAgICAgICAgICAgICAgICAgICsraVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBkW2ldLnBpdm90KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRQb2ludEJhY2tncm91bmRDb2xvcjogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcy5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMuZ2V0RGF0YXNldCgpLFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5jdXN0b20gfHwge307XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBvLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgID8gKGkgPSBvLmJhY2tncm91bmRDb2xvcilcbiAgICAgICAgICAgICAgICAgICAgICA6IG4ucG9pbnRCYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA/IChpID0gYS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG4ucG9pbnRCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgICAgOiBuLmJhY2tncm91bmRDb2xvciAmJiAoaSA9IG4uYmFja2dyb3VuZENvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFBvaW50Qm9yZGVyQ29sb3I6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludC5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMuZ2V0RGF0YXNldCgpLFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5jdXN0b20gfHwge307XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBvLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyAoaSA9IG8uYm9yZGVyQ29sb3IpXG4gICAgICAgICAgICAgICAgICAgICAgOiBuLnBvaW50Qm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA/IChpID0gYS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG4ucG9pbnRCb3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgICA6IG4uYm9yZGVyQ29sb3IgJiYgKGkgPSBuLmJvcmRlckNvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFBvaW50Qm9yZGVyV2lkdGg6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludC5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMuZ2V0RGF0YXNldCgpLFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5jdXN0b20gfHwge307XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBvLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgPyAoaSA9IG8uYm9yZGVyV2lkdGgpXG4gICAgICAgICAgICAgICAgICAgICAgOiBuLnBvaW50Qm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICA/IChpID0gYS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG4ucG9pbnRCb3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgICA6IG4uYm9yZGVyV2lkdGggJiYgKGkgPSBuLmJvcmRlcldpZHRoKSxcbiAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnQ6IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGwgPSByLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IHQuY3VzdG9tIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBkID0gci5nZXREYXRhc2V0KCksXG4gICAgICAgICAgICAgICAgICAgIHUgPSByLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICBjID0gZC5kYXRhW2VdLFxuICAgICAgICAgICAgICAgICAgICBoID0gci5nZXRTY2FsZUZvcklkKGwueUF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIGYgPSByLmdldFNjYWxlRm9ySWQobC54QXhpc0lEKSxcbiAgICAgICAgICAgICAgICAgICAgZyA9IHIuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludCxcbiAgICAgICAgICAgICAgICAgICAgcCA9IHIuY2hhcnQuZGF0YS5sYWJlbHMgfHwgW10sXG4gICAgICAgICAgICAgICAgICAgIG0gPVxuICAgICAgICAgICAgICAgICAgICAgIDEgPT09IHAubGVuZ3RoIHx8IDEgPT09IGQuZGF0YS5sZW5ndGggfHwgci5jaGFydC5pc0NvbWJvO1xuICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBkLnJhZGl1cyAmJlxuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IGQucG9pbnRSYWRpdXMgJiZcbiAgICAgICAgICAgICAgICAgICAgKGQucG9pbnRSYWRpdXMgPSBkLnJhZGl1cyksXG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gZC5oaXRSYWRpdXMgJiZcbiAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IGQucG9pbnRIaXRSYWRpdXMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoZC5wb2ludEhpdFJhZGl1cyA9IGQuaGl0UmFkaXVzKSxcbiAgICAgICAgICAgICAgICAgICAgKG4gPSBmLmdldFBpeGVsRm9yVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PSB0eXBlb2YgYyA/IGMgOiBOYU4sXG4gICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICB1LFxuICAgICAgICAgICAgICAgICAgICAgIG1cbiAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChvID0gaSA/IGguZ2V0QmFzZVBpeGVsKCkgOiByLmNhbGN1bGF0ZVBvaW50WShjLCBlLCB1KSksXG4gICAgICAgICAgICAgICAgICAgICh0Ll94U2NhbGUgPSBmKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuX3lTY2FsZSA9IGgpLFxuICAgICAgICAgICAgICAgICAgICAodC5fZGF0YXNldEluZGV4ID0gdSksXG4gICAgICAgICAgICAgICAgICAgICh0Ll9pbmRleCA9IGUpLFxuICAgICAgICAgICAgICAgICAgICAodC5fbW9kZWwgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgeDogbixcbiAgICAgICAgICAgICAgICAgICAgICB5OiBvLFxuICAgICAgICAgICAgICAgICAgICAgIHNraXA6IHMuc2tpcCB8fCBpc05hTihuKSB8fCBpc05hTihvKSxcbiAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnJhZGl1cyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoZC5wb2ludFJhZGl1cywgZSwgZy5yYWRpdXMpLFxuICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnBvaW50U3R5bGUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkLnBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGcucG9pbnRTdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHIuZ2V0UG9pbnRCYWNrZ3JvdW5kQ29sb3IodCwgZSksXG4gICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IHIuZ2V0UG9pbnRCb3JkZXJDb2xvcih0LCBlKSxcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogci5nZXRQb2ludEJvcmRlcldpZHRoKHQsIGUpLFxuICAgICAgICAgICAgICAgICAgICAgIHRlbnNpb246IGwuZGF0YXNldC5fbW9kZWwgPyBsLmRhdGFzZXQuX21vZGVsLnRlbnNpb24gOiAwLFxuICAgICAgICAgICAgICAgICAgICAgIHN0ZXBwZWRMaW5lOiBsLmRhdGFzZXQuX21vZGVsXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGwuZGF0YXNldC5fbW9kZWwuc3RlcHBlZExpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogITEsXG4gICAgICAgICAgICAgICAgICAgICAgaGl0UmFkaXVzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcy5oaXRSYWRpdXMgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkLnBvaW50SGl0UmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBnLmhpdFJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVQb2ludFk6IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGwgPSByLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICBzID0gci5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIGQgPSByLmdldFNjYWxlRm9ySWQocy55QXhpc0lEKSxcbiAgICAgICAgICAgICAgICAgICAgdSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGMgPSAwO1xuICAgICAgICAgICAgICAgICAgaWYgKGQub3B0aW9ucy5zdGFja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGEgPiBpOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgKChuID0gbC5kYXRhLmRhdGFzZXRzW2ldKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChvID0gbC5nZXREYXRhc2V0TWV0YShpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBcImxpbmVcIiA9PT0gby50eXBlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8ueUF4aXNJRCA9PT0gZC5pZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICBsLmlzRGF0YXNldFZpc2libGUoaSkpXG4gICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IE51bWJlcihkLmdldFJpZ2h0VmFsdWUobi5kYXRhW2VdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAwID4gaCA/IChjICs9IGggfHwgMCkgOiAodSArPSBoIHx8IDApO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBOdW1iZXIoZC5nZXRSaWdodFZhbHVlKHQpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgPiBmXG4gICAgICAgICAgICAgICAgICAgICAgPyBkLmdldFBpeGVsRm9yVmFsdWUoYyArIGYpXG4gICAgICAgICAgICAgICAgICAgICAgOiBkLmdldFBpeGVsRm9yVmFsdWUodSArIGYpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuZ2V0UGl4ZWxGb3JWYWx1ZSh0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUJlemllckNvbnRyb2xQb2ludHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHQodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4odCwgYSksIGUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgICAgIGwgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBzID0gbC5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIGQgPSBsLmNoYXJ0LmNoYXJ0QXJlYSxcbiAgICAgICAgICAgICAgICAgICAgdSA9IHMuZGF0YSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKHMuZGF0YXNldC5fbW9kZWwuc3BhbkdhcHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAodSA9IHUuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXQuX21vZGVsLnNraXA7XG4gICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICBcIm1vbm90b25lXCIgPT09IHMuZGF0YXNldC5fbW9kZWwuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgYS5zcGxpbmVDdXJ2ZU1vbm90b25lKHUpO1xuICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGUgPSAwLCBpID0gdS5sZW5ndGg7IGkgPiBlOyArK2UpXG4gICAgICAgICAgICAgICAgICAgICAgKG4gPSB1W2VdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChvID0gbi5fbW9kZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHIgPSBhLnNwbGluZUN1cnZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLnByZXZpb3VzSXRlbSh1LCBlKS5fbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEubmV4dEl0ZW0odSwgZSkuX21vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzLmRhdGFzZXQuX21vZGVsLnRlbnNpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKG8uY29udHJvbFBvaW50UHJldmlvdXNYID0gci5wcmV2aW91cy54KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChvLmNvbnRyb2xQb2ludFByZXZpb3VzWSA9IHIucHJldmlvdXMueSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoby5jb250cm9sUG9pbnROZXh0WCA9IHIubmV4dC54KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChvLmNvbnRyb2xQb2ludE5leHRZID0gci5uZXh0LnkpO1xuICAgICAgICAgICAgICAgICAgaWYgKGwuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5saW5lLmNhcEJlemllclBvaW50cylcbiAgICAgICAgICAgICAgICAgICAgZm9yIChlID0gMCwgaSA9IHUubGVuZ3RoOyBpID4gZTsgKytlKVxuICAgICAgICAgICAgICAgICAgICAgIChvID0gdVtlXS5fbW9kZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKG8uY29udHJvbFBvaW50UHJldmlvdXNYID0gdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgby5jb250cm9sUG9pbnRQcmV2aW91c1gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZC5yaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoby5jb250cm9sUG9pbnRQcmV2aW91c1kgPSB0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvLmNvbnRyb2xQb2ludFByZXZpb3VzWSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZC50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQuYm90dG9tXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChvLmNvbnRyb2xQb2ludE5leHRYID0gdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgby5jb250cm9sUG9pbnROZXh0WCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZC5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkLnJpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChvLmNvbnRyb2xQb2ludE5leHRZID0gdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgby5jb250cm9sUG9pbnROZXh0WSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZC50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQuYm90dG9tXG4gICAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBuLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgciA9IG8uZGF0YSB8fCBbXSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IHQgfHwgMTtcbiAgICAgICAgICAgICAgICAgIGZvciAoYSA9IDAsIGkgPSByLmxlbmd0aDsgaSA+IGE7ICsrYSkgclthXS50cmFuc2l0aW9uKGwpO1xuICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgZShuLmdldERhdGFzZXQoKSwgbi5jaGFydC5vcHRpb25zKSAmJlxuICAgICAgICAgICAgICAgICAgICAgIG8uZGF0YXNldC50cmFuc2l0aW9uKGwpLmRyYXcoKSxcbiAgICAgICAgICAgICAgICAgICAgICBhID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICBpID0gci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGkgPiBhO1xuICAgICAgICAgICAgICAgICAgICArK2FcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgclthXS5kcmF3KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXRIb3ZlclN0eWxlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdC5fZGF0YXNldEluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQuX2luZGV4LFxuICAgICAgICAgICAgICAgICAgICBuID0gdC5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0Ll9tb2RlbDtcbiAgICAgICAgICAgICAgICAgIChvLnJhZGl1cyA9XG4gICAgICAgICAgICAgICAgICAgIG4uaG92ZXJSYWRpdXMgfHxcbiAgICAgICAgICAgICAgICAgICAgYS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgZS5wb2ludEhvdmVyUmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LmhvdmVyUmFkaXVzXG4gICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAoby5iYWNrZ3JvdW5kQ29sb3IgPVxuICAgICAgICAgICAgICAgICAgICAgIG4uaG92ZXJCYWNrZ3JvdW5kQ29sb3IgfHxcbiAgICAgICAgICAgICAgICAgICAgICBhLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucG9pbnRIb3ZlckJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmdldEhvdmVyQ29sb3Ioby5iYWNrZ3JvdW5kQ29sb3IpXG4gICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChvLmJvcmRlckNvbG9yID1cbiAgICAgICAgICAgICAgICAgICAgICBuLmhvdmVyQm9yZGVyQ29sb3IgfHxcbiAgICAgICAgICAgICAgICAgICAgICBhLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucG9pbnRIb3ZlckJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0SG92ZXJDb2xvcihvLmJvcmRlckNvbG9yKVxuICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAoby5ib3JkZXJXaWR0aCA9XG4gICAgICAgICAgICAgICAgICAgICAgbi5ob3ZlckJvcmRlcldpZHRoIHx8XG4gICAgICAgICAgICAgICAgICAgICAgYS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnBvaW50SG92ZXJCb3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICBvLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVIb3ZlclN0eWxlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gZS5jaGFydC5kYXRhLmRhdGFzZXRzW3QuX2RhdGFzZXRJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0Ll9pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbyA9IHQuY3VzdG9tIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICByID0gdC5fbW9kZWw7XG4gICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGkucmFkaXVzICYmXG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gaS5wb2ludFJhZGl1cyAmJlxuICAgICAgICAgICAgICAgICAgICAoaS5wb2ludFJhZGl1cyA9IGkucmFkaXVzKSxcbiAgICAgICAgICAgICAgICAgICAgKHIucmFkaXVzID1cbiAgICAgICAgICAgICAgICAgICAgICBvLnJhZGl1cyB8fFxuICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgaS5wb2ludFJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQucmFkaXVzXG4gICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChyLmJhY2tncm91bmRDb2xvciA9IGUuZ2V0UG9pbnRCYWNrZ3JvdW5kQ29sb3IodCwgbikpLFxuICAgICAgICAgICAgICAgICAgICAoci5ib3JkZXJDb2xvciA9IGUuZ2V0UG9pbnRCb3JkZXJDb2xvcih0LCBuKSksXG4gICAgICAgICAgICAgICAgICAgIChyLmJvcmRlcldpZHRoID0gZS5nZXRQb2ludEJvcmRlcldpZHRoKHQsIG4pKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMTk6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmhlbHBlcnM7XG4gICAgICAgICAgICAodC5kZWZhdWx0cy5wb2xhckFyZWEgPSB7XG4gICAgICAgICAgICAgIHNjYWxlOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJyYWRpYWxMaW5lYXJcIixcbiAgICAgICAgICAgICAgICBsaW5lQXJjOiAhMCxcbiAgICAgICAgICAgICAgICB0aWNrczogeyBiZWdpbkF0WmVybzogITAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYW5pbWF0aW9uOiB7IGFuaW1hdGVSb3RhdGU6ICEwLCBhbmltYXRlU2NhbGU6ICEwIH0sXG4gICAgICAgICAgICAgIHN0YXJ0QW5nbGU6IC0wLjUgKiBNYXRoLlBJLFxuICAgICAgICAgICAgICBhc3BlY3RSYXRpbzogMSxcbiAgICAgICAgICAgICAgbGVnZW5kQ2FsbGJhY2s6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSBbXTtcbiAgICAgICAgICAgICAgICBlLnB1c2goJzx1bCBjbGFzc05hbWU9XCInICsgdC5pZCArICctbGVnZW5kXCI+Jyk7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0LmRhdGEsXG4gICAgICAgICAgICAgICAgICBpID0gYS5kYXRhc2V0cyxcbiAgICAgICAgICAgICAgICAgIG4gPSBhLmxhYmVscztcbiAgICAgICAgICAgICAgICBpZiAoaS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gMDsgbyA8IGlbMF0uZGF0YS5sZW5ndGg7ICsrbylcbiAgICAgICAgICAgICAgICAgICAgZS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICc8bGk+PHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgaVswXS5iYWNrZ3JvdW5kQ29sb3Jbb10gK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1wiPjwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgbltvXSAmJiBlLnB1c2gobltvXSksXG4gICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKFwiPC9saT5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUucHVzaChcIjwvdWw+XCIpLCBlLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVMYWJlbHM6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gdC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5sYWJlbHMubGVuZ3RoICYmIGEuZGF0YXNldHMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgPyBhLmxhYmVscy5tYXAoZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0LmdldERhdGFzZXRNZXRhKDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBhLmRhdGFzZXRzWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBvLmRhdGFbbl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IGwuY3VzdG9tIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gdC5vcHRpb25zLmVsZW1lbnRzLmFyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gcy5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcy5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZChyLmJhY2tncm91bmRDb2xvciwgbiwgdS5iYWNrZ3JvdW5kQ29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSBzLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHMuYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZChyLmJvcmRlckNvbG9yLCBuLCB1LmJvcmRlckNvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gcy5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQoci5ib3JkZXJXaWR0aCwgbiwgdS5ib3JkZXJXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IGMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiBmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbjogaXNOYU4oci5kYXRhW25dKSB8fCBvLmRhdGFbbl0uaGlkZGVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgICAgbyA9IGUuaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLmNoYXJ0O1xuICAgICAgICAgICAgICAgICAgZm9yIChhID0gMCwgaSA9IChyLmRhdGEuZGF0YXNldHMgfHwgW10pLmxlbmd0aDsgaSA+IGE7ICsrYSlcbiAgICAgICAgICAgICAgICAgICAgKG4gPSByLmdldERhdGFzZXRNZXRhKGEpKSxcbiAgICAgICAgICAgICAgICAgICAgICAobi5kYXRhW29dLmhpZGRlbiA9ICFuLmRhdGFbb10uaGlkZGVuKTtcbiAgICAgICAgICAgICAgICAgIHIudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5sYWJlbHNbdC5pbmRleF0gKyBcIjogXCIgKyB0LnlMYWJlbDtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5jb250cm9sbGVycy5wb2xhckFyZWEgPSB0LkRhdGFzZXRDb250cm9sbGVyLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiB0LmVsZW1lbnRzLkFyYyxcbiAgICAgICAgICAgICAgICBsaW5rU2NhbGVzOiBlLm5vb3AsXG4gICAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gYS5jaGFydCxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkuY2hhcnRBcmVhLFxuICAgICAgICAgICAgICAgICAgICBvID0gYS5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIHIgPSBpLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGwgPSByLmVsZW1lbnRzLmFyYyxcbiAgICAgICAgICAgICAgICAgICAgcyA9IE1hdGgubWluKG4ucmlnaHQgLSBuLmxlZnQsIG4uYm90dG9tIC0gbi50b3ApO1xuICAgICAgICAgICAgICAgICAgKGkub3V0ZXJSYWRpdXMgPSBNYXRoLm1heCgocyAtIGwuYm9yZGVyV2lkdGggLyAyKSAvIDIsIDApKSxcbiAgICAgICAgICAgICAgICAgICAgKGkuaW5uZXJSYWRpdXMgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICByLmN1dG91dFBlcmNlbnRhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKGkub3V0ZXJSYWRpdXMgLyAxMDApICogci5jdXRvdXRQZXJjZW50YWdlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKGkucmFkaXVzTGVuZ3RoID1cbiAgICAgICAgICAgICAgICAgICAgICAoaS5vdXRlclJhZGl1cyAtIGkuaW5uZXJSYWRpdXMpIC9cbiAgICAgICAgICAgICAgICAgICAgICBpLmdldFZpc2libGVEYXRhc2V0Q291bnQoKSksXG4gICAgICAgICAgICAgICAgICAgIChhLm91dGVyUmFkaXVzID0gaS5vdXRlclJhZGl1cyAtIGkucmFkaXVzTGVuZ3RoICogYS5pbmRleCksXG4gICAgICAgICAgICAgICAgICAgIChhLmlubmVyUmFkaXVzID0gYS5vdXRlclJhZGl1cyAtIGkucmFkaXVzTGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uY291bnQgPSBhLmNvdW50VmlzaWJsZUVsZW1lbnRzKCkpLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2goby5kYXRhLCBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgIGEudXBkYXRlRWxlbWVudChlLCBpLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGVFbGVtZW50OiBmdW5jdGlvbiAodCwgYSwgaSkge1xuICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgIG8gPSBuLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICAgIHIgPSBuLmdldERhdGFzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgICBsID0gby5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgIHMgPSBsLmFuaW1hdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICBkID0gby5zY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICB1ID0gZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgYyA9IG8uZGF0YS5sYWJlbHMsXG4gICAgICAgICAgICAgICAgICAgICAgaCA9IG4uY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZShyLmRhdGFbYV0pLFxuICAgICAgICAgICAgICAgICAgICAgIGYgPSBkLnhDZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgZyA9IGQueUNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICBwID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICBtID0gbi5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgICAgYiA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGEgPiBiO1xuICAgICAgICAgICAgICAgICAgICArK2JcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgaXNOYU4oci5kYXRhW2JdKSB8fCBtLmRhdGFbYl0uaGlkZGVuIHx8ICsrcDtcbiAgICAgICAgICAgICAgICAgIHZhciB2ID0gbC5zdGFydEFuZ2xlLFxuICAgICAgICAgICAgICAgICAgICB4ID0gdC5oaWRkZW5cbiAgICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgICA6IGQuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUoci5kYXRhW2FdKSxcbiAgICAgICAgICAgICAgICAgICAgeSA9IHYgKyBoICogcCxcbiAgICAgICAgICAgICAgICAgICAgayA9IHkgKyAodC5oaWRkZW4gPyAwIDogaCksXG4gICAgICAgICAgICAgICAgICAgIFMgPSBzLmFuaW1hdGVTY2FsZVxuICAgICAgICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgICAgICAgIDogZC5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShyLmRhdGFbYV0pO1xuICAgICAgICAgICAgICAgICAgZS5leHRlbmQodCwge1xuICAgICAgICAgICAgICAgICAgICBfZGF0YXNldEluZGV4OiBuLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICBfaW5kZXg6IGEsXG4gICAgICAgICAgICAgICAgICAgIF9zY2FsZTogZCxcbiAgICAgICAgICAgICAgICAgICAgX21vZGVsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgeDogZixcbiAgICAgICAgICAgICAgICAgICAgICB5OiBnLFxuICAgICAgICAgICAgICAgICAgICAgIGlubmVyUmFkaXVzOiAwLFxuICAgICAgICAgICAgICAgICAgICAgIG91dGVyUmFkaXVzOiBpID8gUyA6IHgsXG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogaSAmJiBzLmFuaW1hdGVSb3RhdGUgPyB2IDogeSxcbiAgICAgICAgICAgICAgICAgICAgICBlbmRBbmdsZTogaSAmJiBzLmFuaW1hdGVSb3RhdGUgPyB2IDogayxcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogdShjLCBhLCBjW2FdKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuLnJlbW92ZUhvdmVyU3R5bGUodCksXG4gICAgICAgICAgICAgICAgICAgIHQucGl2b3QoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZUhvdmVyU3R5bGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICB0LkRhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5yZW1vdmVIb3ZlclN0eWxlLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5hcmNcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb3VudFZpc2libGVFbGVtZW50czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmdldERhdGFzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHRoaXMuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChhLmRhdGEsIGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaXNOYU4odC5kYXRhW2FdKSB8fCBlLmhpZGRlbiB8fCBpKys7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5nZXRNZXRhKCkuY291bnQ7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZSA+IDAgJiYgIWlzTmFOKHQpID8gKDIgKiBNYXRoLlBJKSAvIGUgOiAwO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAyMDogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycztcbiAgICAgICAgICAgICh0LmRlZmF1bHRzLnJhZGFyID0ge1xuICAgICAgICAgICAgICBhc3BlY3RSYXRpbzogMSxcbiAgICAgICAgICAgICAgc2NhbGU6IHsgdHlwZTogXCJyYWRpYWxMaW5lYXJcIiB9LFxuICAgICAgICAgICAgICBlbGVtZW50czogeyBsaW5lOiB7IHRlbnNpb246IDAgfSB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICh0LmNvbnRyb2xsZXJzLnJhZGFyID0gdC5EYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogdC5lbGVtZW50cy5MaW5lLFxuICAgICAgICAgICAgICAgIGRhdGFFbGVtZW50VHlwZTogdC5lbGVtZW50cy5Qb2ludCxcbiAgICAgICAgICAgICAgICBsaW5rU2NhbGVzOiBlLm5vb3AsXG4gICAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gYS5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLmRhdGFzZXQsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBpLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBuLmN1c3RvbSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IGEuZ2V0RGF0YXNldCgpLFxuICAgICAgICAgICAgICAgICAgICBzID0gYS5jaGFydC5vcHRpb25zLmVsZW1lbnRzLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGQgPSBhLmNoYXJ0LnNjYWxlO1xuICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBsLnRlbnNpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBsLmxpbmVUZW5zaW9uICYmXG4gICAgICAgICAgICAgICAgICAgIChsLmxpbmVUZW5zaW9uID0gbC50ZW5zaW9uKSxcbiAgICAgICAgICAgICAgICAgICAgZS5leHRlbmQoaS5kYXRhc2V0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgX2RhdGFzZXRJbmRleDogYS5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICBfY2hpbGRyZW46IG8sXG4gICAgICAgICAgICAgICAgICAgICAgX2xvb3A6ICEwLFxuICAgICAgICAgICAgICAgICAgICAgIF9tb2RlbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVuc2lvbjogci50ZW5zaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gci50ZW5zaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZU9yRGVmYXVsdChsLmxpbmVUZW5zaW9uLCBzLnRlbnNpb24pLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiByLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHIuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogbC5iYWNrZ3JvdW5kQ29sb3IgfHwgcy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogci5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHIuYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsLmJvcmRlcldpZHRoIHx8IHMuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogci5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHIuYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsLmJvcmRlckNvbG9yIHx8IHMuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiByLmZpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyByLmZpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiB2b2lkIDAgIT09IGwuZmlsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IGwuZmlsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IHMuZmlsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNhcFN0eWxlOiByLmJvcmRlckNhcFN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gci5ib3JkZXJDYXBTdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGwuYm9yZGVyQ2FwU3R5bGUgfHwgcy5ib3JkZXJDYXBTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckRhc2g6IHIuYm9yZGVyRGFzaFxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHIuYm9yZGVyRGFzaFxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGwuYm9yZGVyRGFzaCB8fCBzLmJvcmRlckRhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiByLmJvcmRlckRhc2hPZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyByLmJvcmRlckRhc2hPZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsLmJvcmRlckRhc2hPZmZzZXQgfHwgcy5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVySm9pblN0eWxlOiByLmJvcmRlckpvaW5TdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHIuYm9yZGVySm9pblN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogbC5ib3JkZXJKb2luU3R5bGUgfHwgcy5ib3JkZXJKb2luU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVRvcDogZC50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZUJvdHRvbTogZC5ib3R0b20sXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVplcm86IGQuZ2V0QmFzZVBvc2l0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGkuZGF0YXNldC5waXZvdCgpLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2goXG4gICAgICAgICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYS51cGRhdGVFbGVtZW50KGUsIGksIHQpO1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBhLnVwZGF0ZUJlemllckNvbnRyb2xQb2ludHMoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnQ6IGZ1bmN0aW9uICh0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0LmN1c3RvbSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgciA9IG4uZ2V0RGF0YXNldCgpLFxuICAgICAgICAgICAgICAgICAgICBsID0gbi5jaGFydC5zY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IG4uY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludCxcbiAgICAgICAgICAgICAgICAgICAgZCA9IGwuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGEsIHIuZGF0YVthXSk7XG4gICAgICAgICAgICAgICAgICBlLmV4dGVuZCh0LCB7XG4gICAgICAgICAgICAgICAgICAgIF9kYXRhc2V0SW5kZXg6IG4uaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIF9pbmRleDogYSxcbiAgICAgICAgICAgICAgICAgICAgX3NjYWxlOiBsLFxuICAgICAgICAgICAgICAgICAgICBfbW9kZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICB4OiBpID8gbC54Q2VudGVyIDogZC54LFxuICAgICAgICAgICAgICAgICAgICAgIHk6IGkgPyBsLnlDZW50ZXIgOiBkLnksXG4gICAgICAgICAgICAgICAgICAgICAgdGVuc2lvbjogby50ZW5zaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG8udGVuc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIudGVuc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMubGluZS50ZW5zaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBvLnJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBvLnJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnBvaW50UmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5yYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG8uYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG8uYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIucG9pbnRCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBvLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG8uYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5wb2ludEJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiBvLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG8uYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5wb2ludEJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IG8ucG9pbnRTdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvLnBvaW50U3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5wb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5wb2ludFN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgaGl0UmFkaXVzOiBvLmhpdFJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBvLmhpdFJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByLmhpdFJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuaGl0UmFkaXVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgKHQuX21vZGVsLnNraXAgPSBvLnNraXBcbiAgICAgICAgICAgICAgICAgICAgICA/IG8uc2tpcFxuICAgICAgICAgICAgICAgICAgICAgIDogaXNOYU4odC5fbW9kZWwueCkgfHwgaXNOYU4odC5fbW9kZWwueSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmNoYXJ0LmNoYXJ0QXJlYSxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHRoaXMuZ2V0TWV0YSgpO1xuICAgICAgICAgICAgICAgICAgZS5lYWNoKGEuZGF0YSwgZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBpLl9tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICByID0gZS5zcGxpbmVDdXJ2ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmlvdXNJdGVtKGEuZGF0YSwgbiwgITApLl9tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgICAgICBlLm5leHRJdGVtKGEuZGF0YSwgbiwgITApLl9tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8udGVuc2lvblxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIChvLmNvbnRyb2xQb2ludFByZXZpb3VzWCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWluKHIucHJldmlvdXMueCwgdC5yaWdodCksXG4gICAgICAgICAgICAgICAgICAgICAgdC5sZWZ0XG4gICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgIChvLmNvbnRyb2xQb2ludFByZXZpb3VzWSA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oci5wcmV2aW91cy55LCB0LmJvdHRvbSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnRvcFxuICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgIChvLmNvbnRyb2xQb2ludE5leHRYID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbihyLm5leHQueCwgdC5yaWdodCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmxlZnRcbiAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAoby5jb250cm9sUG9pbnROZXh0WSA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oci5uZXh0LnksIHQuYm90dG9tKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHQudG9wXG4gICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgaS5waXZvdCgpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQgfHwgMTtcbiAgICAgICAgICAgICAgICAgIGUuZWFjaChhLmRhdGEsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHQudHJhbnNpdGlvbihpKTtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBhLmRhdGFzZXQudHJhbnNpdGlvbihpKS5kcmF3KCksXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChhLmRhdGEsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdC5kcmF3KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0SG92ZXJTdHlsZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3QuX2RhdGFzZXRJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0LmN1c3RvbSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHQuX2luZGV4LFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5fbW9kZWw7XG4gICAgICAgICAgICAgICAgICAoby5yYWRpdXMgPSBpLmhvdmVyUmFkaXVzXG4gICAgICAgICAgICAgICAgICAgID8gaS5ob3ZlclJhZGl1c1xuICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5wb2ludEhvdmVyUmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludC5ob3ZlclJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAoby5iYWNrZ3JvdW5kQ29sb3IgPSBpLmhvdmVyQmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyBpLmhvdmVyQmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5wb2ludEhvdmVyQmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlLmdldEhvdmVyQ29sb3Ioby5iYWNrZ3JvdW5kQ29sb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uYm9yZGVyQ29sb3IgPSBpLmhvdmVyQm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA/IGkuaG92ZXJCb3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEucG9pbnRIb3ZlckJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlLmdldEhvdmVyQ29sb3Ioby5ib3JkZXJDb2xvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAoby5ib3JkZXJXaWR0aCA9IGkuaG92ZXJCb3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgID8gaS5ob3ZlckJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5wb2ludEhvdmVyQm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8uYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlSG92ZXJTdHlsZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3QuX2RhdGFzZXRJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0LmN1c3RvbSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHQuX2luZGV4LFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5fbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQ7XG4gICAgICAgICAgICAgICAgICAoby5yYWRpdXMgPSBpLnJhZGl1c1xuICAgICAgICAgICAgICAgICAgICA/IGkucmFkaXVzXG4gICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoYS5yYWRpdXMsIG4sIHIucmFkaXVzKSksXG4gICAgICAgICAgICAgICAgICAgIChvLmJhY2tncm91bmRDb2xvciA9IGkuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyBpLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEucG9pbnRCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHIuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uYm9yZGVyQ29sb3IgPSBpLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyBpLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5wb2ludEJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uYm9yZGVyV2lkdGggPSBpLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgPyBpLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5wb2ludEJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMjE6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmhlbHBlcnM7XG4gICAgICAgICAgICAodC5kZWZhdWx0cy5nbG9iYWwuYW5pbWF0aW9uID0ge1xuICAgICAgICAgICAgICBkdXJhdGlvbjogMWUzLFxuICAgICAgICAgICAgICBlYXNpbmc6IFwiZWFzZU91dFF1YXJ0XCIsXG4gICAgICAgICAgICAgIG9uUHJvZ3Jlc3M6IGUubm9vcCxcbiAgICAgICAgICAgICAgb25Db21wbGV0ZTogZS5ub29wLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICh0LkFuaW1hdGlvbiA9IHQuRWxlbWVudC5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGVwOiBudWxsLFxuICAgICAgICAgICAgICAgIG51bVN0ZXBzOiA2MCxcbiAgICAgICAgICAgICAgICBlYXNpbmc6IFwiXCIsXG4gICAgICAgICAgICAgICAgcmVuZGVyOiBudWxsLFxuICAgICAgICAgICAgICAgIG9uQW5pbWF0aW9uUHJvZ3Jlc3M6IG51bGwsXG4gICAgICAgICAgICAgICAgb25BbmltYXRpb25Db21wbGV0ZTogbnVsbCxcbiAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAodC5hbmltYXRpb25TZXJ2aWNlID0ge1xuICAgICAgICAgICAgICAgIGZyYW1lRHVyYXRpb246IDE3LFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnM6IFtdLFxuICAgICAgICAgICAgICAgIGRyb3BGcmFtZXM6IDAsXG4gICAgICAgICAgICAgICAgcmVxdWVzdDogbnVsbCxcbiAgICAgICAgICAgICAgICBhZGRBbmltYXRpb246IGZ1bmN0aW9uICh0LCBlLCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICBpIHx8ICh0LmFuaW1hdGluZyA9ICEwKTtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIG8gPSAwOyBvIDwgbi5hbmltYXRpb25zLmxlbmd0aDsgKytvKVxuICAgICAgICAgICAgICAgICAgICBpZiAobi5hbmltYXRpb25zW29dLmNoYXJ0SW5zdGFuY2UgPT09IHQpXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKG4uYW5pbWF0aW9uc1tvXS5hbmltYXRpb25PYmplY3QgPSBlKTtcbiAgICAgICAgICAgICAgICAgIG4uYW5pbWF0aW9ucy5wdXNoKHsgY2hhcnRJbnN0YW5jZTogdCwgYW5pbWF0aW9uT2JqZWN0OiBlIH0pLFxuICAgICAgICAgICAgICAgICAgICAxID09PSBuLmFuaW1hdGlvbnMubGVuZ3RoICYmIG4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYW5jZWxBbmltYXRpb246IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IGUuZmluZEluZGV4KHRoaXMuYW5pbWF0aW9ucywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuY2hhcnRJbnN0YW5jZSA9PT0gdDtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgLTEgIT09IGEgJiZcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuYW5pbWF0aW9ucy5zcGxpY2UoYSwgMSksICh0LmFuaW1hdGluZyA9ICExKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIG51bGwgPT09IHQucmVxdWVzdCAmJlxuICAgICAgICAgICAgICAgICAgICAodC5yZXF1ZXN0ID0gZS5yZXF1ZXN0QW5pbUZyYW1lLmNhbGwod2luZG93LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgKHQucmVxdWVzdCA9IG51bGwpLCB0LnN0YXJ0RGlnZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0YXJ0RGlnZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGUgPSBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICBhID0gMDtcbiAgICAgICAgICAgICAgICAgIHQuZHJvcEZyYW1lcyA+IDEgJiZcbiAgICAgICAgICAgICAgICAgICAgKChhID0gTWF0aC5mbG9vcih0LmRyb3BGcmFtZXMpKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuZHJvcEZyYW1lcyA9IHQuZHJvcEZyYW1lcyAlIDEpKTtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdC5hbmltYXRpb25zLmxlbmd0aDsgKVxuICAgICAgICAgICAgICAgICAgICBudWxsID09PSB0LmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0LmN1cnJlbnRTdGVwICYmXG4gICAgICAgICAgICAgICAgICAgICAgKHQuYW5pbWF0aW9uc1tpXS5hbmltYXRpb25PYmplY3QuY3VycmVudFN0ZXAgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5jdXJyZW50U3RlcCArPSAxICsgYSksXG4gICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5jdXJyZW50U3RlcCA+XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0Lm51bVN0ZXBzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAodC5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5jdXJyZW50U3RlcCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9uc1tpXS5hbmltYXRpb25PYmplY3QubnVtU3RlcHMpLFxuICAgICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9uc1tpXS5hbmltYXRpb25PYmplY3QucmVuZGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zW2ldLmNoYXJ0SW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0Lm9uQW5pbWF0aW9uUHJvZ3Jlc3MgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9uc1tpXS5hbmltYXRpb25PYmplY3Qub25BbmltYXRpb25Qcm9ncmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAuY2FsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgICAgICBdLmFuaW1hdGlvbk9iamVjdC5vbkFuaW1hdGlvblByb2dyZXNzLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9uc1tpXS5jaGFydEluc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvbnNbaV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5jdXJyZW50U3RlcCA9PT1cbiAgICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0Lm51bVN0ZXBzXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICh0LmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uQW5pbWF0aW9uQ29tcGxldGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0Lm9uQW5pbWF0aW9uQ29tcGxldGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uYW5pbWF0aW9uT2JqZWN0Lm9uQW5pbWF0aW9uQ29tcGxldGUuY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9uc1tpXS5jaGFydEluc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zW2ldXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHQuYW5pbWF0aW9uc1tpXS5jaGFydEluc3RhbmNlLmFuaW1hdGluZyA9ICExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zLnNwbGljZShpLCAxKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKytpO1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICBvID0gKG4gLSBlKSAvIHQuZnJhbWVEdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICh0LmRyb3BGcmFtZXMgKz0gbyksXG4gICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9ucy5sZW5ndGggPiAwICYmIHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMjI6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSAodC5jYW52YXNIZWxwZXJzID0ge30pO1xuICAgICAgICAgICAgZS5kcmF3UG9pbnQgPSBmdW5jdGlvbiAodCwgZSwgYSwgaSwgbikge1xuICAgICAgICAgICAgICB2YXIgbywgciwgbCwgcywgZCwgdTtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgJiZcbiAgICAgICAgICAgICAgICAoKG8gPSBlLnRvU3RyaW5nKCkpLFxuICAgICAgICAgICAgICAgIFwiW29iamVjdCBIVE1MSW1hZ2VFbGVtZW50XVwiID09PSBvIHx8XG4gICAgICAgICAgICAgICAgICBcIltvYmplY3QgSFRNTENhbnZhc0VsZW1lbnRdXCIgPT09IG8pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCB0LmRyYXdJbWFnZShlLCBpIC0gZS53aWR0aCAvIDIsIG4gLSBlLmhlaWdodCAvIDIpO1xuICAgICAgICAgICAgICBpZiAoIShpc05hTihhKSB8fCAwID49IGEpKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0LmJlZ2luUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgIHQuYXJjKGksIG4sIGEsIDAsIDIgKiBNYXRoLlBJKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmNsb3NlUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgIHQuZmlsbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0cmlhbmdsZVwiOlxuICAgICAgICAgICAgICAgICAgICB0LmJlZ2luUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgIChyID0gKDMgKiBhKSAvIE1hdGguc3FydCgzKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGQgPSAociAqIE1hdGguc3FydCgzKSkgLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICB0Lm1vdmVUbyhpIC0gciAvIDIsIG4gKyBkIC8gMyksXG4gICAgICAgICAgICAgICAgICAgICAgdC5saW5lVG8oaSArIHIgLyAyLCBuICsgZCAvIDMpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubGluZVRvKGksIG4gLSAoMiAqIGQpIC8gMyksXG4gICAgICAgICAgICAgICAgICAgICAgdC5jbG9zZVBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmZpbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwicmVjdFwiOlxuICAgICAgICAgICAgICAgICAgICAodSA9ICgxIC8gTWF0aC5TUVJUMikgKiBhKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmJlZ2luUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgIHQuZmlsbFJlY3QoaSAtIHUsIG4gLSB1LCAyICogdSwgMiAqIHUpLFxuICAgICAgICAgICAgICAgICAgICAgIHQuc3Ryb2tlUmVjdChpIC0gdSwgbiAtIHUsIDIgKiB1LCAyICogdSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcInJlY3RSb3RcIjpcbiAgICAgICAgICAgICAgICAgICAgKHUgPSAoMSAvIE1hdGguU1FSVDIpICogYSksXG4gICAgICAgICAgICAgICAgICAgICAgdC5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICB0Lm1vdmVUbyhpIC0gdSwgbiksXG4gICAgICAgICAgICAgICAgICAgICAgdC5saW5lVG8oaSwgbiArIHUpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubGluZVRvKGkgKyB1LCBuKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmxpbmVUbyhpLCBuIC0gdSksXG4gICAgICAgICAgICAgICAgICAgICAgdC5jbG9zZVBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmZpbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiY3Jvc3NcIjpcbiAgICAgICAgICAgICAgICAgICAgdC5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICB0Lm1vdmVUbyhpLCBuICsgYSksXG4gICAgICAgICAgICAgICAgICAgICAgdC5saW5lVG8oaSwgbiAtIGEpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubW92ZVRvKGkgLSBhLCBuKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmxpbmVUbyhpICsgYSwgbiksXG4gICAgICAgICAgICAgICAgICAgICAgdC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiY3Jvc3NSb3RcIjpcbiAgICAgICAgICAgICAgICAgICAgdC5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAobCA9IE1hdGguY29zKE1hdGguUEkgLyA0KSAqIGEpLFxuICAgICAgICAgICAgICAgICAgICAgIChzID0gTWF0aC5zaW4oTWF0aC5QSSAvIDQpICogYSksXG4gICAgICAgICAgICAgICAgICAgICAgdC5tb3ZlVG8oaSAtIGwsIG4gLSBzKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmxpbmVUbyhpICsgbCwgbiArIHMpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubW92ZVRvKGkgLSBsLCBuICsgcyksXG4gICAgICAgICAgICAgICAgICAgICAgdC5saW5lVG8oaSArIGwsIG4gLSBzKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdGFyXCI6XG4gICAgICAgICAgICAgICAgICAgIHQuYmVnaW5QYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgdC5tb3ZlVG8oaSwgbiArIGEpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubGluZVRvKGksIG4gLSBhKSxcbiAgICAgICAgICAgICAgICAgICAgICB0Lm1vdmVUbyhpIC0gYSwgbiksXG4gICAgICAgICAgICAgICAgICAgICAgdC5saW5lVG8oaSArIGEsIG4pLFxuICAgICAgICAgICAgICAgICAgICAgIChsID0gTWF0aC5jb3MoTWF0aC5QSSAvIDQpICogYSksXG4gICAgICAgICAgICAgICAgICAgICAgKHMgPSBNYXRoLnNpbihNYXRoLlBJIC8gNCkgKiBhKSxcbiAgICAgICAgICAgICAgICAgICAgICB0Lm1vdmVUbyhpIC0gbCwgbiAtIHMpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubGluZVRvKGkgKyBsLCBuICsgcyksXG4gICAgICAgICAgICAgICAgICAgICAgdC5tb3ZlVG8oaSAtIGwsIG4gKyBzKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmxpbmVUbyhpICsgbCwgbiAtIHMpLFxuICAgICAgICAgICAgICAgICAgICAgIHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImxpbmVcIjpcbiAgICAgICAgICAgICAgICAgICAgdC5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICB0Lm1vdmVUbyhpIC0gYSwgbiksXG4gICAgICAgICAgICAgICAgICAgICAgdC5saW5lVG8oaSArIGEsIG4pLFxuICAgICAgICAgICAgICAgICAgICAgIHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImRhc2hcIjpcbiAgICAgICAgICAgICAgICAgICAgdC5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICB0Lm1vdmVUbyhpLCBuKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmxpbmVUbyhpICsgYSwgbiksXG4gICAgICAgICAgICAgICAgICAgICAgdC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAyMzogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKHQsIGUpIHtcbiAgICAgICAgICAgICAgdmFyIGEgPSByLmdldFN0eWxlKHQsIGUpLFxuICAgICAgICAgICAgICAgIGkgPSBhICYmIGEubWF0Y2goLyhcXGQrKXB4Lyk7XG4gICAgICAgICAgICAgIHJldHVybiBpID8gTnVtYmVyKGlbMV0pIDogdm9pZCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYSh0LCBhKSB7XG4gICAgICAgICAgICAgIHZhciBpID0gdC5zdHlsZSxcbiAgICAgICAgICAgICAgICBuID0gdC5nZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiksXG4gICAgICAgICAgICAgICAgbyA9IHQuZ2V0QXR0cmlidXRlKFwid2lkdGhcIik7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoKHQuX2NoYXJ0anMgPSB7XG4gICAgICAgICAgICAgICAgICBpbml0aWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogbixcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG8sXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaS5kaXNwbGF5LFxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGkud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChpLmRpc3BsYXkgPSBpLmRpc3BsYXkgfHwgXCJibG9ja1wiKSxcbiAgICAgICAgICAgICAgICBudWxsID09PSBvIHx8IFwiXCIgPT09IG8pXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciByID0gZSh0LCBcIndpZHRoXCIpO1xuICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gciAmJiAodC53aWR0aCA9IHIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSBuIHx8IFwiXCIgPT09IG4pXG4gICAgICAgICAgICAgICAgaWYgKFwiXCIgPT09IHQuc3R5bGUuaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgdC5oZWlnaHQgPSB0LndpZHRoIC8gKGEub3B0aW9ucy5hc3BlY3RSYXRpbyB8fCAyKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhciBsID0gZSh0LCBcImhlaWdodFwiKTtcbiAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gciAmJiAodC5oZWlnaHQgPSBsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaSh0KSB7XG4gICAgICAgICAgICAgIGlmICh0Ll9jaGFydGpzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB0Ll9jaGFydGpzLmluaXRpYWw7XG4gICAgICAgICAgICAgICAgW1wiaGVpZ2h0XCIsIFwid2lkdGhcIl0uZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlW2FdO1xuICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBpIHx8IG51bGwgPT09IGlcbiAgICAgICAgICAgICAgICAgICAgPyB0LnJlbW92ZUF0dHJpYnV0ZShhKVxuICAgICAgICAgICAgICAgICAgICA6IHQuc2V0QXR0cmlidXRlKGEsIGkpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgci5lYWNoKGUuc3R5bGUgfHwge30sIGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgIHQuc3R5bGVbYV0gPSBlO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAodC53aWR0aCA9IHQud2lkdGgpLFxuICAgICAgICAgICAgICAgICAgZGVsZXRlIHQuX2NoYXJ0anM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG4odCwgZSkge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHRcbiAgICAgICAgICAgICAgICAgID8gKHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0KSlcbiAgICAgICAgICAgICAgICAgIDogdC5sZW5ndGggJiYgKHQgPSB0WzBdKSxcbiAgICAgICAgICAgICAgICB0ICYmIHQuY2FudmFzICYmICh0ID0gdC5jYW52YXMpLFxuICAgICAgICAgICAgICAgIHQgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudClcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0LmdldENvbnRleHQgJiYgdC5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW5zdGFuY2VvZiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHJldHVybiBhKHQsIGUpLCBpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbyhlKSB7XG4gICAgICAgICAgICAgIGUgPSBlIHx8IHt9O1xuICAgICAgICAgICAgICB2YXIgYSA9IChlLmRhdGEgPSBlLmRhdGEgfHwge30pO1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIChhLmRhdGFzZXRzID0gYS5kYXRhc2V0cyB8fCBbXSksXG4gICAgICAgICAgICAgICAgKGEubGFiZWxzID0gYS5sYWJlbHMgfHwgW10pLFxuICAgICAgICAgICAgICAgIChlLm9wdGlvbnMgPSByLmNvbmZpZ01lcmdlKFxuICAgICAgICAgICAgICAgICAgdC5kZWZhdWx0cy5nbG9iYWwsXG4gICAgICAgICAgICAgICAgICB0LmRlZmF1bHRzW2UudHlwZV0sXG4gICAgICAgICAgICAgICAgICBlLm9wdGlvbnMgfHwge31cbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgciA9IHQuaGVscGVycztcbiAgICAgICAgICAgICh0LnR5cGVzID0ge30pLFxuICAgICAgICAgICAgICAodC5pbnN0YW5jZXMgPSB7fSksXG4gICAgICAgICAgICAgICh0LmNvbnRyb2xsZXJzID0ge30pLFxuICAgICAgICAgICAgICAodC5Db250cm9sbGVyID0gZnVuY3Rpb24gKGUsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgYSA9IG8oYSk7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBuKGUsIGEpLFxuICAgICAgICAgICAgICAgICAgZCA9IHMgJiYgcy5jYW52YXMsXG4gICAgICAgICAgICAgICAgICB1ID0gZCAmJiBkLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgIGMgPSBkICYmIGQud2lkdGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIChpLmN0eCA9IHMpLFxuICAgICAgICAgICAgICAgICAgKGkuY2FudmFzID0gZCksXG4gICAgICAgICAgICAgICAgICAoaS5jb25maWcgPSBhKSxcbiAgICAgICAgICAgICAgICAgIChpLndpZHRoID0gYyksXG4gICAgICAgICAgICAgICAgICAoaS5oZWlnaHQgPSB1KSxcbiAgICAgICAgICAgICAgICAgIChpLmFzcGVjdFJhdGlvID0gdSA/IGMgLyB1IDogbnVsbCksXG4gICAgICAgICAgICAgICAgICAobC5pZCA9IHIudWlkKCkpLFxuICAgICAgICAgICAgICAgICAgKGwuY2hhcnQgPSBpKSxcbiAgICAgICAgICAgICAgICAgIChsLmNvbmZpZyA9IGEpLFxuICAgICAgICAgICAgICAgICAgKGwub3B0aW9ucyA9IGEub3B0aW9ucyksXG4gICAgICAgICAgICAgICAgICAobC5fYnVmZmVyZWRSZW5kZXIgPSAhMSksXG4gICAgICAgICAgICAgICAgICAodC5pbnN0YW5jZXNbbC5pZF0gPSBsKSxcbiAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsLCBcImRhdGFcIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbC5jb25maWcuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgcyAmJiBkXG4gICAgICAgICAgICAgICAgICAgID8gKHIucmV0aW5hU2NhbGUoaSksXG4gICAgICAgICAgICAgICAgICAgICAgbC5vcHRpb25zLnJlc3BvbnNpdmUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChyLmFkZFJlc2l6ZUxpc3RlbmVyKGQucGFyZW50Tm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBsLnJlc2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBsLnJlc2l6ZSghMCkpLFxuICAgICAgICAgICAgICAgICAgICAgIGwuaW5pdGlhbGl6ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgIGwpXG4gICAgICAgICAgICAgICAgICAgIDogKGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkZhaWxlZCB0byBjcmVhdGUgY2hhcnQ6IGNhbid0IGFjcXVpcmUgY29udGV4dCBmcm9tIHRoZSBnaXZlbiBpdGVtXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIGwpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHIuZXh0ZW5kKHQuQ29udHJvbGxlci5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICB0LnBsdWdpbnMubm90aWZ5KFwiYmVmb3JlSW5pdFwiLCBbZV0pLFxuICAgICAgICAgICAgICAgICAgICBlLmJpbmRFdmVudHMoKSxcbiAgICAgICAgICAgICAgICAgICAgZS5lbnN1cmVTY2FsZXNIYXZlSURzKCksXG4gICAgICAgICAgICAgICAgICAgIGUuYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCksXG4gICAgICAgICAgICAgICAgICAgIGUuYnVpbGRTY2FsZXMoKSxcbiAgICAgICAgICAgICAgICAgICAgZS51cGRhdGVMYXlvdXQoKSxcbiAgICAgICAgICAgICAgICAgICAgZS5yZXNldEVsZW1lbnRzKCksXG4gICAgICAgICAgICAgICAgICAgIGUuaW5pdFRvb2xUaXAoKSxcbiAgICAgICAgICAgICAgICAgICAgZS51cGRhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgdC5wbHVnaW5zLm5vdGlmeShcImFmdGVySW5pdFwiLCBbZV0pLFxuICAgICAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByLmNsZWFyKHRoaXMuY2hhcnQpLCB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuYW5pbWF0aW9uU2VydmljZS5jYW5jZWxBbmltYXRpb24odGhpcyksIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICBuID0gYS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBvID0gaS5jYW52YXMsXG4gICAgICAgICAgICAgICAgICAgIGwgPSAobi5tYWludGFpbkFzcGVjdFJhdGlvICYmIGkuYXNwZWN0UmF0aW8pIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHMgPSBNYXRoLmZsb29yKHIuZ2V0TWF4aW11bVdpZHRoKG8pKSxcbiAgICAgICAgICAgICAgICAgICAgZCA9IE1hdGguZmxvb3IobCA/IHMgLyBsIDogci5nZXRNYXhpbXVtSGVpZ2h0KG8pKTtcbiAgICAgICAgICAgICAgICAgIGlmIChpLndpZHRoICE9PSBzIHx8IGkuaGVpZ2h0ICE9PSBkKSB7XG4gICAgICAgICAgICAgICAgICAgIChvLndpZHRoID0gaS53aWR0aCA9IHMpLFxuICAgICAgICAgICAgICAgICAgICAgIChvLmhlaWdodCA9IGkuaGVpZ2h0ID0gZCksXG4gICAgICAgICAgICAgICAgICAgICAgKG8uc3R5bGUud2lkdGggPSBzICsgXCJweFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAoby5zdHlsZS5oZWlnaHQgPSBkICsgXCJweFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICByLnJldGluYVNjYWxlKGkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IHsgd2lkdGg6IHMsIGhlaWdodDogZCB9O1xuICAgICAgICAgICAgICAgICAgICB0LnBsdWdpbnMubm90aWZ5KFwicmVzaXplXCIsIFthLCB1XSksXG4gICAgICAgICAgICAgICAgICAgICAgYS5vcHRpb25zLm9uUmVzaXplICYmIGEub3B0aW9ucy5vblJlc2l6ZShhLCB1KSxcbiAgICAgICAgICAgICAgICAgICAgICBlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoYS5zdG9wKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBhLnVwZGF0ZShhLm9wdGlvbnMucmVzcG9uc2l2ZUFuaW1hdGlvbkR1cmF0aW9uKSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnN1cmVTY2FsZXNIYXZlSURzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgZSA9IHQuc2NhbGVzIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBhID0gdC5zY2FsZTtcbiAgICAgICAgICAgICAgICAgIHIuZWFjaChlLnhBeGVzLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICB0LmlkID0gdC5pZCB8fCBcIngtYXhpcy1cIiArIGU7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgci5lYWNoKGUueUF4ZXMsIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdC5pZCA9IHQuaWQgfHwgXCJ5LWF4aXMtXCIgKyBlO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgYSAmJiAoYS5pZCA9IGEuaWQgfHwgXCJzY2FsZVwiKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ1aWxkU2NhbGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGEgPSBlLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSAoZS5zY2FsZXMgPSB7fSksXG4gICAgICAgICAgICAgICAgICAgIG4gPSBbXTtcbiAgICAgICAgICAgICAgICAgIGEuc2NhbGVzICYmXG4gICAgICAgICAgICAgICAgICAgIChuID0gbi5jb25jYXQoXG4gICAgICAgICAgICAgICAgICAgICAgKGEuc2NhbGVzLnhBeGVzIHx8IFtdKS5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IG9wdGlvbnM6IHQsIGR0eXBlOiBcImNhdGVnb3J5XCIgfTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAoYS5zY2FsZXMueUF4ZXMgfHwgW10pLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgb3B0aW9uczogdCwgZHR5cGU6IFwibGluZWFyXCIgfTtcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgYS5zY2FsZSAmJlxuICAgICAgICAgICAgICAgICAgICAgIG4ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBhLnNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHR5cGU6IFwicmFkaWFsTGluZWFyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0RlZmF1bHQ6ICEwLFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICByLmVhY2gobiwgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGEub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSByLmdldFZhbHVlT3JEZWZhdWx0KG4udHlwZSwgYS5kdHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gdC5zY2FsZVNlcnZpY2UuZ2V0U2NhbGVDb25zdHJ1Y3RvcihvKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAobCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBuZXcgbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBuLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdHg6IGUuY2hhcnQuY3R4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydDogZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgKGlbcy5pZF0gPSBzKSwgYS5pc0RlZmF1bHQgJiYgKGUuc2NhbGUgPSBzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB0LnNjYWxlU2VydmljZS5hZGRTY2FsZXNUb0xheW91dCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUxheW91dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdC5sYXlvdXRTZXJ2aWNlLnVwZGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydC53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydC5oZWlnaHRcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidWlsZE9yVXBkYXRlQ29udHJvbGxlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgYSA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBpID0gW107XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIChyLmVhY2goXG4gICAgICAgICAgICAgICAgICAgICAgZS5kYXRhLmRhdGFzZXRzLFxuICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChuLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGUuZ2V0RGF0YXNldE1ldGEobyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByLnR5cGUgfHwgKHIudHlwZSA9IG4udHlwZSB8fCBlLmNvbmZpZy50eXBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5wdXNoKHIudHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHIuY29udHJvbGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gci5jb250cm9sbGVyLnVwZGF0ZUluZGV4KG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoKHIuY29udHJvbGxlciA9IG5ldyB0LmNvbnRyb2xsZXJzW3IudHlwZV0oZSwgbykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5wdXNoKHIuY29udHJvbGxlcikpO1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgZVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBhLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAxOyBuIDwgYS5sZW5ndGg7IG4rKylcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYVtuXSAhPT0gYVtuIC0gMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuaXNDb21ibyA9ICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXNldEVsZW1lbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICByLmVhY2goXG4gICAgICAgICAgICAgICAgICAgIHQuZGF0YS5kYXRhc2V0cyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0LmdldERhdGFzZXRNZXRhKGEpLmNvbnRyb2xsZXIucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0RWxlbWVudHMoKSwgdGhpcy50b29sdGlwLmluaXRpYWxpemUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIHQucGx1Z2lucy5ub3RpZnkoXCJiZWZvcmVVcGRhdGVcIiwgW2ldKSxcbiAgICAgICAgICAgICAgICAgICAgKGkudG9vbHRpcC5fZGF0YSA9IGkuZGF0YSk7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IGkuYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCk7XG4gICAgICAgICAgICAgICAgICByLmVhY2goXG4gICAgICAgICAgICAgICAgICAgIGkuZGF0YS5kYXRhc2V0cyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpLmdldERhdGFzZXRNZXRhKGUpLmNvbnRyb2xsZXIuYnVpbGRPclVwZGF0ZUVsZW1lbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHQubGF5b3V0U2VydmljZS51cGRhdGUoaSwgaS5jaGFydC53aWR0aCwgaS5jaGFydC5oZWlnaHQpLFxuICAgICAgICAgICAgICAgICAgICB0LnBsdWdpbnMubm90aWZ5KFwiYWZ0ZXJTY2FsZVVwZGF0ZVwiLCBbaV0pLFxuICAgICAgICAgICAgICAgICAgICByLmVhY2gobiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0LnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBpLnVwZGF0ZURhdGFzZXRzKCksXG4gICAgICAgICAgICAgICAgICAgIHQucGx1Z2lucy5ub3RpZnkoXCJhZnRlclVwZGF0ZVwiLCBbaV0pLFxuICAgICAgICAgICAgICAgICAgICBpLl9idWZmZXJlZFJlbmRlclxuICAgICAgICAgICAgICAgICAgICAgID8gKGkuX2J1ZmZlcmVkUmVxdWVzdCA9IHsgbGF6eTogYSwgZHVyYXRpb246IGUgfSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGkucmVuZGVyKGUsIGEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YXNldHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICBpID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIGlmICh0LnBsdWdpbnMubm90aWZ5KFwiYmVmb3JlRGF0YXNldHNVcGRhdGVcIiwgW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGUgPSAwLCBhID0gaS5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgYSA+IGU7ICsrZSlcbiAgICAgICAgICAgICAgICAgICAgICBpLmdldERhdGFzZXRNZXRhKGUpLmNvbnRyb2xsZXIudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHQucGx1Z2lucy5ub3RpZnkoXCJhZnRlckRhdGFzZXRzVXBkYXRlXCIsIFtpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICB0LnBsdWdpbnMubm90aWZ5KFwiYmVmb3JlUmVuZGVyXCIsIFtpXSk7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IGkub3B0aW9ucy5hbmltYXRpb247XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIG4gJiZcbiAgICAgICAgICAgICAgICAgICAgKChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBlICYmIDAgIT09IGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIGUgJiYgMCAhPT0gbi5kdXJhdGlvbikpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBuZXcgdC5BbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgKG8ubnVtU3RlcHMgPSAoZSB8fCBuLmR1cmF0aW9uKSAvIDE2LjY2KSxcbiAgICAgICAgICAgICAgICAgICAgICAoby5lYXNpbmcgPSBuLmVhc2luZyksXG4gICAgICAgICAgICAgICAgICAgICAgKG8ucmVuZGVyID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gci5lYXNpbmdFZmZlY3RzW2UuZWFzaW5nXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGUuY3VycmVudFN0ZXAgLyBlLm51bVN0ZXBzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gYShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZHJhdyhuLCBpLCBlLmN1cnJlbnRTdGVwKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAoby5vbkFuaW1hdGlvblByb2dyZXNzID0gbi5vblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICAgICAgICAoby5vbkFuaW1hdGlvbkNvbXBsZXRlID0gbi5vbkNvbXBsZXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvblNlcnZpY2UuYWRkQW5pbWF0aW9uKGksIG8sIGUsIGEpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGkuZHJhdygpLFxuICAgICAgICAgICAgICAgICAgICAgIG4gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ub25Db21wbGV0ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbi5vbkNvbXBsZXRlLmNhbGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ub25Db21wbGV0ZS5jYWxsKGkpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gZSB8fCAxO1xuICAgICAgICAgICAgICAgICAgYS5jbGVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0LnBsdWdpbnMubm90aWZ5KFwiYmVmb3JlRHJhd1wiLCBbYSwgaV0pLFxuICAgICAgICAgICAgICAgICAgICByLmVhY2goXG4gICAgICAgICAgICAgICAgICAgICAgYS5ib3hlcyxcbiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdC5kcmF3KGEuY2hhcnRBcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGFcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgYS5zY2FsZSAmJiBhLnNjYWxlLmRyYXcoKSxcbiAgICAgICAgICAgICAgICAgICAgdC5wbHVnaW5zLm5vdGlmeShcImJlZm9yZURhdGFzZXRzRHJhd1wiLCBbYSwgaV0pLFxuICAgICAgICAgICAgICAgICAgICByLmVhY2goXG4gICAgICAgICAgICAgICAgICAgICAgYS5kYXRhLmRhdGFzZXRzLFxuICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmlzRGF0YXNldFZpc2libGUoaSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5nZXREYXRhc2V0TWV0YShpKS5jb250cm9sbGVyLmRyYXcoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHQucGx1Z2lucy5ub3RpZnkoXCJhZnRlckRhdGFzZXRzRHJhd1wiLCBbYSwgaV0pLFxuICAgICAgICAgICAgICAgICAgICBhLnRvb2x0aXAudHJhbnNpdGlvbihpKS5kcmF3KCksXG4gICAgICAgICAgICAgICAgICAgIHQucGx1Z2lucy5ub3RpZnkoXCJhZnRlckRyYXdcIiwgW2EsIGldKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldEVsZW1lbnRBdEV2ZW50OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuSW50ZXJhY3Rpb24ubW9kZXMuc2luZ2xlKHRoaXMsIGUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0RWxlbWVudHNBdEV2ZW50OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuSW50ZXJhY3Rpb24ubW9kZXMubGFiZWwodGhpcywgZSwgeyBpbnRlcnNlY3Q6ICEwIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0RWxlbWVudHNBdFhBeGlzOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuSW50ZXJhY3Rpb24ubW9kZXNbXCJ4LWF4aXNcIl0odGhpcywgZSwge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Q6ICEwLFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlOiBmdW5jdGlvbiAoZSwgYSwgaSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0LkludGVyYWN0aW9uLm1vZGVzW2FdO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgbiA/IG4odGhpcywgZSwgaSkgOiBbXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldERhdGFzZXRBdEV2ZW50OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuSW50ZXJhY3Rpb24ubW9kZXMuZGF0YXNldCh0aGlzLCBlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldERhdGFzZXRNZXRhOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhID0gZS5kYXRhLmRhdGFzZXRzW3RdO1xuICAgICAgICAgICAgICAgICAgYS5fbWV0YSB8fCAoYS5fbWV0YSA9IHt9KTtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gYS5fbWV0YVtlLmlkXTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAoaSA9IGEuX21ldGFbZS5pZF0gPVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB4QXhpc0lEOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB5QXhpc0lEOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRWaXNpYmxlRGF0YXNldENvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IDAsIGUgPSAwLCBhID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgYSA+IGU7XG4gICAgICAgICAgICAgICAgICAgICsrZVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRGF0YXNldFZpc2libGUoZSkgJiYgdCsrO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpc0RhdGFzZXRWaXNpYmxlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmdldERhdGFzZXRNZXRhKHQpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYm9vbGVhblwiID09IHR5cGVvZiBlLmhpZGRlblxuICAgICAgICAgICAgICAgICAgICA/ICFlLmhpZGRlblxuICAgICAgICAgICAgICAgICAgICA6ICF0aGlzLmRhdGEuZGF0YXNldHNbdF0uaGlkZGVuO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVMZWdlbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGVnZW5kQ2FsbGJhY2sodGhpcyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgICAgbyA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGwgPSBvLmNoYXJ0LmNhbnZhcztcbiAgICAgICAgICAgICAgICAgIGZvciAoby5zdG9wKCksIGEgPSAwLCBuID0gby5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgbiA+IGE7ICsrYSlcbiAgICAgICAgICAgICAgICAgICAgKGUgPSBvLmdldERhdGFzZXRNZXRhKGEpKSxcbiAgICAgICAgICAgICAgICAgICAgICBlLmNvbnRyb2xsZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLmNvbnRyb2xsZXIuZGVzdHJveSgpLCAoZS5jb250cm9sbGVyID0gbnVsbCkpO1xuICAgICAgICAgICAgICAgICAgbCAmJlxuICAgICAgICAgICAgICAgICAgICAoci51bmJpbmRFdmVudHMobywgby5ldmVudHMpLFxuICAgICAgICAgICAgICAgICAgICByLnJlbW92ZVJlc2l6ZUxpc3RlbmVyKGwucGFyZW50Tm9kZSksXG4gICAgICAgICAgICAgICAgICAgIHIuY2xlYXIoby5jaGFydCksXG4gICAgICAgICAgICAgICAgICAgIGkobCksXG4gICAgICAgICAgICAgICAgICAgIChvLmNoYXJ0LmNhbnZhcyA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAoby5jaGFydC5jdHggPSBudWxsKSksXG4gICAgICAgICAgICAgICAgICAgIHQucGx1Z2lucy5ub3RpZnkoXCJkZXN0cm95XCIsIFtvXSksXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0Lmluc3RhbmNlc1tvLmlkXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvQmFzZTY0SW1hZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmNhbnZhcy50b0RhdGFVUkwuYXBwbHkoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQuY2FudmFzLFxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbml0VG9vbFRpcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgKGUudG9vbHRpcCA9IG5ldyB0LlRvb2x0aXAoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBfY2hhcnQ6IGUuY2hhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgX2NoYXJ0SW5zdGFuY2U6IGUsXG4gICAgICAgICAgICAgICAgICAgICAgX2RhdGE6IGUuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICBfb3B0aW9uczogZS5vcHRpb25zLnRvb2x0aXBzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgZS50b29sdGlwLmluaXRpYWxpemUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJpbmRFdmVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIHIuYmluZEV2ZW50cyh0LCB0Lm9wdGlvbnMuZXZlbnRzLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0LmV2ZW50SGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlSG92ZXJTdHlsZTogZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICByID0gYSA/IFwic2V0SG92ZXJTdHlsZVwiIDogXCJyZW1vdmVIb3ZlclN0eWxlXCI7XG4gICAgICAgICAgICAgICAgICBmb3IgKG4gPSAwLCBvID0gdC5sZW5ndGg7IG8gPiBuOyArK24pXG4gICAgICAgICAgICAgICAgICAgIChpID0gdFtuXSksXG4gICAgICAgICAgICAgICAgICAgICAgaSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXREYXRhc2V0TWV0YShpLl9kYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXJbcl0oaSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBldmVudEhhbmRsZXI6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGEgPSBlLmxlZ2VuZCxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGUudG9vbHRpcCxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGUub3B0aW9ucy5ob3ZlcjtcbiAgICAgICAgICAgICAgICAgIChlLl9idWZmZXJlZFJlbmRlciA9ICEwKSwgKGUuX2J1ZmZlcmVkUmVxdWVzdCA9IG51bGwpO1xuICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlLmhhbmRsZUV2ZW50KHQpO1xuICAgICAgICAgICAgICAgICAgKG8gfD0gYSAmJiBhLmhhbmRsZUV2ZW50KHQpKSwgKG8gfD0gaSAmJiBpLmhhbmRsZUV2ZW50KHQpKTtcbiAgICAgICAgICAgICAgICAgIHZhciByID0gZS5fYnVmZmVyZWRSZXF1ZXN0O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgclxuICAgICAgICAgICAgICAgICAgICAgID8gZS5yZW5kZXIoci5kdXJhdGlvbiwgci5sYXp5KVxuICAgICAgICAgICAgICAgICAgICAgIDogbyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIWUuYW5pbWF0aW5nICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5zdG9wKCksIGUucmVuZGVyKG4uYW5pbWF0aW9uRHVyYXRpb24sICEwKSksXG4gICAgICAgICAgICAgICAgICAgIChlLl9idWZmZXJlZFJlbmRlciA9ICExKSxcbiAgICAgICAgICAgICAgICAgICAgKGUuX2J1ZmZlcmVkUmVxdWVzdCA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGFuZGxlRXZlbnQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGEgPSBlLm9wdGlvbnMgfHwge30sXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLmhvdmVyLFxuICAgICAgICAgICAgICAgICAgICBuID0gITE7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAoZS5sYXN0QWN0aXZlID0gZS5sYXN0QWN0aXZlIHx8IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgXCJtb3VzZW91dFwiID09PSB0LnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICA/IChlLmFjdGl2ZSA9IFtdKVxuICAgICAgICAgICAgICAgICAgICAgIDogKGUuYWN0aXZlID0gZS5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKHQsIGkubW9kZSwgaSkpLFxuICAgICAgICAgICAgICAgICAgICBpLm9uSG92ZXIgJiYgaS5vbkhvdmVyLmNhbGwoZSwgZS5hY3RpdmUpLFxuICAgICAgICAgICAgICAgICAgICAoXCJtb3VzZXVwXCIgPT09IHQudHlwZSB8fCBcImNsaWNrXCIgPT09IHQudHlwZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICBhLm9uQ2xpY2sgJiZcbiAgICAgICAgICAgICAgICAgICAgICBhLm9uQ2xpY2suY2FsbChlLCB0LCBlLmFjdGl2ZSksXG4gICAgICAgICAgICAgICAgICAgIGUubGFzdEFjdGl2ZS5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgICBlLnVwZGF0ZUhvdmVyU3R5bGUoZS5sYXN0QWN0aXZlLCBpLm1vZGUsICExKSxcbiAgICAgICAgICAgICAgICAgICAgZS5hY3RpdmUubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgaS5tb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgZS51cGRhdGVIb3ZlclN0eWxlKGUuYWN0aXZlLCBpLm1vZGUsICEwKSxcbiAgICAgICAgICAgICAgICAgICAgKG4gPSAhci5hcnJheUVxdWFscyhlLmFjdGl2ZSwgZS5sYXN0QWN0aXZlKSksXG4gICAgICAgICAgICAgICAgICAgIChlLmxhc3RBY3RpdmUgPSBlLmFjdGl2ZSksXG4gICAgICAgICAgICAgICAgICAgIG5cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMjQ6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZSh0LCBlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0Ll9jaGFydGpzXG4gICAgICAgICAgICAgICAgPyB2b2lkIHQuX2NoYXJ0anMubGlzdGVuZXJzLnB1c2goZSlcbiAgICAgICAgICAgICAgICA6IChPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJfY2hhcnRqc1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeyBsaXN0ZW5lcnM6IFtlXSB9LFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICB2b2lkIG4uZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IFwib25EYXRhXCIgKyBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZS5zbGljZSgxKSxcbiAgICAgICAgICAgICAgICAgICAgICBuID0gdFtlXTtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBuLmFwcGx5KHRoaXMsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaS5lYWNoKHQuX2NoYXJ0anMubGlzdGVuZXJzLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdFthXSAmJiB0W2FdLmFwcGx5KHQsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGEodCwgZSkge1xuICAgICAgICAgICAgICB2YXIgYSA9IHQuX2NoYXJ0anM7XG4gICAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBhLmxpc3RlbmVycyxcbiAgICAgICAgICAgICAgICAgIG8gPSBpLmluZGV4T2YoZSk7XG4gICAgICAgICAgICAgICAgLTEgIT09IG8gJiYgaS5zcGxpY2UobywgMSksXG4gICAgICAgICAgICAgICAgICBpLmxlbmd0aCA+IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgKG4uZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0W2VdO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHQuX2NoYXJ0anMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IHQuaGVscGVycyxcbiAgICAgICAgICAgICAgbiA9IFtcInB1c2hcIiwgXCJwb3BcIiwgXCJzaGlmdFwiLCBcInNwbGljZVwiLCBcInVuc2hpZnRcIl07XG4gICAgICAgICAgICAodC5EYXRhc2V0Q29udHJvbGxlciA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZSh0LCBlKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBpLmV4dGVuZCh0LkRhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZSwge1xuICAgICAgICAgICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRhRWxlbWVudFR5cGU6IG51bGwsXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIChhLmNoYXJ0ID0gdCksIChhLmluZGV4ID0gZSksIGEubGlua1NjYWxlcygpLCBhLmFkZEVsZW1lbnRzKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGVJbmRleDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGlua1NjYWxlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBlID0gdC5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIGEgPSB0LmdldERhdGFzZXQoKTtcbiAgICAgICAgICAgICAgICAgIG51bGwgPT09IGUueEF4aXNJRCAmJlxuICAgICAgICAgICAgICAgICAgICAoZS54QXhpc0lEID1cbiAgICAgICAgICAgICAgICAgICAgICBhLnhBeGlzSUQgfHwgdC5jaGFydC5vcHRpb25zLnNjYWxlcy54QXhlc1swXS5pZCksXG4gICAgICAgICAgICAgICAgICAgIG51bGwgPT09IGUueUF4aXNJRCAmJlxuICAgICAgICAgICAgICAgICAgICAgIChlLnlBeGlzSUQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgYS55QXhpc0lEIHx8IHQuY2hhcnQub3B0aW9ucy5zY2FsZXMueUF4ZXNbMF0uaWQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0RGF0YXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1t0aGlzLmluZGV4XTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldE1ldGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0U2NhbGVGb3JJZDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LnNjYWxlc1t0XTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSghMCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLl9kYXRhICYmIGEodGhpcy5fZGF0YSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjcmVhdGVNZXRhRGF0YXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBlID0gdC5kYXRhc2V0RWxlbWVudFR5cGU7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBlICYmXG4gICAgICAgICAgICAgICAgICAgIG5ldyBlKHsgX2NoYXJ0OiB0LmNoYXJ0LmNoYXJ0LCBfZGF0YXNldEluZGV4OiB0LmluZGV4IH0pXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3JlYXRlTWV0YURhdGE6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGEgPSBlLmRhdGFFbGVtZW50VHlwZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGEgJiZcbiAgICAgICAgICAgICAgICAgICAgbmV3IGEoe1xuICAgICAgICAgICAgICAgICAgICAgIF9jaGFydDogZS5jaGFydC5jaGFydCxcbiAgICAgICAgICAgICAgICAgICAgICBfZGF0YXNldEluZGV4OiBlLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgIF9pbmRleDogdCxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZGRFbGVtZW50czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gYS5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIG4gPSBhLmdldERhdGFzZXQoKS5kYXRhIHx8IFtdLFxuICAgICAgICAgICAgICAgICAgICBvID0gaS5kYXRhO1xuICAgICAgICAgICAgICAgICAgZm9yICh0ID0gMCwgZSA9IG4ubGVuZ3RoOyBlID4gdDsgKyt0KVxuICAgICAgICAgICAgICAgICAgICBvW3RdID0gb1t0XSB8fCBhLmNyZWF0ZU1ldGFEYXRhKHQpO1xuICAgICAgICAgICAgICAgICAgaS5kYXRhc2V0ID0gaS5kYXRhc2V0IHx8IGEuY3JlYXRlTWV0YURhdGFzZXQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFkZEVsZW1lbnRBbmRSZXNldDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5jcmVhdGVNZXRhRGF0YSh0KTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0TWV0YSgpLmRhdGEuc3BsaWNlKHQsIDAsIGUpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoZSwgdCwgITApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnVpbGRPclVwZGF0ZUVsZW1lbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0LmdldERhdGFzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkuZGF0YSB8fCAoaS5kYXRhID0gW10pO1xuICAgICAgICAgICAgICAgICAgdC5fZGF0YSAhPT0gbiAmJlxuICAgICAgICAgICAgICAgICAgICAodC5fZGF0YSAmJiBhKHQuX2RhdGEsIHQpLCBlKG4sIHQpLCAodC5fZGF0YSA9IG4pKSxcbiAgICAgICAgICAgICAgICAgICAgdC5yZXN5bmNFbGVtZW50cygpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiBpLm5vb3AsXG4gICAgICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICBpID0gdCB8fCAxLFxuICAgICAgICAgICAgICAgICAgICBuID0gdGhpcy5nZXRNZXRhKCkuZGF0YTtcbiAgICAgICAgICAgICAgICAgIGZvciAoZSA9IDAsIGEgPSBuLmxlbmd0aDsgYSA+IGU7ICsrZSlcbiAgICAgICAgICAgICAgICAgICAgbltlXS50cmFuc2l0aW9uKGkpLmRyYXcoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZUhvdmVyU3R5bGU6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1t0Ll9kYXRhc2V0SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICBuID0gdC5faW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0LmN1c3RvbSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgciA9IGkuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICBsID0gdC5fbW9kZWw7XG4gICAgICAgICAgICAgICAgICAobC5iYWNrZ3JvdW5kQ29sb3IgPSBvLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICA/IG8uYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgIDogcihhLmJhY2tncm91bmRDb2xvciwgbiwgZS5iYWNrZ3JvdW5kQ29sb3IpKSxcbiAgICAgICAgICAgICAgICAgICAgKGwuYm9yZGVyQ29sb3IgPSBvLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyBvLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgOiByKGEuYm9yZGVyQ29sb3IsIG4sIGUuYm9yZGVyQ29sb3IpKSxcbiAgICAgICAgICAgICAgICAgICAgKGwuYm9yZGVyV2lkdGggPSBvLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgPyBvLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgOiByKGEuYm9yZGVyV2lkdGgsIG4sIGUuYm9yZGVyV2lkdGgpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1t0Ll9kYXRhc2V0SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICBhID0gdC5faW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0LmN1c3RvbSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGkuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICByID0gaS5nZXRIb3ZlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBsID0gdC5fbW9kZWw7XG4gICAgICAgICAgICAgICAgICAobC5iYWNrZ3JvdW5kQ29sb3IgPSBuLmhvdmVyQmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgID8gbi5ob3ZlckJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICA6IG8oZS5ob3ZlckJhY2tncm91bmRDb2xvciwgYSwgcihsLmJhY2tncm91bmRDb2xvcikpKSxcbiAgICAgICAgICAgICAgICAgICAgKGwuYm9yZGVyQ29sb3IgPSBuLmhvdmVyQm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA/IG4uaG92ZXJCb3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgIDogbyhlLmhvdmVyQm9yZGVyQ29sb3IsIGEsIHIobC5ib3JkZXJDb2xvcikpKSxcbiAgICAgICAgICAgICAgICAgICAgKGwuYm9yZGVyV2lkdGggPSBuLmhvdmVyQm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICA/IG4uaG92ZXJCb3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgIDogbyhlLmhvdmVyQm9yZGVyV2lkdGgsIGEsIGwuYm9yZGVyV2lkdGgpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlc3luY0VsZW1lbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0LmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHQuZ2V0RGF0YXNldCgpLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBlLmRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBuID0gYS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICBpID4gblxuICAgICAgICAgICAgICAgICAgICA/IGUuZGF0YS5zcGxpY2UobiwgaSAtIG4pXG4gICAgICAgICAgICAgICAgICAgIDogbiA+IGkgJiYgdC5pbnNlcnRFbGVtZW50cyhpLCBuIC0gaSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnNlcnRFbGVtZW50czogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSAwOyBlID4gYTsgKythKSB0aGlzLmFkZEVsZW1lbnRBbmRSZXNldCh0ICsgYSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkRhdGFQdXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmluc2VydEVsZW1lbnRzKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldERhdGFzZXQoKS5kYXRhLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkRhdGFQb3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0TWV0YSgpLmRhdGEucG9wKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkRhdGFTaGlmdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5nZXRNZXRhKCkuZGF0YS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25EYXRhU3BsaWNlOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5nZXRNZXRhKCkuZGF0YS5zcGxpY2UodCwgZSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0RWxlbWVudHModCwgYXJndW1lbnRzLmxlbmd0aCAtIDIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25EYXRhVW5zaGlmdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRFbGVtZW50cygwLCBhcmd1bWVudHMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKHQuRGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kID0gaS5pbmhlcml0cyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMjU6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmhlbHBlcnM7XG4gICAgICAgICAgICAodC5lbGVtZW50cyA9IHt9KSxcbiAgICAgICAgICAgICAgKHQuRWxlbWVudCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgZS5leHRlbmQodGhpcywgdCksIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgZS5leHRlbmQodC5FbGVtZW50LnByb3RvdHlwZSwge1xuICAgICAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZGVuID0gITE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwaXZvdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgdC5fdmlldyB8fCAodC5fdmlldyA9IGUuY2xvbmUodC5fbW9kZWwpKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuX3N0YXJ0ID0gZS5jbG9uZSh0Ll92aWV3KSksXG4gICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgYS5fdmlldyB8fCAoYS5fdmlldyA9IGUuY2xvbmUoYS5fbW9kZWwpKSxcbiAgICAgICAgICAgICAgICAgICAgMSA9PT0gdFxuICAgICAgICAgICAgICAgICAgICAgID8gKChhLl92aWV3ID0gYS5fbW9kZWwpLCAoYS5fc3RhcnQgPSBudWxsKSwgYSlcbiAgICAgICAgICAgICAgICAgICAgICA6IChhLl9zdGFydCB8fCBhLnBpdm90KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmVhY2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEuX21vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoaSwgbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIl9cIiA9PT0gblswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYS5fdmlldy5oYXNPd25Qcm9wZXJ0eShuKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBhLl92aWV3W25dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY29sb3IoYS5fbW9kZWxbbl0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWl4KGUuY29sb3IoYS5fc3RhcnRbbl0pLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLl92aWV3W25dID0gby5yZ2JTdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuX3ZpZXdbbl0gPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChcIm51bWJlclwiID09IHR5cGVvZiBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGEuX3N0YXJ0W25dICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOYU4oYS5fc3RhcnRbbl0pID09PSAhMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhLl9zdGFydFtuXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLl92aWV3W25dID0gKGEuX21vZGVsW25dIC0gbCkgKiB0ICsgbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBhLl92aWV3W25dID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm51bWJlclwiICE9IHR5cGVvZiBpIHx8IGlzTmFOKGEuX3ZpZXdbbl0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGEuX3ZpZXdbbl0gPSBpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChhLl92aWV3W25dID0gaSAqIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgYSlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwUG9zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IHRoaXMuX21vZGVsLngsIHk6IHRoaXMuX21vZGVsLnkgfTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhhc1ZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZS5pc051bWJlcih0aGlzLl9tb2RlbC54KSAmJiBlLmlzTnVtYmVyKHRoaXMuX21vZGVsLnkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5FbGVtZW50LmV4dGVuZCA9IGUuaW5oZXJpdHMpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDI2OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgdmFyIGkgPSB0KDMpO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdFxuICAgICAgICAgICAgICAgICAgPyAoKGkgPSBwYXJzZUludCh0LCAxMCkpLFxuICAgICAgICAgICAgICAgICAgICAtMSAhPT0gdC5pbmRleE9mKFwiJVwiKSAmJiAoaSA9IChpIC8gMTAwKSAqIGUucGFyZW50Tm9kZVthXSkpXG4gICAgICAgICAgICAgICAgICA6IChpID0gdCksXG4gICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYSh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgIT09IHQgJiYgbnVsbCAhPT0gdCAmJiBcIm5vbmVcIiAhPT0gdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG4odCwgaSwgbikge1xuICAgICAgICAgICAgICB2YXIgbyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LFxuICAgICAgICAgICAgICAgIHIgPSB0LnBhcmVudE5vZGUsXG4gICAgICAgICAgICAgICAgbCA9IG8uZ2V0Q29tcHV0ZWRTdHlsZSh0KVtpXSxcbiAgICAgICAgICAgICAgICBzID0gby5nZXRDb21wdXRlZFN0eWxlKHIpW2ldLFxuICAgICAgICAgICAgICAgIGQgPSBhKGwpLFxuICAgICAgICAgICAgICAgIHUgPSBhKHMpLFxuICAgICAgICAgICAgICAgIGMgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgICAgICAgIHJldHVybiBkIHx8IHVcbiAgICAgICAgICAgICAgICA/IE1hdGgubWluKGQgPyBlKGwsIHQsIG4pIDogYywgdSA/IGUocywgciwgbikgOiBjKVxuICAgICAgICAgICAgICAgIDogXCJub25lXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbyA9ICh0LmhlbHBlcnMgPSB7fSk7XG4gICAgICAgICAgICAoby5lYWNoID0gZnVuY3Rpb24gKHQsIGUsIGEsIGkpIHtcbiAgICAgICAgICAgICAgdmFyIG4sIHI7XG4gICAgICAgICAgICAgIGlmIChvLmlzQXJyYXkodCkpXG4gICAgICAgICAgICAgICAgaWYgKCgociA9IHQubGVuZ3RoKSwgaSkpXG4gICAgICAgICAgICAgICAgICBmb3IgKG4gPSByIC0gMTsgbiA+PSAwOyBuLS0pIGUuY2FsbChhLCB0W25dLCBuKTtcbiAgICAgICAgICAgICAgICBlbHNlIGZvciAobiA9IDA7IHIgPiBuOyBuKyspIGUuY2FsbChhLCB0W25dLCBuKTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgdCkge1xuICAgICAgICAgICAgICAgIHZhciBsID0gT2JqZWN0LmtleXModCk7XG4gICAgICAgICAgICAgICAgZm9yIChyID0gbC5sZW5ndGgsIG4gPSAwOyByID4gbjsgbisrKSBlLmNhbGwoYSwgdFtsW25dXSwgbFtuXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5jbG9uZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB7fTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgby5lYWNoKHQsIGZ1bmN0aW9uICh0LCBhKSB7XG4gICAgICAgICAgICAgICAgICAgIG8uaXNBcnJheSh0KVxuICAgICAgICAgICAgICAgICAgICAgID8gKGVbYV0gPSB0LnNsaWNlKDApKVxuICAgICAgICAgICAgICAgICAgICAgIDogXCJvYmplY3RcIiA9PSB0eXBlb2YgdCAmJiBudWxsICE9PSB0XG4gICAgICAgICAgICAgICAgICAgICAgPyAoZVthXSA9IG8uY2xvbmUodCkpXG4gICAgICAgICAgICAgICAgICAgICAgOiAoZVthXSA9IHQpO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmV4dGVuZCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0W2FdID0gZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYSA9IDEsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgaSA+IGE7XG4gICAgICAgICAgICAgICAgICBhKytcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBvLmVhY2goYXJndW1lbnRzW2FdLCBlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmNvbmZpZ01lcmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IG8uY2xvbmUoZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIG8uZWFjaChcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvLmVhY2goZSwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gYS5oYXNPd25Qcm9wZXJ0eShpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG4gPyBhW2ldIDoge307XG4gICAgICAgICAgICAgICAgICAgICAgICBcInNjYWxlc1wiID09PSBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gKGFbaV0gPSBvLnNjYWxlTWVyZ2UociwgZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJzY2FsZVwiID09PSBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gKGFbaV0gPSBvLmNvbmZpZ01lcmdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2NhbGVTZXJ2aWNlLmdldFNjYWxlRGVmYXVsdHMoZS50eXBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6ICFuIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvYmplY3RcIiAhPSB0eXBlb2YgciB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uaXNBcnJheShyKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT09IHIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9iamVjdFwiICE9IHR5cGVvZiBlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgby5pc0FycmF5KGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gKGFbaV0gPSBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IChhW2ldID0gby5jb25maWdNZXJnZShyLCBlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLnNjYWxlTWVyZ2UgPSBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gby5jbG9uZShlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgby5lYWNoKGEsIGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgIFwieEF4ZXNcIiA9PT0gYSB8fCBcInlBeGVzXCIgPT09IGFcbiAgICAgICAgICAgICAgICAgICAgICA/IGkuaGFzT3duUHJvcGVydHkoYSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gby5lYWNoKGUsIGZ1bmN0aW9uIChlLCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBvLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwieEF4ZXNcIiA9PT0gYSA/IFwiY2F0ZWdvcnlcIiA6IFwibGluZWFyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdC5zY2FsZVNlcnZpY2UuZ2V0U2NhbGVEZWZhdWx0cyhyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID49IGlbYV0ubGVuZ3RoIHx8ICFpW2FdW25dLnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaVthXS5wdXNoKG8uY29uZmlnTWVyZ2UobCwgZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUudHlwZSAmJiBlLnR5cGUgIT09IGlbYV1bbl0udHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoaVthXVtuXSA9IG8uY29uZmlnTWVyZ2UoaVthXVtuXSwgbCwgZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChpW2FdW25dID0gby5jb25maWdNZXJnZShpW2FdW25dLCBlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICgoaVthXSA9IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgby5lYWNoKGUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBvLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ4QXhlc1wiID09PSBhID8gXCJjYXRlZ29yeVwiIDogXCJsaW5lYXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaVthXS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5jb25maWdNZXJnZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zY2FsZVNlcnZpY2UuZ2V0U2NhbGVEZWZhdWx0cyhuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICAgIDogaS5oYXNPd25Qcm9wZXJ0eShhKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PSB0eXBlb2YgaVthXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gaVthXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PSB0eXBlb2YgZVxuICAgICAgICAgICAgICAgICAgICAgID8gKGlbYV0gPSBvLmNvbmZpZ01lcmdlKGlbYV0sIGUpKVxuICAgICAgICAgICAgICAgICAgICAgIDogKGlbYV0gPSBlKTtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQgPSBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IHQgfHwgbnVsbCA9PT0gdFxuICAgICAgICAgICAgICAgICAgPyBhXG4gICAgICAgICAgICAgICAgICA6IG8uaXNBcnJheSh0KVxuICAgICAgICAgICAgICAgICAgPyBlIDwgdC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyB0W2VdXG4gICAgICAgICAgICAgICAgICAgIDogYVxuICAgICAgICAgICAgICAgICAgOiB0O1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uZ2V0VmFsdWVPckRlZmF1bHQgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IHQgPyBlIDogdDtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZlxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuaW5kZXhPZihlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSAwLCBpID0gdC5sZW5ndGg7IGkgPiBhOyArK2EpXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHRbYV0gPT09IGUpIHJldHVybiBhO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8ud2hlcmUgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgIGlmIChvLmlzQXJyYXkodCkgJiYgQXJyYXkucHJvdG90eXBlLmZpbHRlcikgcmV0dXJuIHQuZmlsdGVyKGUpO1xuICAgICAgICAgICAgICAgIHZhciBhID0gW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIG8uZWFjaCh0LCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICBlKHQpICYmIGEucHVzaCh0KTtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5maW5kSW5kZXggPSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5maW5kSW5kZXgoZSwgYSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgICAgICBhID0gdm9pZCAwID09PSBhID8gdCA6IGE7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdC5sZW5ndGg7IG4gPiBpOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGUuY2FsbChhLCB0W2ldLCBpLCB0KSkgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5maW5kTmV4dFdoZXJlID0gZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICAodm9pZCAwID09PSBhIHx8IG51bGwgPT09IGEpICYmIChhID0gLTEpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBhICsgMTsgaSA8IHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuID0gdFtpXTtcbiAgICAgICAgICAgICAgICAgIGlmIChlKG4pKSByZXR1cm4gbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5maW5kUHJldmlvdXNXaGVyZSA9IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgKHZvaWQgMCA9PT0gYSB8fCBudWxsID09PSBhKSAmJiAoYSA9IHQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gYSAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IHRbaV07XG4gICAgICAgICAgICAgICAgICBpZiAoZShuKSkgcmV0dXJuIG47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uaW5oZXJpdHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgICAgICB0ICYmIHQuaGFzT3duUHJvcGVydHkoXCJjb25zdHJ1Y3RvclwiKVxuICAgICAgICAgICAgICAgICAgICAgID8gdC5jb25zdHJ1Y3RvclxuICAgICAgICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBhO1xuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgKGkucHJvdG90eXBlID0gZS5wcm90b3R5cGUpLFxuICAgICAgICAgICAgICAgICAgKGEucHJvdG90eXBlID0gbmV3IGkoKSksXG4gICAgICAgICAgICAgICAgICAoYS5leHRlbmQgPSBvLmluaGVyaXRzKSxcbiAgICAgICAgICAgICAgICAgIHQgJiYgby5leHRlbmQoYS5wcm90b3R5cGUsIHQpLFxuICAgICAgICAgICAgICAgICAgKGEuX19zdXBlcl9fID0gZS5wcm90b3R5cGUpLFxuICAgICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5ub29wID0gZnVuY3Rpb24gKCkge30pLFxuICAgICAgICAgICAgICAoby51aWQgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQrKztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KSgpKSxcbiAgICAgICAgICAgICAgKG8uaXNOdW1iZXIgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh0KSkgJiYgaXNGaW5pdGUodCk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5hbG1vc3RFcXVhbHMgPSBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyh0IC0gZSkgPCBhO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8ubWF4ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5yZWR1Y2UoZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBpc05hTihlKSA/IHQgOiBNYXRoLm1heCh0LCBlKTtcbiAgICAgICAgICAgICAgICB9LCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8ubWluID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5yZWR1Y2UoZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBpc05hTihlKSA/IHQgOiBNYXRoLm1pbih0LCBlKTtcbiAgICAgICAgICAgICAgICB9LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uc2lnbiA9IE1hdGguc2lnblxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguc2lnbih0KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodCA9ICt0KSwgMCA9PT0gdCB8fCBpc05hTih0KSA/IHQgOiB0ID4gMCA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5sb2cxMCA9IE1hdGgubG9nMTBcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmxvZzEwKHQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubG9nKHQpIC8gTWF0aC5MTjEwO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLnRvUmFkaWFucyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgKiAoTWF0aC5QSSAvIDE4MCk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby50b0RlZ3JlZXMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ICogKDE4MCAvIE1hdGguUEkpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uZ2V0QW5nbGVGcm9tUG9pbnQgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gZS54IC0gdC54LFxuICAgICAgICAgICAgICAgICAgaSA9IGUueSAtIHQueSxcbiAgICAgICAgICAgICAgICAgIG4gPSBNYXRoLnNxcnQoYSAqIGEgKyBpICogaSksXG4gICAgICAgICAgICAgICAgICBvID0gTWF0aC5hdGFuMihpLCBhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgbyA8IC0wLjUgKiBNYXRoLlBJICYmIChvICs9IDIgKiBNYXRoLlBJKSxcbiAgICAgICAgICAgICAgICAgIHsgYW5nbGU6IG8sIGRpc3RhbmNlOiBuIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uZGlzdGFuY2VCZXR3ZWVuUG9pbnRzID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KFxuICAgICAgICAgICAgICAgICAgTWF0aC5wb3coZS54IC0gdC54LCAyKSArIE1hdGgucG93KGUueSAtIHQueSwgMilcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uYWxpYXNQaXhlbCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgJSAyID09PSAwID8gMCA6IDAuNTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLnNwbGluZUN1cnZlID0gZnVuY3Rpb24gKHQsIGUsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHQuc2tpcCA/IGUgOiB0LFxuICAgICAgICAgICAgICAgICAgbyA9IGUsXG4gICAgICAgICAgICAgICAgICByID0gYS5za2lwID8gZSA6IGEsXG4gICAgICAgICAgICAgICAgICBsID0gTWF0aC5zcXJ0KFxuICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhvLnggLSBuLngsIDIpICsgTWF0aC5wb3coby55IC0gbi55LCAyKVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIHMgPSBNYXRoLnNxcnQoXG4gICAgICAgICAgICAgICAgICAgIE1hdGgucG93KHIueCAtIG8ueCwgMikgKyBNYXRoLnBvdyhyLnkgLSBvLnksIDIpXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgZCA9IGwgLyAobCArIHMpLFxuICAgICAgICAgICAgICAgICAgdSA9IHMgLyAobCArIHMpO1xuICAgICAgICAgICAgICAgIChkID0gaXNOYU4oZCkgPyAwIDogZCksICh1ID0gaXNOYU4odSkgPyAwIDogdSk7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBpICogZCxcbiAgICAgICAgICAgICAgICAgIGggPSBpICogdTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgcHJldmlvdXM6IHtcbiAgICAgICAgICAgICAgICAgICAgeDogby54IC0gYyAqIChyLnggLSBuLngpLFxuICAgICAgICAgICAgICAgICAgICB5OiBvLnkgLSBjICogKHIueSAtIG4ueSksXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgbmV4dDogeyB4OiBvLnggKyBoICogKHIueCAtIG4ueCksIHk6IG8ueSArIGggKiAoci55IC0gbi55KSB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5FUFNJTE9OID0gTnVtYmVyLkVQU0lMT04gfHwgMWUtMTQpLFxuICAgICAgICAgICAgICAoby5zcGxpbmVDdXJ2ZU1vbm90b25lID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgIHIgPSAodCB8fCBbXSkubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IG1vZGVsOiB0Ll9tb2RlbCwgZGVsdGFLOiAwLCBtSzogMCB9O1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBsID0gci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yIChlID0gMDsgbCA+IGU7ICsrZSlcbiAgICAgICAgICAgICAgICAgIChpID0gcltlXSksXG4gICAgICAgICAgICAgICAgICAgIGkubW9kZWwuc2tpcCB8fFxuICAgICAgICAgICAgICAgICAgICAgICgoYSA9IGUgPiAwID8gcltlIC0gMV0gOiBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgICAobiA9IGwgLSAxID4gZSA/IHJbZSArIDFdIDogbnVsbCksXG4gICAgICAgICAgICAgICAgICAgICAgbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIW4ubW9kZWwuc2tpcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGkuZGVsdGFLID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKG4ubW9kZWwueSAtIGkubW9kZWwueSkgLyAobi5tb2RlbC54IC0gaS5tb2RlbC54KSksXG4gICAgICAgICAgICAgICAgICAgICAgIWEgfHwgYS5tb2RlbC5za2lwXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChpLm1LID0gaS5kZWx0YUspXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICFuIHx8IG4ubW9kZWwuc2tpcFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoaS5tSyA9IGEuZGVsdGFLKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnNpZ24oYS5kZWx0YUspICE9PSB0aGlzLnNpZ24oaS5kZWx0YUspXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChpLm1LID0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKGkubUsgPSAoYS5kZWx0YUsgKyBpLmRlbHRhSykgLyAyKSk7XG4gICAgICAgICAgICAgICAgdmFyIHMsIGQsIHUsIGM7XG4gICAgICAgICAgICAgICAgZm9yIChlID0gMDsgbCAtIDEgPiBlOyArK2UpXG4gICAgICAgICAgICAgICAgICAoaSA9IHJbZV0pLFxuICAgICAgICAgICAgICAgICAgICAobiA9IHJbZSArIDFdKSxcbiAgICAgICAgICAgICAgICAgICAgaS5tb2RlbC5za2lwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgbi5tb2RlbC5za2lwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKG8uYWxtb3N0RXF1YWxzKGkuZGVsdGFLLCAwLCB0aGlzLkVQU0lMT04pXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChpLm1LID0gbi5tSyA9IDApXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICgocyA9IGkubUsgLyBpLmRlbHRhSyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChkID0gbi5tSyAvIGkuZGVsdGFLKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGMgPSBNYXRoLnBvdyhzLCAyKSArIE1hdGgucG93KGQsIDIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOSA+PSBjIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCh1ID0gMyAvIE1hdGguc3FydChjKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkubUsgPSBzICogdSAqIGkuZGVsdGFLKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobi5tSyA9IGQgKiB1ICogaS5kZWx0YUspKSkpO1xuICAgICAgICAgICAgICAgIHZhciBoO1xuICAgICAgICAgICAgICAgIGZvciAoZSA9IDA7IGwgPiBlOyArK2UpXG4gICAgICAgICAgICAgICAgICAoaSA9IHJbZV0pLFxuICAgICAgICAgICAgICAgICAgICBpLm1vZGVsLnNraXAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAoKGEgPSBlID4gMCA/IHJbZSAtIDFdIDogbnVsbCksXG4gICAgICAgICAgICAgICAgICAgICAgKG4gPSBsIC0gMSA+IGUgPyByW2UgKyAxXSA6IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgIGEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFhLm1vZGVsLnNraXAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICgoaCA9IChpLm1vZGVsLnggLSBhLm1vZGVsLngpIC8gMyksXG4gICAgICAgICAgICAgICAgICAgICAgICAoaS5tb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1ggPSBpLm1vZGVsLnggLSBoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChpLm1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWSA9IGkubW9kZWwueSAtIGggKiBpLm1LKSksXG4gICAgICAgICAgICAgICAgICAgICAgbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIW4ubW9kZWwuc2tpcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKChoID0gKG4ubW9kZWwueCAtIGkubW9kZWwueCkgLyAzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChpLm1vZGVsLmNvbnRyb2xQb2ludE5leHRYID0gaS5tb2RlbC54ICsgaCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoaS5tb2RlbC5jb250cm9sUG9pbnROZXh0WSA9IGkubW9kZWwueSArIGggKiBpLm1LKSkpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8ubmV4dEl0ZW0gPSBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhXG4gICAgICAgICAgICAgICAgICA/IGUgPj0gdC5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICAgID8gdFswXVxuICAgICAgICAgICAgICAgICAgICA6IHRbZSArIDFdXG4gICAgICAgICAgICAgICAgICA6IGUgPj0gdC5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICA/IHRbdC5sZW5ndGggLSAxXVxuICAgICAgICAgICAgICAgICAgOiB0W2UgKyAxXTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLnByZXZpb3VzSXRlbSA9IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFcbiAgICAgICAgICAgICAgICAgID8gMCA+PSBlXG4gICAgICAgICAgICAgICAgICAgID8gdFt0Lmxlbmd0aCAtIDFdXG4gICAgICAgICAgICAgICAgICAgIDogdFtlIC0gMV1cbiAgICAgICAgICAgICAgICAgIDogMCA+PSBlXG4gICAgICAgICAgICAgICAgICA/IHRbMF1cbiAgICAgICAgICAgICAgICAgIDogdFtlIC0gMV07XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5uaWNlTnVtID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICAgIGkgPSBNYXRoLmZsb29yKG8ubG9nMTAodCkpLFxuICAgICAgICAgICAgICAgICAgbiA9IHQgLyBNYXRoLnBvdygxMCwgaSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIChhID0gZVxuICAgICAgICAgICAgICAgICAgICA/IDEuNSA+IG5cbiAgICAgICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgICAgICA6IDMgPiBuXG4gICAgICAgICAgICAgICAgICAgICAgPyAyXG4gICAgICAgICAgICAgICAgICAgICAgOiA3ID4gblxuICAgICAgICAgICAgICAgICAgICAgID8gNVxuICAgICAgICAgICAgICAgICAgICAgIDogMTBcbiAgICAgICAgICAgICAgICAgICAgOiAxID49IG5cbiAgICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICAgIDogMiA+PSBuXG4gICAgICAgICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICAgICAgICA6IDUgPj0gblxuICAgICAgICAgICAgICAgICAgICA/IDVcbiAgICAgICAgICAgICAgICAgICAgOiAxMCksXG4gICAgICAgICAgICAgICAgICBhICogTWF0aC5wb3coMTAsIGkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgciA9IChvLmVhc2luZ0VmZmVjdHMgPSB7XG4gICAgICAgICAgICAgIGxpbmVhcjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZUluUXVhZDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdCAqIHQ7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VPdXRRdWFkOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMSAqIHQgKiAodCAtIDIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5PdXRRdWFkOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodCAvPSAwLjUpIDwgMVxuICAgICAgICAgICAgICAgICAgPyAwLjUgKiB0ICogdFxuICAgICAgICAgICAgICAgICAgOiAtMC41ICogKC0tdCAqICh0IC0gMikgLSAxKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZUluQ3ViaWM6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgKiB0ICogdDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZU91dEN1YmljOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxICogKCh0ID0gdCAvIDEgLSAxKSAqIHQgKiB0ICsgMSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJbk91dEN1YmljOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodCAvPSAwLjUpIDwgMVxuICAgICAgICAgICAgICAgICAgPyAwLjUgKiB0ICogdCAqIHRcbiAgICAgICAgICAgICAgICAgIDogMC41ICogKCh0IC09IDIpICogdCAqIHQgKyAyKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZUluUXVhcnQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgKiB0ICogdCAqIHQ7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VPdXRRdWFydDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTEgKiAoKHQgPSB0IC8gMSAtIDEpICogdCAqIHQgKiB0IC0gMSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJbk91dFF1YXJ0OiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodCAvPSAwLjUpIDwgMVxuICAgICAgICAgICAgICAgICAgPyAwLjUgKiB0ICogdCAqIHQgKiB0XG4gICAgICAgICAgICAgICAgICA6IC0wLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgLSAyKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZUluUXVpbnQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgKiAodCAvPSAxKSAqIHQgKiB0ICogdCAqIHQ7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VPdXRRdWludDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAqICgodCA9IHQgLyAxIC0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJbk91dFF1aW50OiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodCAvPSAwLjUpIDwgMVxuICAgICAgICAgICAgICAgICAgPyAwLjUgKiB0ICogdCAqIHQgKiB0ICogdFxuICAgICAgICAgICAgICAgICAgOiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgKiB0ICsgMik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJblNpbmU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xICogTWF0aC5jb3MoKHQgLyAxKSAqIChNYXRoLlBJIC8gMikpICsgMTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZU91dFNpbmU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgKiBNYXRoLnNpbigodCAvIDEpICogKE1hdGguUEkgLyAyKSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJbk91dFNpbmU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0wLjUgKiAoTWF0aC5jb3MoKE1hdGguUEkgKiB0KSAvIDEpIC0gMSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJbkV4cG86IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgPT09IHQgPyAxIDogMSAqIE1hdGgucG93KDIsIDEwICogKHQgLyAxIC0gMSkpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlT3V0RXhwbzogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMSA9PT0gdCA/IDEgOiAxICogKC1NYXRoLnBvdygyLCAoLTEwICogdCkgLyAxKSArIDEpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5PdXRFeHBvOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwID09PSB0XG4gICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgIDogMSA9PT0gdFxuICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICA6ICh0IC89IDAuNSkgPCAxXG4gICAgICAgICAgICAgICAgICA/IDAuNSAqIE1hdGgucG93KDIsIDEwICogKHQgLSAxKSlcbiAgICAgICAgICAgICAgICAgIDogMC41ICogKC1NYXRoLnBvdygyLCAtMTAgKiAtLXQpICsgMik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJbkNpcmM6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPj0gMSA/IHQgOiAtMSAqIChNYXRoLnNxcnQoMSAtICh0IC89IDEpICogdCkgLSAxKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZU91dENpcmM6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgKiBNYXRoLnNxcnQoMSAtICh0ID0gdCAvIDEgLSAxKSAqIHQpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5PdXRDaXJjOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodCAvPSAwLjUpIDwgMVxuICAgICAgICAgICAgICAgICAgPyAtMC41ICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSlcbiAgICAgICAgICAgICAgICAgIDogMC41ICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5FbGFzdGljOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gMS43MDE1OCxcbiAgICAgICAgICAgICAgICAgIGEgPSAwLFxuICAgICAgICAgICAgICAgICAgaSA9IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgPT09IHRcbiAgICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgICAgOiAxID09PSAodCAvPSAxKVxuICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICA6IChhIHx8IChhID0gMC4zKSxcbiAgICAgICAgICAgICAgICAgICAgaSA8IE1hdGguYWJzKDEpXG4gICAgICAgICAgICAgICAgICAgICAgPyAoKGkgPSAxKSwgKGUgPSBhIC8gNCkpXG4gICAgICAgICAgICAgICAgICAgICAgOiAoZSA9IChhIC8gKDIgKiBNYXRoLlBJKSkgKiBNYXRoLmFzaW4oMSAvIGkpKSxcbiAgICAgICAgICAgICAgICAgICAgLShcbiAgICAgICAgICAgICAgICAgICAgICBpICpcbiAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqXG4gICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oKCgxICogdCAtIGUpICogKDIgKiBNYXRoLlBJKSkgLyBhKVxuICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZU91dEVsYXN0aWM6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSAxLjcwMTU4LFxuICAgICAgICAgICAgICAgICAgYSA9IDAsXG4gICAgICAgICAgICAgICAgICBpID0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMCA9PT0gdFxuICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICA6IDEgPT09ICh0IC89IDEpXG4gICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgIDogKGEgfHwgKGEgPSAwLjMpLFxuICAgICAgICAgICAgICAgICAgICBpIDwgTWF0aC5hYnMoMSlcbiAgICAgICAgICAgICAgICAgICAgICA/ICgoaSA9IDEpLCAoZSA9IGEgLyA0KSlcbiAgICAgICAgICAgICAgICAgICAgICA6IChlID0gKGEgLyAoMiAqIE1hdGguUEkpKSAqIE1hdGguYXNpbigxIC8gaSkpLFxuICAgICAgICAgICAgICAgICAgICBpICpcbiAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdygyLCAtMTAgKiB0KSAqXG4gICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oKCgxICogdCAtIGUpICogKDIgKiBNYXRoLlBJKSkgLyBhKSArXG4gICAgICAgICAgICAgICAgICAgICAgMSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJbk91dEVsYXN0aWM6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSAxLjcwMTU4LFxuICAgICAgICAgICAgICAgICAgYSA9IDAsXG4gICAgICAgICAgICAgICAgICBpID0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMCA9PT0gdFxuICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICA6IDIgPT09ICh0IC89IDAuNSlcbiAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgOiAoYSB8fCAoYSA9IDEgKiAoMC4zICogMS41KSksXG4gICAgICAgICAgICAgICAgICAgIGkgPCBNYXRoLmFicygxKVxuICAgICAgICAgICAgICAgICAgICAgID8gKChpID0gMSksIChlID0gYSAvIDQpKVxuICAgICAgICAgICAgICAgICAgICAgIDogKGUgPSAoYSAvICgyICogTWF0aC5QSSkpICogTWF0aC5hc2luKDEgLyBpKSksXG4gICAgICAgICAgICAgICAgICAgIDEgPiB0XG4gICAgICAgICAgICAgICAgICAgICAgPyAtMC41ICpcbiAgICAgICAgICAgICAgICAgICAgICAgIChpICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbigoKDEgKiB0IC0gZSkgKiAoMiAqIE1hdGguUEkpKSAvIGEpKVxuICAgICAgICAgICAgICAgICAgICAgIDogaSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucG93KDIsIC0xMCAqICh0IC09IDEpKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luKCgoMSAqIHQgLSBlKSAqICgyICogTWF0aC5QSSkpIC8gYSkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAwLjUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgMSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJbkJhY2s6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSAxLjcwMTU4O1xuICAgICAgICAgICAgICAgIHJldHVybiAxICogKHQgLz0gMSkgKiB0ICogKChlICsgMSkgKiB0IC0gZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VPdXRCYWNrOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gMS43MDE1ODtcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAqICgodCA9IHQgLyAxIC0gMSkgKiB0ICogKChlICsgMSkgKiB0ICsgZSkgKyAxKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZUluT3V0QmFjazogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IDEuNzAxNTg7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0IC89IDAuNSkgPCAxXG4gICAgICAgICAgICAgICAgICA/IDAuNSAqICh0ICogdCAqICgoKGUgKj0gMS41MjUpICsgMSkgKiB0IC0gZSkpXG4gICAgICAgICAgICAgICAgICA6IDAuNSAqICgodCAtPSAyKSAqIHQgKiAoKChlICo9IDEuNTI1KSArIDEpICogdCArIGUpICsgMik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJbkJvdW5jZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAtIHIuZWFzZU91dEJvdW5jZSgxIC0gdCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VPdXRCb3VuY2U6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0IC89IDEpIDwgMSAvIDIuNzVcbiAgICAgICAgICAgICAgICAgID8gMSAqICg3LjU2MjUgKiB0ICogdClcbiAgICAgICAgICAgICAgICAgIDogMiAvIDIuNzUgPiB0XG4gICAgICAgICAgICAgICAgICA/IDEgKiAoNy41NjI1ICogKHQgLT0gMS41IC8gMi43NSkgKiB0ICsgMC43NSlcbiAgICAgICAgICAgICAgICAgIDogMi41IC8gMi43NSA+IHRcbiAgICAgICAgICAgICAgICAgID8gMSAqICg3LjU2MjUgKiAodCAtPSAyLjI1IC8gMi43NSkgKiB0ICsgMC45Mzc1KVxuICAgICAgICAgICAgICAgICAgOiAxICogKDcuNTYyNSAqICh0IC09IDIuNjI1IC8gMi43NSkgKiB0ICsgMC45ODQzNzUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5PdXRCb3VuY2U6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuNSA+IHRcbiAgICAgICAgICAgICAgICAgID8gMC41ICogci5lYXNlSW5Cb3VuY2UoMiAqIHQpXG4gICAgICAgICAgICAgICAgICA6IDAuNSAqIHIuZWFzZU91dEJvdW5jZSgyICogdCAtIDEpICsgMC41O1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAoby5yZXF1ZXN0QW5pbUZyYW1lID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgIHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQodCwgMWUzIC8gNjApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pKCkpLFxuICAgICAgICAgICAgICAoby5jYW5jZWxBbmltRnJhbWUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICB3aW5kb3cub0NhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICB3aW5kb3cubXNDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5jbGVhclRpbWVvdXQodCwgMWUzIC8gNjApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pKCkpLFxuICAgICAgICAgICAgICAoby5nZXRSZWxhdGl2ZVBvc2l0aW9uID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICBuID0gdC5vcmlnaW5hbEV2ZW50IHx8IHQsXG4gICAgICAgICAgICAgICAgICByID0gdC5jdXJyZW50VGFyZ2V0IHx8IHQuc3JjRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIGwgPSByLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICAgICAgcyA9IG4udG91Y2hlcztcbiAgICAgICAgICAgICAgICBzICYmIHMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgPyAoKGEgPSBzWzBdLmNsaWVudFgpLCAoaSA9IHNbMF0uY2xpZW50WSkpXG4gICAgICAgICAgICAgICAgICA6ICgoYSA9IG4uY2xpZW50WCksIChpID0gbi5jbGllbnRZKSk7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBwYXJzZUZsb2F0KG8uZ2V0U3R5bGUociwgXCJwYWRkaW5nLWxlZnRcIikpLFxuICAgICAgICAgICAgICAgICAgdSA9IHBhcnNlRmxvYXQoby5nZXRTdHlsZShyLCBcInBhZGRpbmctdG9wXCIpKSxcbiAgICAgICAgICAgICAgICAgIGMgPSBwYXJzZUZsb2F0KG8uZ2V0U3R5bGUociwgXCJwYWRkaW5nLXJpZ2h0XCIpKSxcbiAgICAgICAgICAgICAgICAgIGggPSBwYXJzZUZsb2F0KG8uZ2V0U3R5bGUociwgXCJwYWRkaW5nLWJvdHRvbVwiKSksXG4gICAgICAgICAgICAgICAgICBmID0gbC5yaWdodCAtIGwubGVmdCAtIGQgLSBjLFxuICAgICAgICAgICAgICAgICAgZyA9IGwuYm90dG9tIC0gbC50b3AgLSB1IC0gaDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgKGEgPSBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICAgICAoKChhIC0gbC5sZWZ0IC0gZCkgLyBmKSAqIHIud2lkdGgpIC9cbiAgICAgICAgICAgICAgICAgICAgICBlLmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvXG4gICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgIChpID0gTWF0aC5yb3VuZChcbiAgICAgICAgICAgICAgICAgICAgKCgoaSAtIGwudG9wIC0gdSkgLyBnKSAqIHIuaGVpZ2h0KSAvXG4gICAgICAgICAgICAgICAgICAgICAgZS5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpb1xuICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICB7IHg6IGEsIHk6IGkgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5hZGRFdmVudCA9IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgdC5hZGRFdmVudExpc3RlbmVyXG4gICAgICAgICAgICAgICAgICA/IHQuYWRkRXZlbnRMaXN0ZW5lcihlLCBhKVxuICAgICAgICAgICAgICAgICAgOiB0LmF0dGFjaEV2ZW50XG4gICAgICAgICAgICAgICAgICA/IHQuYXR0YWNoRXZlbnQoXCJvblwiICsgZSwgYSlcbiAgICAgICAgICAgICAgICAgIDogKHRbXCJvblwiICsgZV0gPSBhKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICB0LnJlbW92ZUV2ZW50TGlzdGVuZXJcbiAgICAgICAgICAgICAgICAgID8gdC5yZW1vdmVFdmVudExpc3RlbmVyKGUsIGEsICExKVxuICAgICAgICAgICAgICAgICAgOiB0LmRldGFjaEV2ZW50XG4gICAgICAgICAgICAgICAgICA/IHQuZGV0YWNoRXZlbnQoXCJvblwiICsgZSwgYSlcbiAgICAgICAgICAgICAgICAgIDogKHRbXCJvblwiICsgZV0gPSBvLm5vb3ApO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uYmluZEV2ZW50cyA9IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSAodC5ldmVudHMgPSB0LmV2ZW50cyB8fCB7fSk7XG4gICAgICAgICAgICAgICAgby5lYWNoKGUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAoaVtlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgYS5hcHBseSh0LCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG8uYWRkRXZlbnQodC5jaGFydC5jYW52YXMsIGUsIGlbZV0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8udW5iaW5kRXZlbnRzID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHQuY2hhcnQuY2FudmFzO1xuICAgICAgICAgICAgICAgIG8uZWFjaChlLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgby5yZW1vdmVFdmVudChhLCBlLCB0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmdldENvbnN0cmFpbnRXaWR0aCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4odCwgXCJtYXgtd2lkdGhcIiwgXCJjbGllbnRXaWR0aFwiKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmdldENvbnN0cmFpbnRIZWlnaHQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuKHQsIFwibWF4SGVpZ2h0XCIsIFwiY2xpZW50SGVpZ2h0XCIpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uZ2V0TWF4aW11bVdpZHRoID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IHQucGFyZW50Tm9kZSxcbiAgICAgICAgICAgICAgICAgIGEgPSBwYXJzZUludChvLmdldFN0eWxlKGUsIFwicGFkZGluZy1sZWZ0XCIpLCAxMCksXG4gICAgICAgICAgICAgICAgICBpID0gcGFyc2VJbnQoby5nZXRTdHlsZShlLCBcInBhZGRpbmctcmlnaHRcIiksIDEwKSxcbiAgICAgICAgICAgICAgICAgIG4gPSBlLmNsaWVudFdpZHRoIC0gYSAtIGksXG4gICAgICAgICAgICAgICAgICByID0gby5nZXRDb25zdHJhaW50V2lkdGgodCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTmFOKHIpID8gbiA6IE1hdGgubWluKG4sIHIpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uZ2V0TWF4aW11bUhlaWdodCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB0LnBhcmVudE5vZGUsXG4gICAgICAgICAgICAgICAgICBhID0gcGFyc2VJbnQoby5nZXRTdHlsZShlLCBcInBhZGRpbmctdG9wXCIpLCAxMCksXG4gICAgICAgICAgICAgICAgICBpID0gcGFyc2VJbnQoby5nZXRTdHlsZShlLCBcInBhZGRpbmctYm90dG9tXCIpLCAxMCksXG4gICAgICAgICAgICAgICAgICBuID0gZS5jbGllbnRIZWlnaHQgLSBhIC0gaSxcbiAgICAgICAgICAgICAgICAgIHIgPSBvLmdldENvbnN0cmFpbnRIZWlnaHQodCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTmFOKHIpID8gbiA6IE1hdGgubWluKG4sIHIpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uZ2V0U3R5bGUgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LmN1cnJlbnRTdHlsZVxuICAgICAgICAgICAgICAgICAgPyB0LmN1cnJlbnRTdHlsZVtlXVxuICAgICAgICAgICAgICAgICAgOiBkb2N1bWVudC5kZWZhdWx0Vmlld1xuICAgICAgICAgICAgICAgICAgICAgIC5nZXRDb21wdXRlZFN0eWxlKHQsIG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgLmdldFByb3BlcnR5VmFsdWUoZSk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5yZXRpbmFTY2FsZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSAodC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9XG4gICAgICAgICAgICAgICAgICB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoMSAhPT0gZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0LmNhbnZhcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBuID0gdC53aWR0aDtcbiAgICAgICAgICAgICAgICAgIChhLmhlaWdodCA9IGkgKiBlKSxcbiAgICAgICAgICAgICAgICAgICAgKGEud2lkdGggPSBuICogZSksXG4gICAgICAgICAgICAgICAgICAgIHQuY3R4LnNjYWxlKGUsIGUpLFxuICAgICAgICAgICAgICAgICAgICAoYS5zdHlsZS5oZWlnaHQgPSBpICsgXCJweFwiKSxcbiAgICAgICAgICAgICAgICAgICAgKGEuc3R5bGUud2lkdGggPSBuICsgXCJweFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5jbGVhciA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdC5jdHguY2xlYXJSZWN0KDAsIDAsIHQud2lkdGgsIHQuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmZvbnRTdHJpbmcgPSBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlICsgXCIgXCIgKyB0ICsgXCJweCBcIiArIGE7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5sb25nZXN0VGV4dCA9IGZ1bmN0aW9uICh0LCBlLCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgaSA9IGkgfHwge307XG4gICAgICAgICAgICAgICAgdmFyIG4gPSAoaS5kYXRhID0gaS5kYXRhIHx8IHt9KSxcbiAgICAgICAgICAgICAgICAgIHIgPSAoaS5nYXJiYWdlQ29sbGVjdCA9IGkuZ2FyYmFnZUNvbGxlY3QgfHwgW10pO1xuICAgICAgICAgICAgICAgIGkuZm9udCAhPT0gZSAmJlxuICAgICAgICAgICAgICAgICAgKChuID0gaS5kYXRhID0ge30pLFxuICAgICAgICAgICAgICAgICAgKHIgPSBpLmdhcmJhZ2VDb2xsZWN0ID0gW10pLFxuICAgICAgICAgICAgICAgICAgKGkuZm9udCA9IGUpKSxcbiAgICAgICAgICAgICAgICAgICh0LmZvbnQgPSBlKTtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IDA7XG4gICAgICAgICAgICAgICAgby5lYWNoKGEsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGUgJiYgbnVsbCAhPT0gZSAmJiBvLmlzQXJyYXkoZSkgIT09ICEwXG4gICAgICAgICAgICAgICAgICAgID8gKGwgPSBvLm1lYXN1cmVUZXh0KHQsIG4sIHIsIGwsIGUpKVxuICAgICAgICAgICAgICAgICAgICA6IG8uaXNBcnJheShlKSAmJlxuICAgICAgICAgICAgICAgICAgICAgIG8uZWFjaChlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT09IGUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgby5pc0FycmF5KGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChsID0gby5tZWFzdXJlVGV4dCh0LCBuLCByLCBsLCBlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSByLmxlbmd0aCAvIDI7XG4gICAgICAgICAgICAgICAgaWYgKHMgPiBhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IHMgPiBkOyBkKyspIGRlbGV0ZSBuW3JbZF1dO1xuICAgICAgICAgICAgICAgICAgci5zcGxpY2UoMCwgcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8ubWVhc3VyZVRleHQgPSBmdW5jdGlvbiAodCwgZSwgYSwgaSwgbikge1xuICAgICAgICAgICAgICAgIHZhciBvID0gZVtuXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgbyB8fCAoKG8gPSBlW25dID0gdC5tZWFzdXJlVGV4dChuKS53aWR0aCksIGEucHVzaChuKSksXG4gICAgICAgICAgICAgICAgICBvID4gaSAmJiAoaSA9IG8pLFxuICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5udW1iZXJPZkxhYmVsTGluZXMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgby5lYWNoKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIG8uaXNBcnJheSh0KSAmJiB0Lmxlbmd0aCA+IGUgJiYgKGUgPSB0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uZHJhd1JvdW5kZWRSZWN0YW5nbGUgPSBmdW5jdGlvbiAodCwgZSwgYSwgaSwgbiwgbykge1xuICAgICAgICAgICAgICAgIHQuYmVnaW5QYXRoKCksXG4gICAgICAgICAgICAgICAgICB0Lm1vdmVUbyhlICsgbywgYSksXG4gICAgICAgICAgICAgICAgICB0LmxpbmVUbyhlICsgaSAtIG8sIGEpLFxuICAgICAgICAgICAgICAgICAgdC5xdWFkcmF0aWNDdXJ2ZVRvKGUgKyBpLCBhLCBlICsgaSwgYSArIG8pLFxuICAgICAgICAgICAgICAgICAgdC5saW5lVG8oZSArIGksIGEgKyBuIC0gbyksXG4gICAgICAgICAgICAgICAgICB0LnF1YWRyYXRpY0N1cnZlVG8oZSArIGksIGEgKyBuLCBlICsgaSAtIG8sIGEgKyBuKSxcbiAgICAgICAgICAgICAgICAgIHQubGluZVRvKGUgKyBvLCBhICsgbiksXG4gICAgICAgICAgICAgICAgICB0LnF1YWRyYXRpY0N1cnZlVG8oZSwgYSArIG4sIGUsIGEgKyBuIC0gbyksXG4gICAgICAgICAgICAgICAgICB0LmxpbmVUbyhlLCBhICsgbyksXG4gICAgICAgICAgICAgICAgICB0LnF1YWRyYXRpY0N1cnZlVG8oZSwgYSwgZSArIG8sIGEpLFxuICAgICAgICAgICAgICAgICAgdC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmNvbG9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaVxuICAgICAgICAgICAgICAgICAgPyBpKFxuICAgICAgICAgICAgICAgICAgICAgIGUgaW5zdGFuY2VvZiBDYW52YXNHcmFkaWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0LmRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICA6IChjb25zb2xlLmVycm9yKFwiQ29sb3IuanMgbm90IGZvdW5kIVwiKSwgZSk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5hZGRSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICAgICAgICAgICAgICAgIChhLmNsYXNzTmFtZSA9IFwiY2hhcnRqcy1oaWRkZW4taWZyYW1lXCIpLFxuICAgICAgICAgICAgICAgICAgKGEuc3R5bGUuY3NzVGV4dCA9XG4gICAgICAgICAgICAgICAgICAgIFwiZGlzcGxheTpibG9jaztvdmVyZmxvdzpoaWRkZW47Ym9yZGVyOjA7bWFyZ2luOjA7dG9wOjA7bGVmdDowO2JvdHRvbTowO3JpZ2h0OjA7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtwb3NpdGlvbjphYnNvbHV0ZTtwb2ludGVyLWV2ZW50czpub25lO3otaW5kZXg6LTE7XCIpLFxuICAgICAgICAgICAgICAgICAgKGEudGFiSW5kZXggPSAtMSk7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSAodC5fY2hhcnRqcyA9IHsgcmVzaXplcjogYSwgdGlja2luZzogITEgfSksXG4gICAgICAgICAgICAgICAgICBuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpLnRpY2tpbmcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAoKGkudGlja2luZyA9ICEwKSxcbiAgICAgICAgICAgICAgICAgICAgICBvLnJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLnJlc2l6ZXIgPyAoKGkudGlja2luZyA9ICExKSwgZSgpKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG8uYWRkRXZlbnQoYSwgXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIG8uYWRkRXZlbnQoYS5jb250ZW50V2luZG93IHx8IGEsIFwicmVzaXplXCIsIG4pLCBuKCk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICB0Lmluc2VydEJlZm9yZShhLCB0LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8ucmVtb3ZlUmVzaXplTGlzdGVuZXIgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIGlmICh0ICYmIHQuX2NoYXJ0anMpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdC5fY2hhcnRqcy5yZXNpemVyO1xuICAgICAgICAgICAgICAgICAgZSAmJlxuICAgICAgICAgICAgICAgICAgICAoZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpLCAodC5fY2hhcnRqcy5yZXNpemVyID0gbnVsbCkpLFxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdC5fY2hhcnRqcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5pc0FycmF5ID0gQXJyYXkuaXNBcnJheVxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIFwiW29iamVjdCBBcnJheV1cIiA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uYXJyYXlFcXVhbHMgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgIHZhciBhLCBpLCBuLCByO1xuICAgICAgICAgICAgICAgIGlmICghdCB8fCAhZSB8fCB0Lmxlbmd0aCAhPT0gZS5sZW5ndGgpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICBmb3IgKGEgPSAwLCBpID0gdC5sZW5ndGg7IGkgPiBhOyArK2EpXG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICgobiA9IHRbYV0pLFxuICAgICAgICAgICAgICAgICAgICAociA9IGVbYV0pLFxuICAgICAgICAgICAgICAgICAgICBuIGluc3RhbmNlb2YgQXJyYXkgJiYgciBpbnN0YW5jZW9mIEFycmF5KVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghby5hcnJheUVxdWFscyhuLCByKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuICE9PSByKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uY2FsbENhbGxiYWNrID0gZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICB0ICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdC5jYWxsICYmIHQuYXBwbHkoYSwgZSk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5nZXRIb3ZlckNvbG9yID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIENhbnZhc1BhdHRlcm5cbiAgICAgICAgICAgICAgICAgID8gdFxuICAgICAgICAgICAgICAgICAgOiBvLmNvbG9yKHQpLnNhdHVyYXRlKDAuNSkuZGFya2VuKDAuMSkucmdiU3RyaW5nKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHsgMzogMyB9LFxuICAgICAgXSxcbiAgICAgIDI3OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUodCwgZSkge1xuICAgICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgIGwgPSB0LmRhdGEuZGF0YXNldHM7XG4gICAgICAgICAgICAgIGZvciAoaSA9IDAsIG8gPSBsLmxlbmd0aDsgbyA+IGk7ICsraSlcbiAgICAgICAgICAgICAgICBpZiAodC5pc0RhdGFzZXRWaXNpYmxlKGkpKVxuICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgYSA9IHQuZ2V0RGF0YXNldE1ldGEoaSksIG4gPSAwLCByID0gYS5kYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgciA+IG47XG4gICAgICAgICAgICAgICAgICAgICsrblxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gYS5kYXRhW25dO1xuICAgICAgICAgICAgICAgICAgICBzLl92aWV3LnNraXAgfHwgZShzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGEodCwgYSkge1xuICAgICAgICAgICAgICB2YXIgaSA9IFtdO1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIGUodCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHQuaW5SYW5nZShhLngsIGEueSkgJiYgaS5wdXNoKHQpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGkodCwgYSwgaSwgbikge1xuICAgICAgICAgICAgICB2YXIgciA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgICAgICAgICAgICBsID0gW107XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgbiB8fCAobiA9IG8uZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKSxcbiAgICAgICAgICAgICAgICBlKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWkgfHwgdC5pblJhbmdlKGEueCwgYS55KSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQuZ2V0Q2VudGVyUG9pbnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICBvID0gbihhLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgciA+IG8gPyAoKGwgPSBbdF0pLCAociA9IG8pKSA6IG8gPT09IHIgJiYgbC5wdXNoKHQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG4odCwgZSwgbikge1xuICAgICAgICAgICAgICB2YXIgciA9IG8uZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCB0LmNoYXJ0KSxcbiAgICAgICAgICAgICAgICBsID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyh0LnggLSBlLngpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcyA9IG4uaW50ZXJzZWN0ID8gYSh0LCByKSA6IGkodCwgciwgITEsIGwpLFxuICAgICAgICAgICAgICAgIGQgPSBbXTtcbiAgICAgICAgICAgICAgcmV0dXJuIHMubGVuZ3RoXG4gICAgICAgICAgICAgICAgPyAodC5kYXRhLmRhdGFzZXRzLmZvckVhY2goZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQuaXNEYXRhc2V0VmlzaWJsZShhKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gdC5nZXREYXRhc2V0TWV0YShhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBpLmRhdGFbc1swXS5faW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgIG4gJiYgIW4uX3ZpZXcuc2tpcCAmJiBkLnB1c2gobik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgZClcbiAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG8gPSB0LmhlbHBlcnM7XG4gICAgICAgICAgICB0LkludGVyYWN0aW9uID0ge1xuICAgICAgICAgICAgICBtb2Rlczoge1xuICAgICAgICAgICAgICAgIHNpbmdsZTogZnVuY3Rpb24gKHQsIGEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gby5nZXRSZWxhdGl2ZVBvc2l0aW9uKGEsIHQuY2hhcnQpLFxuICAgICAgICAgICAgICAgICAgICBuID0gW107XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBlKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuaW5SYW5nZShpLngsIGkueSkgPyAobi5wdXNoKHQpLCBuKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG4uc2xpY2UoMCwgMSlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbDogbixcbiAgICAgICAgICAgICAgICBpbmRleDogbixcbiAgICAgICAgICAgICAgICBkYXRhc2V0OiBmdW5jdGlvbiAodCwgZSwgbikge1xuICAgICAgICAgICAgICAgICAgdmFyIHIgPSBvLmdldFJlbGF0aXZlUG9zaXRpb24oZSwgdC5jaGFydCksXG4gICAgICAgICAgICAgICAgICAgIGwgPSBuLmludGVyc2VjdCA/IGEodCwgcikgOiBpKHQsIHIsICExKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGwubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgIChsID0gdC5nZXREYXRhc2V0TWV0YShsWzBdLl9kYXRhc2V0SW5kZXgpLmRhdGEpLFxuICAgICAgICAgICAgICAgICAgICBsXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ4LWF4aXNcIjogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuKHQsIGUsICEwKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBvaW50OiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSBvLmdldFJlbGF0aXZlUG9zaXRpb24oZSwgdC5jaGFydCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYSh0LCBpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG5lYXJlc3Q6IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IG8uZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCB0LmNoYXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgciA9IGkodCwgbiwgYS5pbnRlcnNlY3QpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgci5sZW5ndGggPiAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgci5zb3J0KGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHQuZ2V0QXJlYSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gZS5nZXRBcmVhKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBhIC0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDAgPT09IG4gJiYgKG4gPSB0Ll9kYXRhc2V0SW5kZXggLSBlLl9kYXRhc2V0SW5kZXgpLCBuXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICByLnNsaWNlKDAsIDEpXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeDogZnVuY3Rpb24gKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuID0gby5nZXRSZWxhdGl2ZVBvc2l0aW9uKGEsIHQuY2hhcnQpLFxuICAgICAgICAgICAgICAgICAgICByID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGwgPSAhMTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGUodCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0LmluWFJhbmdlKG4ueCkgJiYgci5wdXNoKHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5pblJhbmdlKG4ueCwgbi55KSAmJiAobCA9ICEwKTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGkuaW50ZXJzZWN0ICYmICFsICYmIChyID0gW10pLFxuICAgICAgICAgICAgICAgICAgICByXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeTogZnVuY3Rpb24gKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuID0gby5nZXRSZWxhdGl2ZVBvc2l0aW9uKGEsIHQuY2hhcnQpLFxuICAgICAgICAgICAgICAgICAgICByID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGwgPSAhMTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGUodCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0LmluWVJhbmdlKG4ueSkgJiYgci5wdXNoKHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5pblJhbmdlKG4ueCwgbi55KSAmJiAobCA9ICEwKTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGkuaW50ZXJzZWN0ICYmICFsICYmIChyID0gW10pLFxuICAgICAgICAgICAgICAgICAgICByXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDI4OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHQgPSBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICh0aGlzLmNvbnRyb2xsZXIgPSBuZXcgdC5Db250cm9sbGVyKGUsIGEsIHRoaXMpKSxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAodC5kZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBnbG9iYWw6IHtcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6ICEwLFxuICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZUFuaW1hdGlvbkR1cmF0aW9uOiAwLFxuICAgICAgICAgICAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogITAsXG4gICAgICAgICAgICAgICAgICBldmVudHM6IFtcbiAgICAgICAgICAgICAgICAgICAgXCJtb3VzZW1vdmVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJtb3VzZW91dFwiLFxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidG91Y2hzdGFydFwiLFxuICAgICAgICAgICAgICAgICAgICBcInRvdWNobW92ZVwiLFxuICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIG9uSG92ZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IFwibmVhcmVzdFwiLFxuICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Q6ICEwLFxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogNDAwLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IG51bGwsXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0Q29sb3I6IFwicmdiYSgwLDAsMCwwLjEpXCIsXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0Rm9udENvbG9yOiBcIiM2NjZcIixcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHRGb250RmFtaWx5OlxuICAgICAgICAgICAgICAgICAgICBcIidIZWx2ZXRpY2EgTmV1ZScsICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0Rm9udFNpemU6IDEyLFxuICAgICAgICAgICAgICAgICAgZGVmYXVsdEZvbnRTdHlsZTogXCJub3JtYWxcIixcbiAgICAgICAgICAgICAgICAgIHNob3dMaW5lczogITAsXG4gICAgICAgICAgICAgICAgICBlbGVtZW50czoge30sXG4gICAgICAgICAgICAgICAgICBsZWdlbmRDYWxsYmFjazogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZS5wdXNoKCc8dWwgY2xhc3NOYW1lPVwiJyArIHQuaWQgKyAnLWxlZ2VuZFwiPicpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhID0gMDsgYSA8IHQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGErKylcbiAgICAgICAgICAgICAgICAgICAgICBlLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGxpPjxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjonICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdC5kYXRhLmRhdGFzZXRzW2FdLmJhY2tncm91bmRDb2xvciArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdcIj48L3NwYW4+J1xuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmRhdGEuZGF0YXNldHNbYV0ubGFiZWwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKHQuZGF0YS5kYXRhc2V0c1thXS5sYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnB1c2goXCI8L2xpPlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHVzaChcIjwvdWw+XCIpLCBlLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5DaGFydCA9IHQpLFxuICAgICAgICAgICAgICB0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDI5OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzO1xuICAgICAgICAgICAgdC5sYXlvdXRTZXJ2aWNlID0ge1xuICAgICAgICAgICAgICBkZWZhdWx0czoge30sXG4gICAgICAgICAgICAgIGFkZEJveDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICB0LmJveGVzIHx8ICh0LmJveGVzID0gW10pLCB0LmJveGVzLnB1c2goZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJlbW92ZUJveDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICB0LmJveGVzICYmIHQuYm94ZXMuc3BsaWNlKHQuYm94ZXMuaW5kZXhPZihlKSwgMSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBuKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICBhID0gdC5pc0hvcml6b250YWwoKTtcbiAgICAgICAgICAgICAgICAgIGFcbiAgICAgICAgICAgICAgICAgICAgPyAoKGUgPSB0LnVwZGF0ZSh0Lm9wdGlvbnMuZnVsbFdpZHRoID8geCA6IEMsIE0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAoRCAtPSBlLmhlaWdodCkpXG4gICAgICAgICAgICAgICAgICAgIDogKChlID0gdC51cGRhdGUodywgUykpLCAoQyAtPSBlLndpZHRoKSksXG4gICAgICAgICAgICAgICAgICAgIEkucHVzaCh7IGhvcml6b250YWw6IGEsIG1pblNpemU6IGUsIGJveDogdCB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbyh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IGUuZmluZE5leHRXaGVyZShJLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5ib3ggPT09IHQ7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGlmIChhKVxuICAgICAgICAgICAgICAgICAgICBpZiAodC5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0geyBsZWZ0OiBBLCByaWdodDogVCwgdG9wOiAwLCBib3R0b206IDAgfTtcbiAgICAgICAgICAgICAgICAgICAgICB0LnVwZGF0ZSh0Lm9wdGlvbnMuZnVsbFdpZHRoID8geCA6IEMsIHkgLyAyLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHQudXBkYXRlKGEubWluU2l6ZS53aWR0aCwgRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHIodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLmZpbmROZXh0V2hlcmUoSSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5ib3ggPT09IHQ7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBpID0geyBsZWZ0OiAwLCByaWdodDogMCwgdG9wOiBQLCBib3R0b206IEYgfTtcbiAgICAgICAgICAgICAgICAgIGEgJiYgdC51cGRhdGUoYS5taW5TaXplLndpZHRoLCBELCBpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbCh0KSB7XG4gICAgICAgICAgICAgICAgICB0LmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICAgICAgICAgICAgID8gKCh0LmxlZnQgPSB0Lm9wdGlvbnMuZnVsbFdpZHRoID8gdSA6IEEpLFxuICAgICAgICAgICAgICAgICAgICAgICh0LnJpZ2h0ID0gdC5vcHRpb25zLmZ1bGxXaWR0aCA/IGEgLSBjIDogQSArIEMpLFxuICAgICAgICAgICAgICAgICAgICAgICh0LnRvcCA9IEwpLFxuICAgICAgICAgICAgICAgICAgICAgICh0LmJvdHRvbSA9IEwgKyB0LmhlaWdodCksXG4gICAgICAgICAgICAgICAgICAgICAgKEwgPSB0LmJvdHRvbSkpXG4gICAgICAgICAgICAgICAgICAgIDogKCh0LmxlZnQgPSBWKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC5yaWdodCA9IFYgKyB0LndpZHRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC50b3AgPSBQKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC5ib3R0b20gPSBQICsgRCksXG4gICAgICAgICAgICAgICAgICAgICAgKFYgPSB0LnJpZ2h0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcyA9IHQub3B0aW9ucy5sYXlvdXQsXG4gICAgICAgICAgICAgICAgICAgIGQgPSBzID8gcy5wYWRkaW5nIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGMgPSAwLFxuICAgICAgICAgICAgICAgICAgICBoID0gMCxcbiAgICAgICAgICAgICAgICAgICAgZiA9IDA7XG4gICAgICAgICAgICAgICAgICBpc05hTihkKVxuICAgICAgICAgICAgICAgICAgICA/ICgodSA9IGQubGVmdCB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAoYyA9IGQucmlnaHQgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgKGggPSBkLnRvcCB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAoZiA9IGQuYm90dG9tIHx8IDApKVxuICAgICAgICAgICAgICAgICAgICA6ICgodSA9IGQpLCAoYyA9IGQpLCAoaCA9IGQpLCAoZiA9IGQpKTtcbiAgICAgICAgICAgICAgICAgIHZhciBnID0gZS53aGVyZSh0LmJveGVzLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImxlZnRcIiA9PT0gdC5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgcCA9IGUud2hlcmUodC5ib3hlcywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJyaWdodFwiID09PSB0Lm9wdGlvbnMucG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBtID0gZS53aGVyZSh0LmJveGVzLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRvcFwiID09PSB0Lm9wdGlvbnMucG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBiID0gZS53aGVyZSh0LmJveGVzLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImJvdHRvbVwiID09PSB0Lm9wdGlvbnMucG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB2ID0gZS53aGVyZSh0LmJveGVzLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNoYXJ0QXJlYVwiID09PSB0Lm9wdGlvbnMucG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgbS5zb3J0KGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgKGUub3B0aW9ucy5mdWxsV2lkdGggPyAxIDogMCkgLVxuICAgICAgICAgICAgICAgICAgICAgICh0Lm9wdGlvbnMuZnVsbFdpZHRoID8gMSA6IDApXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgYi5zb3J0KGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICh0Lm9wdGlvbnMuZnVsbFdpZHRoID8gMSA6IDApIC1cbiAgICAgICAgICAgICAgICAgICAgICAgIChlLm9wdGlvbnMuZnVsbFdpZHRoID8gMSA6IDApXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB2YXIgeCA9IGEgLSB1IC0gYyxcbiAgICAgICAgICAgICAgICAgICAgeSA9IGkgLSBoIC0gZixcbiAgICAgICAgICAgICAgICAgICAgayA9IHggLyAyLFxuICAgICAgICAgICAgICAgICAgICBTID0geSAvIDIsXG4gICAgICAgICAgICAgICAgICAgIHcgPSAoYSAtIGspIC8gKGcubGVuZ3RoICsgcC5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICBNID0gKGkgLSBTKSAvIChtLmxlbmd0aCArIGIubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgQyA9IHgsXG4gICAgICAgICAgICAgICAgICAgIEQgPSB5LFxuICAgICAgICAgICAgICAgICAgICBJID0gW107XG4gICAgICAgICAgICAgICAgICBlLmVhY2goZy5jb25jYXQocCwgbSwgYiksIG4pO1xuICAgICAgICAgICAgICAgICAgdmFyIEEgPSB1LFxuICAgICAgICAgICAgICAgICAgICBUID0gYyxcbiAgICAgICAgICAgICAgICAgICAgUCA9IGgsXG4gICAgICAgICAgICAgICAgICAgIEYgPSBmO1xuICAgICAgICAgICAgICAgICAgZS5lYWNoKGcuY29uY2F0KHApLCBvKSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGcsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgQSArPSB0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKHAsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgVCArPSB0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKG0uY29uY2F0KGIpLCBvKSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKG0sIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgUCArPSB0LmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIEYgKz0gdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2goZy5jb25jYXQocCksIHIpLFxuICAgICAgICAgICAgICAgICAgICAoQSA9IHUpLFxuICAgICAgICAgICAgICAgICAgICAoVCA9IGMpLFxuICAgICAgICAgICAgICAgICAgICAoUCA9IGgpLFxuICAgICAgICAgICAgICAgICAgICAoRiA9IGYpLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2goZywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBBICs9IHQud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2gocCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBUICs9IHQud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2gobSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBQICs9IHQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgRiArPSB0LmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB2YXIgXyA9IGkgLSBQIC0gRixcbiAgICAgICAgICAgICAgICAgICAgUiA9IGEgLSBBIC0gVDtcbiAgICAgICAgICAgICAgICAgIChSICE9PSBDIHx8IF8gIT09IEQpICYmXG4gICAgICAgICAgICAgICAgICAgIChlLmVhY2goZywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0LmhlaWdodCA9IF87XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2gocCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0LmhlaWdodCA9IF87XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2gobSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0Lm9wdGlvbnMuZnVsbFdpZHRoIHx8ICh0LndpZHRoID0gUik7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2goYiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0Lm9wdGlvbnMuZnVsbFdpZHRoIHx8ICh0LndpZHRoID0gUik7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAoRCA9IF8pLFxuICAgICAgICAgICAgICAgICAgICAoQyA9IFIpKTtcbiAgICAgICAgICAgICAgICAgIHZhciBWID0gdSxcbiAgICAgICAgICAgICAgICAgICAgTCA9IGg7XG4gICAgICAgICAgICAgICAgICBlLmVhY2goZy5jb25jYXQobSksIGwpLFxuICAgICAgICAgICAgICAgICAgICAoViArPSBDKSxcbiAgICAgICAgICAgICAgICAgICAgKEwgKz0gRCksXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChwLCBsKSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGIsIGwpLFxuICAgICAgICAgICAgICAgICAgICAodC5jaGFydEFyZWEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgbGVmdDogQSxcbiAgICAgICAgICAgICAgICAgICAgICB0b3A6IFAsXG4gICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IEEgKyBDLFxuICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogUCArIEQsXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2godiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAoZS5sZWZ0ID0gdC5jaGFydEFyZWEubGVmdCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS50b3AgPSB0LmNoYXJ0QXJlYS50b3ApLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGUucmlnaHQgPSB0LmNoYXJ0QXJlYS5yaWdodCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5ib3R0b20gPSB0LmNoYXJ0QXJlYS5ib3R0b20pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZS51cGRhdGUoQywgRCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMzA6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZSh0LCBlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0LnVzZVBvaW50U3R5bGUgPyBlICogTWF0aC5TUVJUMiA6IHQuYm94V2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYSA9IHQuaGVscGVycyxcbiAgICAgICAgICAgICAgaSA9IGEubm9vcDtcbiAgICAgICAgICAgICh0LmRlZmF1bHRzLmdsb2JhbC5sZWdlbmQgPSB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICEwLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogXCJ0b3BcIixcbiAgICAgICAgICAgICAgZnVsbFdpZHRoOiAhMCxcbiAgICAgICAgICAgICAgcmV2ZXJzZTogITEsXG4gICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBlLmRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgbiA9IGkuZ2V0RGF0YXNldE1ldGEoYSk7XG4gICAgICAgICAgICAgICAgKG4uaGlkZGVuID1cbiAgICAgICAgICAgICAgICAgIG51bGwgPT09IG4uaGlkZGVuID8gIWkuZGF0YS5kYXRhc2V0c1thXS5oaWRkZW4gOiBudWxsKSxcbiAgICAgICAgICAgICAgICAgIGkudXBkYXRlKCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uSG92ZXI6IG51bGwsXG4gICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgIGJveFdpZHRoOiA0MCxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUxhYmVsczogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdC5kYXRhO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuaXNBcnJheShlLmRhdGFzZXRzKVxuICAgICAgICAgICAgICAgICAgICA/IGUuZGF0YXNldHMubWFwKGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBlLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IGEuaXNBcnJheShlLmJhY2tncm91bmRDb2xvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGUuYmFja2dyb3VuZENvbG9yWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiAhdC5pc0RhdGFzZXRWaXNpYmxlKGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ2FwOiBlLmJvcmRlckNhcFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lRGFzaDogZS5ib3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lRGFzaE9mZnNldDogZS5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lSm9pbjogZS5ib3JkZXJKb2luU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogZS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IGUucG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldEluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKVxuICAgICAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKHQuTGVnZW5kID0gdC5FbGVtZW50LmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIGEuZXh0ZW5kKHRoaXMsIHQpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZG91Z2hudXRNb2RlID0gITEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmVmb3JlVXBkYXRlOiBpLFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGkuYmVmb3JlVXBkYXRlKCksXG4gICAgICAgICAgICAgICAgICAgIChpLm1heFdpZHRoID0gdCksXG4gICAgICAgICAgICAgICAgICAgIChpLm1heEhlaWdodCA9IGUpLFxuICAgICAgICAgICAgICAgICAgICAoaS5tYXJnaW5zID0gYSksXG4gICAgICAgICAgICAgICAgICAgIGkuYmVmb3JlU2V0RGltZW5zaW9ucygpLFxuICAgICAgICAgICAgICAgICAgICBpLnNldERpbWVuc2lvbnMoKSxcbiAgICAgICAgICAgICAgICAgICAgaS5hZnRlclNldERpbWVuc2lvbnMoKSxcbiAgICAgICAgICAgICAgICAgICAgaS5iZWZvcmVCdWlsZExhYmVscygpLFxuICAgICAgICAgICAgICAgICAgICBpLmJ1aWxkTGFiZWxzKCksXG4gICAgICAgICAgICAgICAgICAgIGkuYWZ0ZXJCdWlsZExhYmVscygpLFxuICAgICAgICAgICAgICAgICAgICBpLmJlZm9yZUZpdCgpLFxuICAgICAgICAgICAgICAgICAgICBpLmZpdCgpLFxuICAgICAgICAgICAgICAgICAgICBpLmFmdGVyRml0KCksXG4gICAgICAgICAgICAgICAgICAgIGkuYWZ0ZXJVcGRhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgaS5taW5TaXplXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWZ0ZXJVcGRhdGU6IGksXG4gICAgICAgICAgICAgICAgYmVmb3JlU2V0RGltZW5zaW9uczogaSxcbiAgICAgICAgICAgICAgICBzZXREaW1lbnNpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICB0LmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICAgICAgICAgICAgID8gKCh0LndpZHRoID0gdC5tYXhXaWR0aCksXG4gICAgICAgICAgICAgICAgICAgICAgKHQubGVmdCA9IDApLFxuICAgICAgICAgICAgICAgICAgICAgICh0LnJpZ2h0ID0gdC53aWR0aCkpXG4gICAgICAgICAgICAgICAgICAgIDogKCh0LmhlaWdodCA9IHQubWF4SGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgICAodC50b3AgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC5ib3R0b20gPSB0LmhlaWdodCkpLFxuICAgICAgICAgICAgICAgICAgICAodC5wYWRkaW5nTGVmdCA9IDApLFxuICAgICAgICAgICAgICAgICAgICAodC5wYWRkaW5nVG9wID0gMCksXG4gICAgICAgICAgICAgICAgICAgICh0LnBhZGRpbmdSaWdodCA9IDApLFxuICAgICAgICAgICAgICAgICAgICAodC5wYWRkaW5nQm90dG9tID0gMCksXG4gICAgICAgICAgICAgICAgICAgICh0Lm1pblNpemUgPSB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZnRlclNldERpbWVuc2lvbnM6IGksXG4gICAgICAgICAgICAgICAgYmVmb3JlQnVpbGRMYWJlbHM6IGksXG4gICAgICAgICAgICAgICAgYnVpbGRMYWJlbHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICh0LmxlZ2VuZEl0ZW1zID0gdC5vcHRpb25zLmxhYmVscy5nZW5lcmF0ZUxhYmVscy5jYWxsKFxuICAgICAgICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICAgICAgICB0LmNoYXJ0XG4gICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgdC5vcHRpb25zLnJldmVyc2UgJiYgdC5sZWdlbmRJdGVtcy5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZnRlckJ1aWxkTGFiZWxzOiBpLFxuICAgICAgICAgICAgICAgIGJlZm9yZUZpdDogaSxcbiAgICAgICAgICAgICAgICBmaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbyA9IG4ubGFiZWxzLFxuICAgICAgICAgICAgICAgICAgICByID0gbi5kaXNwbGF5LFxuICAgICAgICAgICAgICAgICAgICBsID0gaS5jdHgsXG4gICAgICAgICAgICAgICAgICAgIHMgPSB0LmRlZmF1bHRzLmdsb2JhbCxcbiAgICAgICAgICAgICAgICAgICAgZCA9IGEuZ2V0VmFsdWVPckRlZmF1bHQsXG4gICAgICAgICAgICAgICAgICAgIHUgPSBkKG8uZm9udFNpemUsIHMuZGVmYXVsdEZvbnRTaXplKSxcbiAgICAgICAgICAgICAgICAgICAgYyA9IGQoby5mb250U3R5bGUsIHMuZGVmYXVsdEZvbnRTdHlsZSksXG4gICAgICAgICAgICAgICAgICAgIGggPSBkKG8uZm9udEZhbWlseSwgcy5kZWZhdWx0Rm9udEZhbWlseSksXG4gICAgICAgICAgICAgICAgICAgIGYgPSBhLmZvbnRTdHJpbmcodSwgYywgaCksXG4gICAgICAgICAgICAgICAgICAgIGcgPSAoaS5sZWdlbmRIaXRCb3hlcyA9IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgcCA9IGkubWluU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgbSA9IGkuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIChtXG4gICAgICAgICAgICAgICAgICAgICAgPyAoKHAud2lkdGggPSBpLm1heFdpZHRoKSwgKHAuaGVpZ2h0ID0gciA/IDEwIDogMCkpXG4gICAgICAgICAgICAgICAgICAgICAgOiAoKHAud2lkdGggPSByID8gMTAgOiAwKSwgKHAuaGVpZ2h0ID0gaS5tYXhIZWlnaHQpKSxcbiAgICAgICAgICAgICAgICAgICAgcilcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgobC5mb250ID0gZiksIG0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSAoaS5saW5lV2lkdGhzID0gWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBpLmxlZ2VuZEl0ZW1zLmxlbmd0aCA/IHUgKyBvLnBhZGRpbmcgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgIChsLnRleHRBbGlnbiA9IFwibGVmdFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChsLnRleHRCYXNlbGluZSA9IFwidG9wXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5lYWNoKGkubGVnZW5kSXRlbXMsIGZ1bmN0aW9uICh0LCBhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZShvLCB1KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gbiArIHUgLyAyICsgbC5tZWFzdXJlVGV4dCh0LnRleHQpLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBiW2IubGVuZ3RoIC0gMV0gKyByICsgby5wYWRkaW5nID49IGkud2lkdGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHYgKz0gdSArIG8ucGFkZGluZyksIChiW2IubGVuZ3RoXSA9IGkubGVmdCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnW2FdID0geyBsZWZ0OiAwLCB0b3A6IDAsIHdpZHRoOiByLCBoZWlnaHQ6IHUgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJbYi5sZW5ndGggLSAxXSArPSByICsgby5wYWRkaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHAuaGVpZ2h0ICs9IHYpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gby5wYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IChpLmNvbHVtbldpZHRocyA9IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBvLnBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBTID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHcgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgTSA9IHUgKyB4O1xuICAgICAgICAgICAgICAgICAgICAgIGEuZWFjaChpLmxlZ2VuZEl0ZW1zLCBmdW5jdGlvbiAodCwgYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlKG8sIHUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gaSArIHUgLyAyICsgbC5tZWFzdXJlVGV4dCh0LnRleHQpLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdyArIE0gPiBwLmhlaWdodCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGsgKz0gUyArIG8ucGFkZGluZyksIHkucHVzaChTKSwgKFMgPSAwKSwgKHcgPSAwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChTID0gTWF0aC5tYXgoUywgbikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAodyArPSBNKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGdbYV0gPSB7IGxlZnQ6IDAsIHRvcDogMCwgd2lkdGg6IG4sIGhlaWdodDogdSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChrICs9IFMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeS5wdXNoKFMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHAud2lkdGggKz0gayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIChpLndpZHRoID0gcC53aWR0aCksIChpLmhlaWdodCA9IHAuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFmdGVyRml0OiBpLFxuICAgICAgICAgICAgICAgIGlzSG9yaXpvbnRhbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIiA9PT0gdGhpcy5vcHRpb25zLnBvc2l0aW9uIHx8XG4gICAgICAgICAgICAgICAgICAgIFwiYm90dG9tXCIgPT09IHRoaXMub3B0aW9ucy5wb3NpdGlvblxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbyA9IG4ubGFiZWxzLFxuICAgICAgICAgICAgICAgICAgICByID0gdC5kZWZhdWx0cy5nbG9iYWwsXG4gICAgICAgICAgICAgICAgICAgIGwgPSByLmVsZW1lbnRzLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgIHMgPSBpLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBkID0gaS5saW5lV2lkdGhzO1xuICAgICAgICAgICAgICAgICAgaWYgKG4uZGlzcGxheSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdSxcbiAgICAgICAgICAgICAgICAgICAgICBjID0gaS5jdHgsXG4gICAgICAgICAgICAgICAgICAgICAgaCA9IGEuZ2V0VmFsdWVPckRlZmF1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgZiA9IGgoby5mb250Q29sb3IsIHIuZGVmYXVsdEZvbnRDb2xvciksXG4gICAgICAgICAgICAgICAgICAgICAgZyA9IGgoby5mb250U2l6ZSwgci5kZWZhdWx0Rm9udFNpemUpLFxuICAgICAgICAgICAgICAgICAgICAgIHAgPSBoKG8uZm9udFN0eWxlLCByLmRlZmF1bHRGb250U3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICAgIG0gPSBoKG8uZm9udEZhbWlseSwgci5kZWZhdWx0Rm9udEZhbWlseSksXG4gICAgICAgICAgICAgICAgICAgICAgYiA9IGEuZm9udFN0cmluZyhnLCBwLCBtKTtcbiAgICAgICAgICAgICAgICAgICAgKGMudGV4dEFsaWduID0gXCJsZWZ0XCIpLFxuICAgICAgICAgICAgICAgICAgICAgIChjLnRleHRCYXNlbGluZSA9IFwidG9wXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIChjLmxpbmVXaWR0aCA9IDAuNSksXG4gICAgICAgICAgICAgICAgICAgICAgKGMuc3Ryb2tlU3R5bGUgPSBmKSxcbiAgICAgICAgICAgICAgICAgICAgICAoYy5maWxsU3R5bGUgPSBmKSxcbiAgICAgICAgICAgICAgICAgICAgICAoYy5mb250ID0gYik7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2ID0gZShvLCBnKSxcbiAgICAgICAgICAgICAgICAgICAgICB4ID0gaS5sZWdlbmRIaXRCb3hlcyxcbiAgICAgICAgICAgICAgICAgICAgICB5ID0gZnVuY3Rpb24gKGUsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGlzTmFOKHYpIHx8IDAgPj0gdikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYy5zYXZlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMuZmlsbFN0eWxlID0gaChpLmZpbGxTdHlsZSwgci5kZWZhdWx0Q29sb3IpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYy5saW5lQ2FwID0gaChpLmxpbmVDYXAsIGwuYm9yZGVyQ2FwU3R5bGUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYy5saW5lRGFzaE9mZnNldCA9IGgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmxpbmVEYXNoT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5ib3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMubGluZUpvaW4gPSBoKGkubGluZUpvaW4sIGwuYm9yZGVySm9pblN0eWxlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMubGluZVdpZHRoID0gaChpLmxpbmVXaWR0aCwgbC5ib3JkZXJXaWR0aCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLnN0cm9rZVN0eWxlID0gaChpLnN0cm9rZVN0eWxlLCByLmRlZmF1bHRDb2xvcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IDAgPT09IGgoaS5saW5lV2lkdGgsIGwuYm9yZGVyV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMuc2V0TGluZURhc2ggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuc2V0TGluZURhc2goaChpLmxpbmVEYXNoLCBsLmJvcmRlckRhc2gpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmxhYmVscyAmJiBuLmxhYmVscy51c2VQb2ludFN0eWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IChnICogTWF0aC5TUVJUMikgLyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IHMgLyBNYXRoLlNRUlQyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IGUgKyBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGEgKyBkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuY2FudmFzSGVscGVycy5kcmF3UG9pbnQoYywgaS5wb2ludFN0eWxlLCBzLCB1LCBmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbyB8fCBjLnN0cm9rZVJlY3QoZSwgYSwgdiwgZyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmZpbGxSZWN0KGUsIGEsIHYsIGcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjLnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGsgPSBmdW5jdGlvbiAodCwgZSwgYSwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5maWxsVGV4dChhLnRleHQsIHYgKyBnIC8gMiArIHQsIGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLmhpZGRlbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLmJlZ2luUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLmxpbmVXaWR0aCA9IDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKHYgKyBnIC8gMiArIHQsIGUgKyBnIC8gMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5saW5lVG8odiArIGcgLyAyICsgdCArIGksIGUgKyBnIC8gMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5zdHJva2UoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBTID0gaS5pc0hvcml6b250YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgdSA9IFNcbiAgICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDogaS5sZWZ0ICsgKHMgLSBkWzBdKSAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGkudG9wICsgby5wYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBpLmxlZnQgKyBvLnBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGkudG9wICsgby5wYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSBnICsgby5wYWRkaW5nO1xuICAgICAgICAgICAgICAgICAgICBhLmVhY2goaS5sZWdlbmRJdGVtcywgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGMubWVhc3VyZVRleHQodC50ZXh0KS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSB2ICsgZyAvIDIgKyBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgciA9IHUueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1Lnk7XG4gICAgICAgICAgICAgICAgICAgICAgU1xuICAgICAgICAgICAgICAgICAgICAgICAgPyByICsgbiA+PSBzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgobCA9IHUueSArPSB3KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdS5saW5lKyssXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChyID0gdS54ID0gaS5sZWZ0ICsgKHMgLSBkW3UubGluZV0pIC8gMikpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGwgKyB3ID4gaS5ib3R0b20gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKChyID0gdS54ID0gciArIGkuY29sdW1uV2lkdGhzW3UubGluZV0gKyBvLnBhZGRpbmcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAobCA9IHUueSA9IGkudG9wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdS5saW5lKyspLFxuICAgICAgICAgICAgICAgICAgICAgICAgeShyLCBsLCB0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh4W2VdLmxlZnQgPSByKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh4W2VdLnRvcCA9IGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgayhyLCBsLCB0LCBhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFMgPyAodS54ICs9IG4gKyBvLnBhZGRpbmcpIDogKHUueSArPSB3KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoYW5kbGVFdmVudDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGUub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IFwibW91c2V1cFwiID09PSB0LnR5cGUgPyBcImNsaWNrXCIgOiB0LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIG8gPSAhMTtcbiAgICAgICAgICAgICAgICAgIGlmIChcIm1vdXNlbW92ZVwiID09PSBuKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaS5vbkhvdmVyKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJjbGlja1wiICE9PSBuKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGlmICghaS5vbkNsaWNrKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgciA9IGEuZ2V0UmVsYXRpdmVQb3NpdGlvbih0LCBlLmNoYXJ0LmNoYXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IHIueCxcbiAgICAgICAgICAgICAgICAgICAgcyA9IHIueTtcbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgbCA+PSBlLmxlZnQgJiZcbiAgICAgICAgICAgICAgICAgICAgbCA8PSBlLnJpZ2h0ICYmXG4gICAgICAgICAgICAgICAgICAgIHMgPj0gZS50b3AgJiZcbiAgICAgICAgICAgICAgICAgICAgcyA8PSBlLmJvdHRvbVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gZS5sZWdlbmRIaXRCb3hlcywgdSA9IDA7IHUgPCBkLmxlbmd0aDsgKyt1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBkW3VdO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPj0gYy5sZWZ0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBsIDw9IGMubGVmdCArIGMud2lkdGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPj0gYy50b3AgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPD0gYy50b3AgKyBjLmhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiY2xpY2tcIiA9PT0gbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9uQ2xpY2suY2FsbChlLCB0LCBlLmxlZ2VuZEl0ZW1zW3VdKSwgKG8gPSAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwibW91c2Vtb3ZlXCIgPT09IG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vbkhvdmVyLmNhbGwoZSwgdCwgZS5sZWdlbmRJdGVtc1t1XSksIChvID0gITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgdC5wbHVnaW5zLnJlZ2lzdGVyKHtcbiAgICAgICAgICAgICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLmxlZ2VuZDtcbiAgICAgICAgICAgICAgICAgIGkgJiZcbiAgICAgICAgICAgICAgICAgICAgKChlLmxlZ2VuZCA9IG5ldyB0LkxlZ2VuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgY3R4OiBlLmNoYXJ0LmN0eCxcbiAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBpLFxuICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0OiBlLFxuICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgIHQubGF5b3V0U2VydmljZS5hZGRCb3goZSwgZS5sZWdlbmQpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAzMTogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycy5ub29wO1xuICAgICAgICAgICAgKHQucGx1Z2lucyA9IHtcbiAgICAgICAgICAgICAgX3BsdWdpbnM6IFtdLFxuICAgICAgICAgICAgICByZWdpc3RlcjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuX3BsdWdpbnM7XG4gICAgICAgICAgICAgICAgW10uY29uY2F0KHQpLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIC0xID09PSBlLmluZGV4T2YodCkgJiYgZS5wdXNoKHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB1bnJlZ2lzdGVyOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5fcGx1Z2lucztcbiAgICAgICAgICAgICAgICBbXS5jb25jYXQodCkuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLmluZGV4T2YodCk7XG4gICAgICAgICAgICAgICAgICAtMSAhPT0gYSAmJiBlLnNwbGljZShhLCAxKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wbHVnaW5zID0gW107XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGNvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BsdWdpbnMubGVuZ3RoO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBnZXRBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGx1Z2lucztcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbm90aWZ5OiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLl9wbHVnaW5zLFxuICAgICAgICAgICAgICAgICAgbyA9IG4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoYSA9IDA7IG8gPiBhOyArK2EpXG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICgoaSA9IG5bYV0pLFxuICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGlbdF0gJiYgaVt0XS5hcHBseShpLCBlIHx8IFtdKSA9PT0gITEpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKHQuUGx1Z2luQmFzZSA9IHQuRWxlbWVudC5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGJlZm9yZUluaXQ6IGUsXG4gICAgICAgICAgICAgICAgYWZ0ZXJJbml0OiBlLFxuICAgICAgICAgICAgICAgIGJlZm9yZVVwZGF0ZTogZSxcbiAgICAgICAgICAgICAgICBhZnRlclVwZGF0ZTogZSxcbiAgICAgICAgICAgICAgICBiZWZvcmVEcmF3OiBlLFxuICAgICAgICAgICAgICAgIGFmdGVyRHJhdzogZSxcbiAgICAgICAgICAgICAgICBkZXN0cm95OiBlLFxuICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICh0LnBsdWdpblNlcnZpY2UgPSB0LnBsdWdpbnMpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDMyOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzO1xuICAgICAgICAgICAgKHQuZGVmYXVsdHMuc2NhbGUgPSB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICEwLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogXCJsZWZ0XCIsXG4gICAgICAgICAgICAgIGdyaWRMaW5lczoge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICEwLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcInJnYmEoMCwgMCwgMCwgMC4xKVwiLFxuICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogMSxcbiAgICAgICAgICAgICAgICBkcmF3Qm9yZGVyOiAhMCxcbiAgICAgICAgICAgICAgICBkcmF3T25DaGFydEFyZWE6ICEwLFxuICAgICAgICAgICAgICAgIGRyYXdUaWNrczogITAsXG4gICAgICAgICAgICAgICAgdGlja01hcmtMZW5ndGg6IDEwLFxuICAgICAgICAgICAgICAgIHplcm9MaW5lV2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgemVyb0xpbmVDb2xvcjogXCJyZ2JhKDAsMCwwLDAuMjUpXCIsXG4gICAgICAgICAgICAgICAgb2Zmc2V0R3JpZExpbmVzOiAhMSxcbiAgICAgICAgICAgICAgICBib3JkZXJEYXNoOiBbXSxcbiAgICAgICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzY2FsZUxhYmVsOiB7IGxhYmVsU3RyaW5nOiBcIlwiLCBkaXNwbGF5OiAhMSB9LFxuICAgICAgICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgICAgIGJlZ2luQXRaZXJvOiAhMSxcbiAgICAgICAgICAgICAgICBtaW5Sb3RhdGlvbjogMCxcbiAgICAgICAgICAgICAgICBtYXhSb3RhdGlvbjogNTAsXG4gICAgICAgICAgICAgICAgbWlycm9yOiAhMSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgICAgICByZXZlcnNlOiAhMSxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAhMCxcbiAgICAgICAgICAgICAgICBhdXRvU2tpcDogITAsXG4gICAgICAgICAgICAgICAgYXV0b1NraXBQYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgIGxhYmVsT2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiB0LlRpY2tzLmZvcm1hdHRlcnMudmFsdWVzLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICh0LlNjYWxlID0gdC5FbGVtZW50LmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgYmVmb3JlVXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBlLmNhbGxDYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVXBkYXRlLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAodCwgYSwgaSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgbi5iZWZvcmVVcGRhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgKG4ubWF4V2lkdGggPSB0KSxcbiAgICAgICAgICAgICAgICAgICAgKG4ubWF4SGVpZ2h0ID0gYSksXG4gICAgICAgICAgICAgICAgICAgIChuLm1hcmdpbnMgPSBlLmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICB7IGxlZnQ6IDAsIHJpZ2h0OiAwLCB0b3A6IDAsIGJvdHRvbTogMCB9LFxuICAgICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIG4uYmVmb3JlU2V0RGltZW5zaW9ucygpLFxuICAgICAgICAgICAgICAgICAgICBuLnNldERpbWVuc2lvbnMoKSxcbiAgICAgICAgICAgICAgICAgICAgbi5hZnRlclNldERpbWVuc2lvbnMoKSxcbiAgICAgICAgICAgICAgICAgICAgbi5iZWZvcmVEYXRhTGltaXRzKCksXG4gICAgICAgICAgICAgICAgICAgIG4uZGV0ZXJtaW5lRGF0YUxpbWl0cygpLFxuICAgICAgICAgICAgICAgICAgICBuLmFmdGVyRGF0YUxpbWl0cygpLFxuICAgICAgICAgICAgICAgICAgICBuLmJlZm9yZUJ1aWxkVGlja3MoKSxcbiAgICAgICAgICAgICAgICAgICAgbi5idWlsZFRpY2tzKCksXG4gICAgICAgICAgICAgICAgICAgIG4uYWZ0ZXJCdWlsZFRpY2tzKCksXG4gICAgICAgICAgICAgICAgICAgIG4uYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCksXG4gICAgICAgICAgICAgICAgICAgIG4uY29udmVydFRpY2tzVG9MYWJlbHMoKSxcbiAgICAgICAgICAgICAgICAgICAgbi5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpLFxuICAgICAgICAgICAgICAgICAgICBuLmJlZm9yZUNhbGN1bGF0ZVRpY2tSb3RhdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICBuLmNhbGN1bGF0ZVRpY2tSb3RhdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICBuLmFmdGVyQ2FsY3VsYXRlVGlja1JvdGF0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIG4uYmVmb3JlRml0KCksXG4gICAgICAgICAgICAgICAgICAgIG4uZml0KCksXG4gICAgICAgICAgICAgICAgICAgIG4uYWZ0ZXJGaXQoKSxcbiAgICAgICAgICAgICAgICAgICAgbi5hZnRlclVwZGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICBuLm1pblNpemVcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZnRlclVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZS5jYWxsQ2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVXBkYXRlLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmVmb3JlU2V0RGltZW5zaW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZS5jYWxsQ2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVNldERpbWVuc2lvbnMsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXREaW1lbnNpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICB0LmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICAgICAgICAgICAgID8gKCh0LndpZHRoID0gdC5tYXhXaWR0aCksXG4gICAgICAgICAgICAgICAgICAgICAgKHQubGVmdCA9IDApLFxuICAgICAgICAgICAgICAgICAgICAgICh0LnJpZ2h0ID0gdC53aWR0aCkpXG4gICAgICAgICAgICAgICAgICAgIDogKCh0LmhlaWdodCA9IHQubWF4SGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgICAodC50b3AgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC5ib3R0b20gPSB0LmhlaWdodCkpLFxuICAgICAgICAgICAgICAgICAgICAodC5wYWRkaW5nTGVmdCA9IDApLFxuICAgICAgICAgICAgICAgICAgICAodC5wYWRkaW5nVG9wID0gMCksXG4gICAgICAgICAgICAgICAgICAgICh0LnBhZGRpbmdSaWdodCA9IDApLFxuICAgICAgICAgICAgICAgICAgICAodC5wYWRkaW5nQm90dG9tID0gMCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZnRlclNldERpbWVuc2lvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGUuY2FsbENhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclNldERpbWVuc2lvbnMsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBiZWZvcmVEYXRhTGltaXRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBlLmNhbGxDYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlRGF0YUxpbWl0cywgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRldGVybWluZURhdGFMaW1pdHM6IGUubm9vcCxcbiAgICAgICAgICAgICAgICBhZnRlckRhdGFMaW1pdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGUuY2FsbENhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckRhdGFMaW1pdHMsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBiZWZvcmVCdWlsZFRpY2tzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBlLmNhbGxDYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlQnVpbGRUaWNrcywgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ1aWxkVGlja3M6IGUubm9vcCxcbiAgICAgICAgICAgICAgICBhZnRlckJ1aWxkVGlja3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGUuY2FsbENhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckJ1aWxkVGlja3MsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGUuY2FsbENhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24sIFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgZSA9IHQub3B0aW9ucy50aWNrcztcbiAgICAgICAgICAgICAgICAgIHQudGlja3MgPSB0LnRpY2tzLm1hcChlLnVzZXJDYWxsYmFjayB8fCBlLmNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBlLmNhbGxDYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24sIFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmVmb3JlQ2FsY3VsYXRlVGlja1JvdGF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBlLmNhbGxDYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlQ2FsY3VsYXRlVGlja1JvdGF0aW9uLCBbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZVRpY2tSb3RhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gYS5jdHgsXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0LmRlZmF1bHRzLmdsb2JhbCxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGEub3B0aW9ucy50aWNrcyxcbiAgICAgICAgICAgICAgICAgICAgciA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoby5mb250U2l6ZSwgbi5kZWZhdWx0Rm9udFNpemUpLFxuICAgICAgICAgICAgICAgICAgICBsID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChvLmZvbnRTdHlsZSwgbi5kZWZhdWx0Rm9udFN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoby5mb250RmFtaWx5LCBuLmRlZmF1bHRGb250RmFtaWx5KSxcbiAgICAgICAgICAgICAgICAgICAgZCA9IGUuZm9udFN0cmluZyhyLCBsLCBzKTtcbiAgICAgICAgICAgICAgICAgIGkuZm9udCA9IGQ7XG4gICAgICAgICAgICAgICAgICB2YXIgdSxcbiAgICAgICAgICAgICAgICAgICAgYyA9IGkubWVhc3VyZVRleHQoYS50aWNrc1swXSkud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGggPSBpLm1lYXN1cmVUZXh0KGEudGlja3NbYS50aWNrcy5sZW5ndGggLSAxXSkud2lkdGg7XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICgoYS5sYWJlbFJvdGF0aW9uID0gby5taW5Sb3RhdGlvbiB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgKGEucGFkZGluZ1JpZ2h0ID0gMCksXG4gICAgICAgICAgICAgICAgICAgIChhLnBhZGRpbmdMZWZ0ID0gMCksXG4gICAgICAgICAgICAgICAgICAgIGEub3B0aW9ucy5kaXNwbGF5ICYmIGEuaXNIb3Jpem9udGFsKCkpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgKGEucGFkZGluZ1JpZ2h0ID0gaCAvIDIgKyAzKSxcbiAgICAgICAgICAgICAgICAgICAgICAoYS5wYWRkaW5nTGVmdCA9IGMgLyAyICsgMyksXG4gICAgICAgICAgICAgICAgICAgICAgYS5sb25nZXN0VGV4dENhY2hlIHx8IChhLmxvbmdlc3RUZXh0Q2FjaGUgPSB7fSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGYsXG4gICAgICAgICAgICAgICAgICAgICAgICBnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcCA9IGUubG9uZ2VzdFRleHQoaSwgZCwgYS50aWNrcywgYS5sb25nZXN0VGV4dENhY2hlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgYiA9IGEuZ2V0UGl4ZWxGb3JUaWNrKDEpIC0gYS5nZXRQaXhlbEZvclRpY2soMCkgLSA2O1xuICAgICAgICAgICAgICAgICAgICAgIG0gPiBiICYmIGEubGFiZWxSb3RhdGlvbiA8IG8ubWF4Um90YXRpb247XG5cbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgKChmID0gTWF0aC5jb3MoZS50b1JhZGlhbnMoYS5sYWJlbFJvdGF0aW9uKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGcgPSBNYXRoLnNpbihlLnRvUmFkaWFucyhhLmxhYmVsUm90YXRpb24pKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9IGYgKiBjKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHUgKyByIC8gMiA+IGEueUxhYmVsV2lkdGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGEucGFkZGluZ0xlZnQgPSB1ICsgciAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGEucGFkZGluZ1JpZ2h0ID0gciAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZyAqIHAgPiBhLm1heEhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEubGFiZWxSb3RhdGlvbi0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGEubGFiZWxSb3RhdGlvbisrLCAobSA9IGYgKiBwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYS5tYXJnaW5zICYmXG4gICAgICAgICAgICAgICAgICAgICgoYS5wYWRkaW5nTGVmdCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgIGEucGFkZGluZ0xlZnQgLSBhLm1hcmdpbnMubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAoYS5wYWRkaW5nUmlnaHQgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICBhLnBhZGRpbmdSaWdodCAtIGEubWFyZ2lucy5yaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgICkpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFmdGVyQ2FsY3VsYXRlVGlja1JvdGF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBlLmNhbGxDYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJDYWxjdWxhdGVUaWNrUm90YXRpb24sIFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmVmb3JlRml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBlLmNhbGxDYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlRml0LCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSAoYS5taW5TaXplID0geyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0pLFxuICAgICAgICAgICAgICAgICAgICBuID0gYS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5kZWZhdWx0cy5nbG9iYWwsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBuLnRpY2tzLFxuICAgICAgICAgICAgICAgICAgICBsID0gbi5zY2FsZUxhYmVsLFxuICAgICAgICAgICAgICAgICAgICBzID0gbi5ncmlkTGluZXMsXG4gICAgICAgICAgICAgICAgICAgIGQgPSBuLmRpc3BsYXksXG4gICAgICAgICAgICAgICAgICAgIHUgPSBhLmlzSG9yaXpvbnRhbCgpLFxuICAgICAgICAgICAgICAgICAgICBjID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChyLmZvbnRTaXplLCBvLmRlZmF1bHRGb250U2l6ZSksXG4gICAgICAgICAgICAgICAgICAgIGggPSBlLmdldFZhbHVlT3JEZWZhdWx0KHIuZm9udFN0eWxlLCBvLmRlZmF1bHRGb250U3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICBmID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChyLmZvbnRGYW1pbHksIG8uZGVmYXVsdEZvbnRGYW1pbHkpLFxuICAgICAgICAgICAgICAgICAgICBnID0gZS5mb250U3RyaW5nKGMsIGgsIGYpLFxuICAgICAgICAgICAgICAgICAgICBwID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChsLmZvbnRTaXplLCBvLmRlZmF1bHRGb250U2l6ZSksXG4gICAgICAgICAgICAgICAgICAgIG0gPSBuLmdyaWRMaW5lcy50aWNrTWFya0xlbmd0aDtcbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKHVcbiAgICAgICAgICAgICAgICAgICAgICA/IChpLndpZHRoID0gYS5pc0Z1bGxXaWR0aCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gYS5tYXhXaWR0aCAtIGEubWFyZ2lucy5sZWZ0IC0gYS5tYXJnaW5zLnJpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYS5tYXhXaWR0aClcbiAgICAgICAgICAgICAgICAgICAgICA6IChpLndpZHRoID0gZCAmJiBzLmRyYXdUaWNrcyA/IG0gOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgdVxuICAgICAgICAgICAgICAgICAgICAgID8gKGkuaGVpZ2h0ID0gZCAmJiBzLmRyYXdUaWNrcyA/IG0gOiAwKVxuICAgICAgICAgICAgICAgICAgICAgIDogKGkuaGVpZ2h0ID0gYS5tYXhIZWlnaHQpLFxuICAgICAgICAgICAgICAgICAgICBsLmRpc3BsYXkgJiZcbiAgICAgICAgICAgICAgICAgICAgICBkICYmXG4gICAgICAgICAgICAgICAgICAgICAgKHUgPyAoaS5oZWlnaHQgKz0gMS41ICogcCkgOiAoaS53aWR0aCArPSAxLjUgKiBwKSksXG4gICAgICAgICAgICAgICAgICAgIHIuZGlzcGxheSAmJiBkKVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGEubG9uZ2VzdFRleHRDYWNoZSB8fCAoYS5sb25nZXN0VGV4dENhY2hlID0ge30pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGUubG9uZ2VzdFRleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmN0eCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgICAgICAgICBhLnRpY2tzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5sb25nZXN0VGV4dENhY2hlXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICB2ID0gZS5udW1iZXJPZkxhYmVsTGluZXMoYS50aWNrcyksXG4gICAgICAgICAgICAgICAgICAgICAgeCA9IDAuNSAqIGM7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgYS5sb25nZXN0TGFiZWxXaWR0aCA9IGI7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oZS50b1JhZGlhbnMoYS5sYWJlbFJvdGF0aW9uKSkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLmxvbmdlc3RMYWJlbFdpZHRoICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgKiB2ICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggKiB2O1xuICAgICAgICAgICAgICAgICAgICAgIChpLmhlaWdodCA9IE1hdGgubWluKGEubWF4SGVpZ2h0LCBpLmhlaWdodCArIHkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChhLmN0eC5mb250ID0gZyk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGsgPSBhLmN0eC5tZWFzdXJlVGV4dChhLnRpY2tzWzBdKS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFMgPSBhLmN0eC5tZWFzdXJlVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS50aWNrc1thLnRpY2tzLmxlbmd0aCAtIDFdXG4gICAgICAgICAgICAgICAgICAgICAgICApLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgdyA9IE1hdGguY29zKGUudG9SYWRpYW5zKGEubGFiZWxSb3RhdGlvbikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgTSA9IE1hdGguc2luKGUudG9SYWRpYW5zKGEubGFiZWxSb3RhdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICAgIChhLnBhZGRpbmdMZWZ0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIDAgIT09IGEubGFiZWxSb3RhdGlvbiA/IHcgKiBrICsgMyA6IGsgLyAyICsgMyksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYS5wYWRkaW5nUmlnaHQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAwICE9PSBhLmxhYmVsUm90YXRpb24gPyBNICogKGMgLyAyKSArIDMgOiBTIC8gMiArIDMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBDID0gYS5tYXhXaWR0aCAtIGkud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBEID0gci5taXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgRCA/IChiID0gMCkgOiAoYiArPSBhLm9wdGlvbnMudGlja3MucGFkZGluZyksXG4gICAgICAgICAgICAgICAgICAgICAgICBDID4gYiA/IChpLndpZHRoICs9IGIpIDogKGkud2lkdGggPSBhLm1heFdpZHRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChhLnBhZGRpbmdUb3AgPSBjIC8gMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYS5wYWRkaW5nQm90dG9tID0gYyAvIDIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBhLm1hcmdpbnMgJiZcbiAgICAgICAgICAgICAgICAgICAgKChhLnBhZGRpbmdMZWZ0ID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgYS5wYWRkaW5nTGVmdCAtIGEubWFyZ2lucy5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChhLnBhZGRpbmdUb3AgPSBNYXRoLm1heChhLnBhZGRpbmdUb3AgLSBhLm1hcmdpbnMudG9wLCAwKSksXG4gICAgICAgICAgICAgICAgICAgIChhLnBhZGRpbmdSaWdodCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgIGEucGFkZGluZ1JpZ2h0IC0gYS5tYXJnaW5zLnJpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChhLnBhZGRpbmdCb3R0b20gPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICBhLnBhZGRpbmdCb3R0b20gLSBhLm1hcmdpbnMuYm90dG9tLFxuICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgKSkpLFxuICAgICAgICAgICAgICAgICAgICAoYS53aWR0aCA9IGkud2lkdGgpLFxuICAgICAgICAgICAgICAgICAgICAoYS5oZWlnaHQgPSBpLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZnRlckZpdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZS5jYWxsQ2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyRml0LCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaXNIb3Jpem9udGFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBcInRvcFwiID09PSB0aGlzLm9wdGlvbnMucG9zaXRpb24gfHxcbiAgICAgICAgICAgICAgICAgICAgXCJib3R0b21cIiA9PT0gdGhpcy5vcHRpb25zLnBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaXNGdWxsV2lkdGg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZnVsbFdpZHRoO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0UmlnaHRWYWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09PSB0IHx8IFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIHRcbiAgICAgICAgICAgICAgICAgICAgPyBOYU5cbiAgICAgICAgICAgICAgICAgICAgOiBcIm51bWJlclwiICE9IHR5cGVvZiB0IHx8IGlzRmluaXRlKHQpXG4gICAgICAgICAgICAgICAgICAgID8gXCJvYmplY3RcIiA9PSB0eXBlb2YgdFxuICAgICAgICAgICAgICAgICAgICAgID8gdCBpbnN0YW5jZW9mIERhdGUgfHwgdC5pc1ZhbGlkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5nZXRSaWdodFZhbHVlKHRoaXMuaXNIb3Jpem9udGFsKCkgPyB0LnggOiB0LnkpXG4gICAgICAgICAgICAgICAgICAgICAgOiB0XG4gICAgICAgICAgICAgICAgICAgIDogTmFOO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0TGFiZWxGb3JJbmRleDogZS5ub29wLFxuICAgICAgICAgICAgICAgIGdldFBpeGVsRm9yVmFsdWU6IGUubm9vcCxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZUZvclBpeGVsOiBlLm5vb3AsXG4gICAgICAgICAgICAgICAgZ2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgaWYgKGEuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBhLndpZHRoIC0gKGEucGFkZGluZ0xlZnQgKyBhLnBhZGRpbmdSaWdodCksXG4gICAgICAgICAgICAgICAgICAgICAgbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICBpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLnRpY2tzLmxlbmd0aCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGEub3B0aW9ucy5ncmlkTGluZXMub2Zmc2V0R3JpZExpbmVzID8gMCA6IDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIG8gPSBuICogdCArIGEucGFkZGluZ0xlZnQ7XG4gICAgICAgICAgICAgICAgICAgIGUgJiYgKG8gKz0gbiAvIDIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGEubGVmdCArIE1hdGgucm91bmQobyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAociArPSBhLmlzRnVsbFdpZHRoKCkgPyBhLm1hcmdpbnMubGVmdCA6IDApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIGwgPSBhLmhlaWdodCAtIChhLnBhZGRpbmdUb3AgKyBhLnBhZGRpbmdCb3R0b20pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGEudG9wICsgdCAqIChsIC8gKGEudGlja3MubGVuZ3RoIC0gMSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0UGl4ZWxGb3JEZWNpbWFsOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgaWYgKGUuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLndpZHRoIC0gKGUucGFkZGluZ0xlZnQgKyBlLnBhZGRpbmdSaWdodCksXG4gICAgICAgICAgICAgICAgICAgICAgaSA9IGEgKiB0ICsgZS5wYWRkaW5nTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICBuID0gZS5sZWZ0ICsgTWF0aC5yb3VuZChpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChuICs9IGUuaXNGdWxsV2lkdGgoKSA/IGUubWFyZ2lucy5sZWZ0IDogMCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZS50b3AgKyB0ICogZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRCYXNlUGl4ZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgZSA9IHQubWluLFxuICAgICAgICAgICAgICAgICAgICBhID0gdC5tYXg7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdC5nZXRQaXhlbEZvclZhbHVlKFxuICAgICAgICAgICAgICAgICAgICB0LmJlZ2luQXRaZXJvXG4gICAgICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICAgICAgOiAwID4gZSAmJiAwID4gYVxuICAgICAgICAgICAgICAgICAgICAgID8gYVxuICAgICAgICAgICAgICAgICAgICAgIDogZSA+IDAgJiYgYSA+IDBcbiAgICAgICAgICAgICAgICAgICAgICA/IGVcbiAgICAgICAgICAgICAgICAgICAgICA6IDBcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBuID0gaS5vcHRpb25zO1xuICAgICAgICAgICAgICAgICAgaWYgKG4uZGlzcGxheSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbyxcbiAgICAgICAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgICAgICAgIGwgPSBpLmN0eCxcbiAgICAgICAgICAgICAgICAgICAgICBzID0gdC5kZWZhdWx0cy5nbG9iYWwsXG4gICAgICAgICAgICAgICAgICAgICAgZCA9IG4udGlja3MsXG4gICAgICAgICAgICAgICAgICAgICAgdSA9IG4uZ3JpZExpbmVzLFxuICAgICAgICAgICAgICAgICAgICAgIGMgPSBuLnNjYWxlTGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgaCA9IDAgIT09IGkubGFiZWxSb3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICBmID0gZC5hdXRvU2tpcCxcbiAgICAgICAgICAgICAgICAgICAgICBnID0gaS5pc0hvcml6b250YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgZC5tYXhUaWNrc0xpbWl0ICYmIChyID0gZC5tYXhUaWNrc0xpbWl0KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBlLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5mb250Q29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBzLmRlZmF1bHRGb250Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIG0gPSBlLmdldFZhbHVlT3JEZWZhdWx0KGQuZm9udFNpemUsIHMuZGVmYXVsdEZvbnRTaXplKSxcbiAgICAgICAgICAgICAgICAgICAgICBiID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChkLmZvbnRTdHlsZSwgcy5kZWZhdWx0Rm9udFN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICB2ID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuZm9udEZhbWlseSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuZGVmYXVsdEZvbnRGYW1pbHlcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIHggPSBlLmZvbnRTdHJpbmcobSwgYiwgdiksXG4gICAgICAgICAgICAgICAgICAgICAgeSA9IHUudGlja01hcmtMZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgayA9IGUuZ2V0VmFsdWVPckRlZmF1bHQodS5ib3JkZXJEYXNoLCBzLmJvcmRlckRhc2gpLFxuICAgICAgICAgICAgICAgICAgICAgIFMgPSBlLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgdS5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcy5ib3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICB3ID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChjLmZvbnRDb2xvciwgcy5kZWZhdWx0Rm9udENvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICBNID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChjLmZvbnRTaXplLCBzLmRlZmF1bHRGb250U2l6ZSksXG4gICAgICAgICAgICAgICAgICAgICAgQyA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoYy5mb250U3R5bGUsIHMuZGVmYXVsdEZvbnRTdHlsZSksXG4gICAgICAgICAgICAgICAgICAgICAgRCA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmZvbnRGYW1pbHksXG4gICAgICAgICAgICAgICAgICAgICAgICBzLmRlZmF1bHRGb250RmFtaWx5XG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBJID0gZS5mb250U3RyaW5nKE0sIEMsIEQpLFxuICAgICAgICAgICAgICAgICAgICAgIEEgPSBlLnRvUmFkaWFucyhpLmxhYmVsUm90YXRpb24pLFxuICAgICAgICAgICAgICAgICAgICAgIFQgPSBNYXRoLmNvcyhBKSxcbiAgICAgICAgICAgICAgICAgICAgICBQID0gaS5sb25nZXN0TGFiZWxXaWR0aCAqIFQ7XG4gICAgICAgICAgICAgICAgICAgIGwuZmlsbFN0eWxlID0gcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIEYgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAoKG8gPSAhMSksXG4gICAgICAgICAgICAgICAgICAgICAgICBoICYmIChQIC89IDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKFAgKyBkLmF1dG9Ta2lwUGFkZGluZykgKiBpLnRpY2tzLmxlbmd0aCA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkud2lkdGggLSAoaS5wYWRkaW5nTGVmdCArIGkucGFkZGluZ1JpZ2h0KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAobyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoUCArIGQuYXV0b1NraXBQYWRkaW5nKSAqIGkudGlja3MubGVuZ3RoKSAvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLndpZHRoIC0gKGkucGFkZGluZ0xlZnQgKyBpLnBhZGRpbmdSaWdodCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgICByICYmIGkudGlja3MubGVuZ3RoID4gcilcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgIW8gfHwgaS50aWNrcy5sZW5ndGggLyAobyB8fCAxKSA+IHI7IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbyB8fCAobyA9IDEpLCAobyArPSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICBmIHx8IChvID0gITEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBfID0gXCJyaWdodFwiID09PSBuLnBvc2l0aW9uID8gaS5sZWZ0IDogaS5yaWdodCAtIHksXG4gICAgICAgICAgICAgICAgICAgICAgUiA9IFwicmlnaHRcIiA9PT0gbi5wb3NpdGlvbiA/IGkubGVmdCArIHkgOiBpLnJpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgIFYgPSBcImJvdHRvbVwiID09PSBuLnBvc2l0aW9uID8gaS50b3AgOiBpLmJvdHRvbSAtIHksXG4gICAgICAgICAgICAgICAgICAgICAgTCA9IFwiYm90dG9tXCIgPT09IG4ucG9zaXRpb24gPyBpLnRvcCArIHkgOiBpLmJvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgIChlLmVhY2goaS50aWNrcywgZnVuY3Rpb24gKHQsIHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IHQgJiYgbnVsbCAhPT0gdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IGkudGlja3MubGVuZ3RoID09PSByICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvID4gMSAmJiByICUgbyA+IDApIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAociAlIG8gPT09IDAgJiYgciArIG8gPj0gaS50aWNrcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCFzIHx8IGwpICYmIHZvaWQgMCAhPT0gdCAmJiBudWxsICE9PSB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMsIGY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgaS56ZXJvTGluZUluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGkuemVyb0xpbmVJbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoKGMgPSB1Lnplcm9MaW5lV2lkdGgpLCAoZiA9IHUuemVyb0xpbmVDb2xvcikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgoYyA9IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUubGluZVdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmID0gZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQodS5jb2xvciwgcikpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFQgPSBcIm1pZGRsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUCA9IFwibWlkZGxlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFAgPSBcInRvcFwiID09PSBuLnBvc2l0aW9uID8gXCJib3R0b21cIiA6IFwidG9wXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoVCA9IGggPyBcInJpZ2h0XCIgOiBcImNlbnRlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBPID0gaS5nZXRQaXhlbEZvclRpY2socikgKyBlLmFsaWFzUGl4ZWwoYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoRCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuZ2V0UGl4ZWxGb3JUaWNrKHIsIHUub2Zmc2V0R3JpZExpbmVzKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubGFiZWxPZmZzZXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoSSA9IGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGkudG9wICsgMTJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwidG9wXCIgPT09IG4ucG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGkuYm90dG9tIC0geVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaS50b3AgKyB5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHAgPSBiID0geCA9IE0gPSBPKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0gPSBWKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHYgPSBMKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHcgPSBhLnRvcCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChDID0gYS5ib3R0b20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxlZnRcIiA9PT0gbi5wb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGQubWlycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoKEQgPSBpLnJpZ2h0ICsgZC5wYWRkaW5nKSwgKFQgPSBcImxlZnRcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoKEQgPSBpLnJpZ2h0IC0gZC5wYWRkaW5nKSwgKFQgPSBcInJpZ2h0XCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQubWlycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKChEID0gaS5sZWZ0IC0gZC5wYWRkaW5nKSwgKFQgPSBcInJpZ2h0XCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgoRCA9IGkubGVmdCArIGQucGFkZGluZyksIChUID0gXCJsZWZ0XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBCID0gaS5nZXRQaXhlbEZvclRpY2socik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQiArPSBlLmFsaWFzUGl4ZWwoYykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoSSA9IGkuZ2V0UGl4ZWxGb3JUaWNrKHIsIHUub2Zmc2V0R3JpZExpbmVzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwID0gXyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChiID0gUiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh4ID0gYS5sZWZ0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE0gPSBhLnJpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0gPSB2ID0gdyA9IEMgPSBCKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4MTogcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5MTogbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4MjogYixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5MjogdixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxOiB4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IHcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MjogTSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkyOiBDLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxYOiBELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxZOiBJLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xXaWR0aDogYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsQ29sb3I6IGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbEJvcmRlckRhc2g6IGssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbEJvcmRlckRhc2hPZmZzZXQ6IFMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogLTEgKiBBLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QmFzZWxpbmU6IFAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IFQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBlLmVhY2goRiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHUuZGlzcGxheSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsLnNhdmUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobC5saW5lV2lkdGggPSB0LmdsV2lkdGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsLnN0cm9rZVN0eWxlID0gdC5nbENvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLnNldExpbmVEYXNoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobC5zZXRMaW5lRGFzaCh0LmdsQm9yZGVyRGFzaCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobC5saW5lRGFzaE9mZnNldCA9IHQuZ2xCb3JkZXJEYXNoT2Zmc2V0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1LmRyYXdUaWNrcyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwubW92ZVRvKHQudHgxLCB0LnR5MSksIGwubGluZVRvKHQudHgyLCB0LnR5MikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUuZHJhd09uQ2hhcnRBcmVhICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobC5tb3ZlVG8odC54MSwgdC55MSksIGwubGluZVRvKHQueDIsIHQueTIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLnN0cm9rZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwucmVzdG9yZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZC5kaXNwbGF5KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGwuc2F2ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwudHJhbnNsYXRlKHQubGFiZWxYLCB0LmxhYmVsWSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5yb3RhdGUodC5yb3RhdGlvbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwuZm9udCA9IHgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsLnRleHRCYXNlbGluZSA9IHQudGV4dEJhc2VsaW5lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobC50ZXh0QWxpZ24gPSB0LnRleHRBbGlnbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gdC5sYWJlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuaXNBcnJheShhKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAwLCBuID0gLShhLmxlbmd0aCAtIDEpICogbSAqIDAuNzU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpIDwgYS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLmZpbGxUZXh0KFwiXCIgKyBhW2ldLCAwLCBuKSwgKG4gKz0gMS41ICogbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgbC5maWxsVGV4dChhLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgYy5kaXNwbGF5KVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgTyxcbiAgICAgICAgICAgICAgICAgICAgICAgIEIsXG4gICAgICAgICAgICAgICAgICAgICAgICBXID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZylcbiAgICAgICAgICAgICAgICAgICAgICAgIChPID0gaS5sZWZ0ICsgKGkucmlnaHQgLSBpLmxlZnQpIC8gMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChCID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJvdHRvbVwiID09PSBuLnBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGkuYm90dG9tIC0gTSAvIDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaS50b3AgKyBNIC8gMik7XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeiA9IFwibGVmdFwiID09PSBuLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgKE8gPSB6ID8gaS5sZWZ0ICsgTSAvIDIgOiBpLnJpZ2h0IC0gTSAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoQiA9IGkudG9wICsgKGkuYm90dG9tIC0gaS50b3ApIC8gMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChXID0geiA/IC0wLjUgKiBNYXRoLlBJIDogMC41ICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGwuc2F2ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbC50cmFuc2xhdGUoTywgQiksXG4gICAgICAgICAgICAgICAgICAgICAgICBsLnJvdGF0ZShXKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChsLnRleHRBbGlnbiA9IFwiY2VudGVyXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGwudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAobC5maWxsU3R5bGUgPSB3KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChsLmZvbnQgPSBJKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGwuZmlsbFRleHQoYy5sYWJlbFN0cmluZywgMCwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBsLnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodS5kcmF3Qm9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgKGwubGluZVdpZHRoID0gZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICB1LmxpbmVXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChsLnN0cm9rZVN0eWxlID0gZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHUuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBOID0gaS5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgRSA9IGkucmlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBIID0gaS50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICBVID0gaS5ib3R0b20sXG4gICAgICAgICAgICAgICAgICAgICAgICBqID0gZS5hbGlhc1BpeGVsKGwubGluZVdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICBnXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICgoSCA9IFUgPSBcInRvcFwiID09PSBuLnBvc2l0aW9uID8gaS5ib3R0b20gOiBpLnRvcCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChIICs9IGopLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoVSArPSBqKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKChOID0gRSA9IFwibGVmdFwiID09PSBuLnBvc2l0aW9uID8gaS5yaWdodCA6IGkubGVmdCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChOICs9IGopLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoRSArPSBqKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBsLmJlZ2luUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbC5tb3ZlVG8oTiwgSCksXG4gICAgICAgICAgICAgICAgICAgICAgICBsLmxpbmVUbyhFLCBVKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGwuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMzM6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmhlbHBlcnM7XG4gICAgICAgICAgICB0LnNjYWxlU2VydmljZSA9IHtcbiAgICAgICAgICAgICAgY29uc3RydWN0b3JzOiB7fSxcbiAgICAgICAgICAgICAgZGVmYXVsdHM6IHt9LFxuICAgICAgICAgICAgICByZWdpc3RlclNjYWxlVHlwZTogZnVuY3Rpb24gKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAodGhpcy5jb25zdHJ1Y3RvcnNbdF0gPSBhKSwgKHRoaXMuZGVmYXVsdHNbdF0gPSBlLmNsb25lKGkpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZ2V0U2NhbGVDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcnMuaGFzT3duUHJvcGVydHkodClcbiAgICAgICAgICAgICAgICAgID8gdGhpcy5jb25zdHJ1Y3RvcnNbdF1cbiAgICAgICAgICAgICAgICAgIDogdm9pZCAwO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBnZXRTY2FsZURlZmF1bHRzOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRzLmhhc093blByb3BlcnR5KGEpXG4gICAgICAgICAgICAgICAgICA/IGUuc2NhbGVNZXJnZSh0LmRlZmF1bHRzLnNjYWxlLCB0aGlzLmRlZmF1bHRzW2FdKVxuICAgICAgICAgICAgICAgICAgOiB7fTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdXBkYXRlU2NhbGVEZWZhdWx0czogZnVuY3Rpb24gKHQsIGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuZGVmYXVsdHM7XG4gICAgICAgICAgICAgICAgaS5oYXNPd25Qcm9wZXJ0eSh0KSAmJiAoaVt0XSA9IGUuZXh0ZW5kKGlbdF0sIGEpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYWRkU2NhbGVzVG9MYXlvdXQ6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgZS5lYWNoKGEuc2NhbGVzLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgdC5sYXlvdXRTZXJ2aWNlLmFkZEJveChhLCBlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMzQ6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmhlbHBlcnM7XG4gICAgICAgICAgICB0LlRpY2tzID0ge1xuICAgICAgICAgICAgICBnZW5lcmF0b3JzOiB7XG4gICAgICAgICAgICAgICAgbGluZWFyOiBmdW5jdGlvbiAodCwgYSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgIG4gPSBbXTtcbiAgICAgICAgICAgICAgICAgIGlmICh0LnN0ZXBTaXplICYmIHQuc3RlcFNpemUgPiAwKSBpID0gdC5zdGVwU2l6ZTtcbiAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGUubmljZU51bShhLm1heCAtIGEubWluLCAhMSk7XG4gICAgICAgICAgICAgICAgICAgIGkgPSBlLm5pY2VOdW0obyAvICh0Lm1heFRpY2tzIC0gMSksICEwKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHZhciByID0gTWF0aC5mbG9vcihhLm1pbiAvIGkpICogaSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IE1hdGguY2VpbChhLm1heCAvIGkpICogaTtcbiAgICAgICAgICAgICAgICAgIGlmICh0Lm1pbiAmJiB0Lm1heCAmJiB0LnN0ZXBTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gKHQubWF4IC0gdC5taW4pICUgdC5zdGVwU2l6ZSA9PT0gMDtcbiAgICAgICAgICAgICAgICAgICAgcyAmJiAoKHIgPSB0Lm1pbiksIChsID0gdC5tYXgpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHZhciBkID0gKGwgLSByKSAvIGk7XG4gICAgICAgICAgICAgICAgICAoZCA9IGUuYWxtb3N0RXF1YWxzKGQsIE1hdGgucm91bmQoZCksIGkgLyAxZTMpXG4gICAgICAgICAgICAgICAgICAgID8gTWF0aC5yb3VuZChkKVxuICAgICAgICAgICAgICAgICAgICA6IE1hdGguY2VpbChkKSksXG4gICAgICAgICAgICAgICAgICAgIG4ucHVzaCh2b2lkIDAgIT09IHQubWluID8gdC5taW4gOiByKTtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIHUgPSAxOyBkID4gdTsgKyt1KSBuLnB1c2gociArIHUgKiBpKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuLnB1c2godm9pZCAwICE9PSB0Lm1heCA/IHQubWF4IDogbCksIG47XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsb2dhcml0aG1pYzogZnVuY3Rpb24gKHQsIGEpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgbiA9IGUuZ2V0VmFsdWVPckRlZmF1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgbyA9IG4odC5taW4sIE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGUubG9nMTAoYS5taW4pKSkpO1xuICAgICAgICAgICAgICAgICAgICBvIDwgYS5tYXg7XG5cbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBpLnB1c2gobyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByLCBsO1xuICAgICAgICAgICAgICAgICAgICAwID09PSBvXG4gICAgICAgICAgICAgICAgICAgICAgPyAoKHIgPSBNYXRoLmZsb29yKGUubG9nMTAoYS5taW5Ob3RaZXJvKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGwgPSBNYXRoLnJvdW5kKGEubWluTm90WmVybyAvIE1hdGgucG93KDEwLCByKSkpKVxuICAgICAgICAgICAgICAgICAgICAgIDogKChyID0gTWF0aC5mbG9vcihlLmxvZzEwKG8pKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAobCA9IE1hdGguZmxvb3IobyAvIE1hdGgucG93KDEwLCByKSkgKyAxKSksXG4gICAgICAgICAgICAgICAgICAgICAgMTAgPT09IGwgJiYgKChsID0gMSksICsrciksXG4gICAgICAgICAgICAgICAgICAgICAgKG8gPSBsICogTWF0aC5wb3coMTAsIHIpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHZhciBzID0gbih0Lm1heCwgbyk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaS5wdXNoKHMpLCBpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZvcm1hdHRlcnM6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZS5pc0FycmF5KHQpID8gdCA6IFwiXCIgKyB0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGluZWFyOiBmdW5jdGlvbiAodCwgYSwgaSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSBpLmxlbmd0aCA+IDMgPyBpWzJdIC0gaVsxXSA6IGlbMV0gLSBpWzBdO1xuICAgICAgICAgICAgICAgICAgTWF0aC5hYnMobikgPiAxICYmXG4gICAgICAgICAgICAgICAgICAgIHQgIT09IE1hdGguZmxvb3IodCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKG4gPSB0IC0gTWF0aC5mbG9vcih0KSk7XG4gICAgICAgICAgICAgICAgICB2YXIgbyA9IGUubG9nMTAoTWF0aC5hYnMobikpLFxuICAgICAgICAgICAgICAgICAgICByID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgIGlmICgwICE9PSB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsID0gLTEgKiBNYXRoLmZsb29yKG8pO1xuICAgICAgICAgICAgICAgICAgICAobCA9IE1hdGgubWF4KE1hdGgubWluKGwsIDIwKSwgMCkpLCAociA9IHQudG9GaXhlZChsKSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgciA9IFwiMFwiO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsb2dhcml0aG1pYzogZnVuY3Rpb24gKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuID0gdCAvIE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGUubG9nMTAodCkpKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAwID09PSB0XG4gICAgICAgICAgICAgICAgICAgID8gXCIwXCJcbiAgICAgICAgICAgICAgICAgICAgOiAxID09PSBuIHx8XG4gICAgICAgICAgICAgICAgICAgICAgMiA9PT0gbiB8fFxuICAgICAgICAgICAgICAgICAgICAgIDUgPT09IG4gfHxcbiAgICAgICAgICAgICAgICAgICAgICAwID09PSBhIHx8XG4gICAgICAgICAgICAgICAgICAgICAgYSA9PT0gaS5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICAgID8gdC50b0V4cG9uZW50aWFsKClcbiAgICAgICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDM1OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzO1xuICAgICAgICAgICAgdC5kZWZhdWx0cy5nbG9iYWwudGl0bGUgPSB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICExLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogXCJ0b3BcIixcbiAgICAgICAgICAgICAgZnVsbFdpZHRoOiAhMCxcbiAgICAgICAgICAgICAgZm9udFN0eWxlOiBcImJvbGRcIixcbiAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgIHRleHQ6IFwiXCIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGEgPSBlLm5vb3A7XG4gICAgICAgICAgICAodC5UaXRsZSA9IHQuRWxlbWVudC5leHRlbmQoe1xuICAgICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcztcbiAgICAgICAgICAgICAgICBlLmV4dGVuZChpLCBhKSxcbiAgICAgICAgICAgICAgICAgIChpLm9wdGlvbnMgPSBlLmNvbmZpZ01lcmdlKFxuICAgICAgICAgICAgICAgICAgICB0LmRlZmF1bHRzLmdsb2JhbC50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgYS5vcHRpb25zXG4gICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgIChpLmxlZ2VuZEhpdEJveGVzID0gW10pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMuY2hhcnQub3B0aW9ucztcbiAgICAgICAgICAgICAgICBhICYmXG4gICAgICAgICAgICAgICAgICBhLnRpdGxlICYmXG4gICAgICAgICAgICAgICAgICAodGhpcy5vcHRpb25zID0gZS5jb25maWdNZXJnZShcbiAgICAgICAgICAgICAgICAgICAgdC5kZWZhdWx0cy5nbG9iYWwudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGEudGl0bGVcbiAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICBpLmJlZm9yZVVwZGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgKGkubWF4V2lkdGggPSB0KSxcbiAgICAgICAgICAgICAgICAgIChpLm1heEhlaWdodCA9IGUpLFxuICAgICAgICAgICAgICAgICAgKGkubWFyZ2lucyA9IGEpLFxuICAgICAgICAgICAgICAgICAgaS5iZWZvcmVTZXREaW1lbnNpb25zKCksXG4gICAgICAgICAgICAgICAgICBpLnNldERpbWVuc2lvbnMoKSxcbiAgICAgICAgICAgICAgICAgIGkuYWZ0ZXJTZXREaW1lbnNpb25zKCksXG4gICAgICAgICAgICAgICAgICBpLmJlZm9yZUJ1aWxkTGFiZWxzKCksXG4gICAgICAgICAgICAgICAgICBpLmJ1aWxkTGFiZWxzKCksXG4gICAgICAgICAgICAgICAgICBpLmFmdGVyQnVpbGRMYWJlbHMoKSxcbiAgICAgICAgICAgICAgICAgIGkuYmVmb3JlRml0KCksXG4gICAgICAgICAgICAgICAgICBpLmZpdCgpLFxuICAgICAgICAgICAgICAgICAgaS5hZnRlckZpdCgpLFxuICAgICAgICAgICAgICAgICAgaS5hZnRlclVwZGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgaS5taW5TaXplXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYWZ0ZXJVcGRhdGU6IGEsXG4gICAgICAgICAgICAgIGJlZm9yZVNldERpbWVuc2lvbnM6IGEsXG4gICAgICAgICAgICAgIHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdC5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgICAgICAgPyAoKHQud2lkdGggPSB0Lm1heFdpZHRoKSwgKHQubGVmdCA9IDApLCAodC5yaWdodCA9IHQud2lkdGgpKVxuICAgICAgICAgICAgICAgICAgOiAoKHQuaGVpZ2h0ID0gdC5tYXhIZWlnaHQpLFxuICAgICAgICAgICAgICAgICAgICAodC50b3AgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuYm90dG9tID0gdC5oZWlnaHQpKSxcbiAgICAgICAgICAgICAgICAgICh0LnBhZGRpbmdMZWZ0ID0gMCksXG4gICAgICAgICAgICAgICAgICAodC5wYWRkaW5nVG9wID0gMCksXG4gICAgICAgICAgICAgICAgICAodC5wYWRkaW5nUmlnaHQgPSAwKSxcbiAgICAgICAgICAgICAgICAgICh0LnBhZGRpbmdCb3R0b20gPSAwKSxcbiAgICAgICAgICAgICAgICAgICh0Lm1pblNpemUgPSB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFmdGVyU2V0RGltZW5zaW9uczogYSxcbiAgICAgICAgICAgICAgYmVmb3JlQnVpbGRMYWJlbHM6IGEsXG4gICAgICAgICAgICAgIGJ1aWxkTGFiZWxzOiBhLFxuICAgICAgICAgICAgICBhZnRlckJ1aWxkTGFiZWxzOiBhLFxuICAgICAgICAgICAgICBiZWZvcmVGaXQ6IGEsXG4gICAgICAgICAgICAgIGZpdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgIGkgPSBlLmdldFZhbHVlT3JEZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgbiA9IGEub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgIG8gPSB0LmRlZmF1bHRzLmdsb2JhbCxcbiAgICAgICAgICAgICAgICAgIHIgPSBuLmRpc3BsYXksXG4gICAgICAgICAgICAgICAgICBsID0gaShuLmZvbnRTaXplLCBvLmRlZmF1bHRGb250U2l6ZSksXG4gICAgICAgICAgICAgICAgICBzID0gYS5taW5TaXplO1xuICAgICAgICAgICAgICAgIGEuaXNIb3Jpem9udGFsKClcbiAgICAgICAgICAgICAgICAgID8gKChzLndpZHRoID0gYS5tYXhXaWR0aCksXG4gICAgICAgICAgICAgICAgICAgIChzLmhlaWdodCA9IHIgPyBsICsgMiAqIG4ucGFkZGluZyA6IDApKVxuICAgICAgICAgICAgICAgICAgOiAoKHMud2lkdGggPSByID8gbCArIDIgKiBuLnBhZGRpbmcgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgKHMuaGVpZ2h0ID0gYS5tYXhIZWlnaHQpKSxcbiAgICAgICAgICAgICAgICAgIChhLndpZHRoID0gcy53aWR0aCksXG4gICAgICAgICAgICAgICAgICAoYS5oZWlnaHQgPSBzLmhlaWdodCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFmdGVyRml0OiBhLFxuICAgICAgICAgICAgICBpc0hvcml6b250YWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ0b3BcIiA9PT0gdCB8fCBcImJvdHRvbVwiID09PSB0O1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgaSA9IGEuY3R4LFxuICAgICAgICAgICAgICAgICAgbiA9IGUuZ2V0VmFsdWVPckRlZmF1bHQsXG4gICAgICAgICAgICAgICAgICBvID0gYS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgciA9IHQuZGVmYXVsdHMuZ2xvYmFsO1xuICAgICAgICAgICAgICAgIGlmIChvLmRpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBsLFxuICAgICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgICB1ID0gbihvLmZvbnRTaXplLCByLmRlZmF1bHRGb250U2l6ZSksXG4gICAgICAgICAgICAgICAgICAgIGMgPSBuKG8uZm9udFN0eWxlLCByLmRlZmF1bHRGb250U3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICBoID0gbihvLmZvbnRGYW1pbHksIHIuZGVmYXVsdEZvbnRGYW1pbHkpLFxuICAgICAgICAgICAgICAgICAgICBmID0gZS5mb250U3RyaW5nKHUsIGMsIGgpLFxuICAgICAgICAgICAgICAgICAgICBnID0gMCxcbiAgICAgICAgICAgICAgICAgICAgcCA9IGEudG9wLFxuICAgICAgICAgICAgICAgICAgICBtID0gYS5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICBiID0gYS5ib3R0b20sXG4gICAgICAgICAgICAgICAgICAgIHYgPSBhLnJpZ2h0O1xuICAgICAgICAgICAgICAgICAgKGkuZmlsbFN0eWxlID0gbihvLmZvbnRDb2xvciwgci5kZWZhdWx0Rm9udENvbG9yKSksXG4gICAgICAgICAgICAgICAgICAgIChpLmZvbnQgPSBmKSxcbiAgICAgICAgICAgICAgICAgICAgYS5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgICAgICAgICAgID8gKChsID0gbSArICh2IC0gbSkgLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChzID0gcCArIChiIC0gcCkgLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChkID0gdiAtIG0pKVxuICAgICAgICAgICAgICAgICAgICAgIDogKChsID0gXCJsZWZ0XCIgPT09IG8ucG9zaXRpb24gPyBtICsgdSAvIDIgOiB2IC0gdSAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHMgPSBwICsgKGIgLSBwKSAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGQgPSBiIC0gcCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZyA9IE1hdGguUEkgKiAoXCJsZWZ0XCIgPT09IG8ucG9zaXRpb24gPyAtMC41IDogMC41KSkpLFxuICAgICAgICAgICAgICAgICAgICBpLnNhdmUoKSxcbiAgICAgICAgICAgICAgICAgICAgaS50cmFuc2xhdGUobCwgcyksXG4gICAgICAgICAgICAgICAgICAgIGkucm90YXRlKGcpLFxuICAgICAgICAgICAgICAgICAgICAoaS50ZXh0QWxpZ24gPSBcImNlbnRlclwiKSxcbiAgICAgICAgICAgICAgICAgICAgKGkudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIiksXG4gICAgICAgICAgICAgICAgICAgIGkuZmlsbFRleHQoby50ZXh0LCAwLCAwLCBkKSxcbiAgICAgICAgICAgICAgICAgICAgaS5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICB0LnBsdWdpbnMucmVnaXN0ZXIoe1xuICAgICAgICAgICAgICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IGUub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEudGl0bGU7XG4gICAgICAgICAgICAgICAgICBpICYmXG4gICAgICAgICAgICAgICAgICAgICgoZS50aXRsZUJsb2NrID0gbmV3IHQuVGl0bGUoe1xuICAgICAgICAgICAgICAgICAgICAgIGN0eDogZS5jaGFydC5jdHgsXG4gICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogaSxcbiAgICAgICAgICAgICAgICAgICAgICBjaGFydDogZSxcbiAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICB0LmxheW91dFNlcnZpY2UuYWRkQm94KGUsIGUudGl0bGVCbG9jaykpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDM2OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUodCwgZSkge1xuICAgICAgICAgICAgICB2YXIgYSA9IHMuY29sb3IodCk7XG4gICAgICAgICAgICAgIHJldHVybiBhLmFscGhhKGUgKiBhLmFscGhhKCkpLnJnYmFTdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGEodCwgZSkge1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIGUgJiZcbiAgICAgICAgICAgICAgICAgIChzLmlzQXJyYXkoZSkgPyBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0LCBlKSA6IHQucHVzaChlKSksXG4gICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaSh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID0gdC5feFNjYWxlLFxuICAgICAgICAgICAgICAgIGEgPSB0Ll95U2NhbGUgfHwgdC5fc2NhbGUsXG4gICAgICAgICAgICAgICAgaSA9IHQuX2luZGV4LFxuICAgICAgICAgICAgICAgIG4gPSB0Ll9kYXRhc2V0SW5kZXg7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeExhYmVsOiBlID8gZS5nZXRMYWJlbEZvckluZGV4KGksIG4pIDogXCJcIixcbiAgICAgICAgICAgICAgICB5TGFiZWw6IGEgPyBhLmdldExhYmVsRm9ySW5kZXgoaSwgbikgOiBcIlwiLFxuICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleDogbixcbiAgICAgICAgICAgICAgICB4OiB0Ll9tb2RlbC54LFxuICAgICAgICAgICAgICAgIHk6IHQuX21vZGVsLnksXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBuKGUpIHtcbiAgICAgICAgICAgICAgdmFyIGEgPSB0LmRlZmF1bHRzLmdsb2JhbCxcbiAgICAgICAgICAgICAgICBpID0gcy5nZXRWYWx1ZU9yRGVmYXVsdDtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB4UGFkZGluZzogZS54UGFkZGluZyxcbiAgICAgICAgICAgICAgICB5UGFkZGluZzogZS55UGFkZGluZyxcbiAgICAgICAgICAgICAgICB4QWxpZ246IGUueEFsaWduLFxuICAgICAgICAgICAgICAgIHlBbGlnbjogZS55QWxpZ24sXG4gICAgICAgICAgICAgICAgYm9keUZvbnRDb2xvcjogZS5ib2R5Rm9udENvbG9yLFxuICAgICAgICAgICAgICAgIF9ib2R5Rm9udEZhbWlseTogaShlLmJvZHlGb250RmFtaWx5LCBhLmRlZmF1bHRGb250RmFtaWx5KSxcbiAgICAgICAgICAgICAgICBfYm9keUZvbnRTdHlsZTogaShlLmJvZHlGb250U3R5bGUsIGEuZGVmYXVsdEZvbnRTdHlsZSksXG4gICAgICAgICAgICAgICAgX2JvZHlBbGlnbjogZS5ib2R5QWxpZ24sXG4gICAgICAgICAgICAgICAgYm9keUZvbnRTaXplOiBpKGUuYm9keUZvbnRTaXplLCBhLmRlZmF1bHRGb250U2l6ZSksXG4gICAgICAgICAgICAgICAgYm9keVNwYWNpbmc6IGUuYm9keVNwYWNpbmcsXG4gICAgICAgICAgICAgICAgdGl0bGVGb250Q29sb3I6IGUudGl0bGVGb250Q29sb3IsXG4gICAgICAgICAgICAgICAgX3RpdGxlRm9udEZhbWlseTogaShlLnRpdGxlRm9udEZhbWlseSwgYS5kZWZhdWx0Rm9udEZhbWlseSksXG4gICAgICAgICAgICAgICAgX3RpdGxlRm9udFN0eWxlOiBpKGUudGl0bGVGb250U3R5bGUsIGEuZGVmYXVsdEZvbnRTdHlsZSksXG4gICAgICAgICAgICAgICAgdGl0bGVGb250U2l6ZTogaShlLnRpdGxlRm9udFNpemUsIGEuZGVmYXVsdEZvbnRTaXplKSxcbiAgICAgICAgICAgICAgICBfdGl0bGVBbGlnbjogZS50aXRsZUFsaWduLFxuICAgICAgICAgICAgICAgIHRpdGxlU3BhY2luZzogZS50aXRsZVNwYWNpbmcsXG4gICAgICAgICAgICAgICAgdGl0bGVNYXJnaW5Cb3R0b206IGUudGl0bGVNYXJnaW5Cb3R0b20sXG4gICAgICAgICAgICAgICAgZm9vdGVyRm9udENvbG9yOiBlLmZvb3RlckZvbnRDb2xvcixcbiAgICAgICAgICAgICAgICBfZm9vdGVyRm9udEZhbWlseTogaShlLmZvb3RlckZvbnRGYW1pbHksIGEuZGVmYXVsdEZvbnRGYW1pbHkpLFxuICAgICAgICAgICAgICAgIF9mb290ZXJGb250U3R5bGU6IGkoZS5mb290ZXJGb250U3R5bGUsIGEuZGVmYXVsdEZvbnRTdHlsZSksXG4gICAgICAgICAgICAgICAgZm9vdGVyRm9udFNpemU6IGkoZS5mb290ZXJGb250U2l6ZSwgYS5kZWZhdWx0Rm9udFNpemUpLFxuICAgICAgICAgICAgICAgIF9mb290ZXJBbGlnbjogZS5mb290ZXJBbGlnbixcbiAgICAgICAgICAgICAgICBmb290ZXJTcGFjaW5nOiBlLmZvb3RlclNwYWNpbmcsXG4gICAgICAgICAgICAgICAgZm9vdGVyTWFyZ2luVG9wOiBlLmZvb3Rlck1hcmdpblRvcCxcbiAgICAgICAgICAgICAgICBjYXJldFNpemU6IGUuY2FyZXRTaXplLFxuICAgICAgICAgICAgICAgIGNvcm5lclJhZGl1czogZS5jb3JuZXJSYWRpdXMsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIGxlZ2VuZENvbG9yQmFja2dyb3VuZDogZS5tdWx0aUtleUJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgZGlzcGxheUNvbG9yczogZS5kaXNwbGF5Q29sb3JzLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbyh0LCBlKSB7XG4gICAgICAgICAgICAgIHZhciBhID0gdC5fY2hhcnQuY3R4LFxuICAgICAgICAgICAgICAgIGkgPSAyICogZS55UGFkZGluZyxcbiAgICAgICAgICAgICAgICBuID0gMCxcbiAgICAgICAgICAgICAgICBvID0gZS5ib2R5LFxuICAgICAgICAgICAgICAgIHIgPSBvLnJlZHVjZShmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgKyBlLmJlZm9yZS5sZW5ndGggKyBlLmxpbmVzLmxlbmd0aCArIGUuYWZ0ZXIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICByICs9IGUuYmVmb3JlQm9keS5sZW5ndGggKyBlLmFmdGVyQm9keS5sZW5ndGg7XG4gICAgICAgICAgICAgIHZhciBsID0gZS50aXRsZS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgZCA9IGUuZm9vdGVyLmxlbmd0aCxcbiAgICAgICAgICAgICAgICB1ID0gZS50aXRsZUZvbnRTaXplLFxuICAgICAgICAgICAgICAgIGMgPSBlLmJvZHlGb250U2l6ZSxcbiAgICAgICAgICAgICAgICBoID0gZS5mb290ZXJGb250U2l6ZTtcbiAgICAgICAgICAgICAgKGkgKz0gbCAqIHUpLFxuICAgICAgICAgICAgICAgIChpICs9IGwgPyAobCAtIDEpICogZS50aXRsZVNwYWNpbmcgOiAwKSxcbiAgICAgICAgICAgICAgICAoaSArPSBsID8gZS50aXRsZU1hcmdpbkJvdHRvbSA6IDApLFxuICAgICAgICAgICAgICAgIChpICs9IHIgKiBjKSxcbiAgICAgICAgICAgICAgICAoaSArPSByID8gKHIgLSAxKSAqIGUuYm9keVNwYWNpbmcgOiAwKSxcbiAgICAgICAgICAgICAgICAoaSArPSBkID8gZS5mb290ZXJNYXJnaW5Ub3AgOiAwKSxcbiAgICAgICAgICAgICAgICAoaSArPSBkICogaCksXG4gICAgICAgICAgICAgICAgKGkgKz0gZCA/IChkIC0gMSkgKiBlLmZvb3RlclNwYWNpbmcgOiAwKTtcbiAgICAgICAgICAgICAgdmFyIGYgPSAwLFxuICAgICAgICAgICAgICAgIGcgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgbiA9IE1hdGgubWF4KG4sIGEubWVhc3VyZVRleHQodCkud2lkdGggKyBmKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIChhLmZvbnQgPSBzLmZvbnRTdHJpbmcoXG4gICAgICAgICAgICAgICAgICB1LFxuICAgICAgICAgICAgICAgICAgZS5fdGl0bGVGb250U3R5bGUsXG4gICAgICAgICAgICAgICAgICBlLl90aXRsZUZvbnRGYW1pbHlcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICBzLmVhY2goZS50aXRsZSwgZyksXG4gICAgICAgICAgICAgICAgKGEuZm9udCA9IHMuZm9udFN0cmluZyhjLCBlLl9ib2R5Rm9udFN0eWxlLCBlLl9ib2R5Rm9udEZhbWlseSkpLFxuICAgICAgICAgICAgICAgIHMuZWFjaChlLmJlZm9yZUJvZHkuY29uY2F0KGUuYWZ0ZXJCb2R5KSwgZyksXG4gICAgICAgICAgICAgICAgKGYgPSBlLmRpc3BsYXlDb2xvcnMgPyBjICsgMiA6IDApLFxuICAgICAgICAgICAgICAgIHMuZWFjaChvLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgcy5lYWNoKHQuYmVmb3JlLCBnKSwgcy5lYWNoKHQubGluZXMsIGcpLCBzLmVhY2godC5hZnRlciwgZyk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKGYgPSAwKSxcbiAgICAgICAgICAgICAgICAoYS5mb250ID0gcy5mb250U3RyaW5nKFxuICAgICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICAgIGUuX2Zvb3RlckZvbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgIGUuX2Zvb3RlckZvbnRGYW1pbHlcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICBzLmVhY2goZS5mb290ZXIsIGcpLFxuICAgICAgICAgICAgICAgIChuICs9IDIgKiBlLnhQYWRkaW5nKSxcbiAgICAgICAgICAgICAgICB7IHdpZHRoOiBuLCBoZWlnaHQ6IGkgfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcih0LCBlKSB7XG4gICAgICAgICAgICAgIHZhciBhID0gdC5fbW9kZWwsXG4gICAgICAgICAgICAgICAgaSA9IHQuX2NoYXJ0LFxuICAgICAgICAgICAgICAgIG4gPSB0Ll9jaGFydEluc3RhbmNlLmNoYXJ0QXJlYSxcbiAgICAgICAgICAgICAgICBvID0gXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgICByID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICAgICAgYS55IDwgZS5oZWlnaHRcbiAgICAgICAgICAgICAgICA/IChyID0gXCJ0b3BcIilcbiAgICAgICAgICAgICAgICA6IGEueSA+IGkuaGVpZ2h0IC0gZS5oZWlnaHQgJiYgKHIgPSBcImJvdHRvbVwiKTtcbiAgICAgICAgICAgICAgdmFyIGwsXG4gICAgICAgICAgICAgICAgcyxcbiAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgIHUsXG4gICAgICAgICAgICAgICAgYyxcbiAgICAgICAgICAgICAgICBoID0gKG4ubGVmdCArIG4ucmlnaHQpIC8gMixcbiAgICAgICAgICAgICAgICBmID0gKG4udG9wICsgbi5ib3R0b20pIC8gMjtcbiAgICAgICAgICAgICAgXCJjZW50ZXJcIiA9PT0gclxuICAgICAgICAgICAgICAgID8gKChsID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGggPj0gdDtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgKHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA+IGg7XG4gICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICA6ICgobCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0IDw9IGUud2lkdGggLyAyO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAocyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID49IGkud2lkdGggLSBlLndpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAoZCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdCArIGUud2lkdGggPiBpLndpZHRoO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICh1ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0IC0gZS53aWR0aCA8IDA7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKGMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGYgPj0gdCA/IFwidG9wXCIgOiBcImJvdHRvbVwiO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGwoYS54KVxuICAgICAgICAgICAgICAgICAgPyAoKG8gPSBcImxlZnRcIiksIGQoYS54KSAmJiAoKG8gPSBcImNlbnRlclwiKSwgKHIgPSBjKGEueSkpKSlcbiAgICAgICAgICAgICAgICAgIDogcyhhLngpICYmXG4gICAgICAgICAgICAgICAgICAgICgobyA9IFwicmlnaHRcIiksIHUoYS54KSAmJiAoKG8gPSBcImNlbnRlclwiKSwgKHIgPSBjKGEueSkpKSk7XG4gICAgICAgICAgICAgIHZhciBnID0gdC5fb3B0aW9ucztcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB4QWxpZ246IGcueEFsaWduID8gZy54QWxpZ24gOiBvLFxuICAgICAgICAgICAgICAgIHlBbGlnbjogZy55QWxpZ24gPyBnLnlBbGlnbiA6IHIsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBsKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgdmFyIGkgPSB0LngsXG4gICAgICAgICAgICAgICAgbiA9IHQueSxcbiAgICAgICAgICAgICAgICBvID0gdC5jYXJldFNpemUsXG4gICAgICAgICAgICAgICAgciA9IHQuY2FyZXRQYWRkaW5nLFxuICAgICAgICAgICAgICAgIGwgPSB0LmNvcm5lclJhZGl1cyxcbiAgICAgICAgICAgICAgICBzID0gYS54QWxpZ24sXG4gICAgICAgICAgICAgICAgZCA9IGEueUFsaWduLFxuICAgICAgICAgICAgICAgIHUgPSBvICsgcixcbiAgICAgICAgICAgICAgICBjID0gbCArIHI7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgXCJyaWdodFwiID09PSBzXG4gICAgICAgICAgICAgICAgICA/IChpIC09IGUud2lkdGgpXG4gICAgICAgICAgICAgICAgICA6IFwiY2VudGVyXCIgPT09IHMgJiYgKGkgLT0gZS53aWR0aCAvIDIpLFxuICAgICAgICAgICAgICAgIFwidG9wXCIgPT09IGRcbiAgICAgICAgICAgICAgICAgID8gKG4gKz0gdSlcbiAgICAgICAgICAgICAgICAgIDogKG4gLT0gXCJib3R0b21cIiA9PT0gZCA/IGUuaGVpZ2h0ICsgdSA6IGUuaGVpZ2h0IC8gMiksXG4gICAgICAgICAgICAgICAgXCJjZW50ZXJcIiA9PT0gZFxuICAgICAgICAgICAgICAgICAgPyBcImxlZnRcIiA9PT0gc1xuICAgICAgICAgICAgICAgICAgICA/IChpICs9IHUpXG4gICAgICAgICAgICAgICAgICAgIDogXCJyaWdodFwiID09PSBzICYmIChpIC09IHUpXG4gICAgICAgICAgICAgICAgICA6IFwibGVmdFwiID09PSBzXG4gICAgICAgICAgICAgICAgICA/IChpIC09IGMpXG4gICAgICAgICAgICAgICAgICA6IFwicmlnaHRcIiA9PT0gcyAmJiAoaSArPSBjKSxcbiAgICAgICAgICAgICAgICB7IHg6IGksIHk6IG4gfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHMgPSB0LmhlbHBlcnM7XG4gICAgICAgICAgICAodC5kZWZhdWx0cy5nbG9iYWwudG9vbHRpcHMgPSB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6ICEwLFxuICAgICAgICAgICAgICBjdXN0b206IG51bGwsXG4gICAgICAgICAgICAgIG1vZGU6IFwibmVhcmVzdFwiLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogXCJhdmVyYWdlXCIsXG4gICAgICAgICAgICAgIGludGVyc2VjdDogITAsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDAsMCwwLDAuOClcIixcbiAgICAgICAgICAgICAgdGl0bGVGb250U3R5bGU6IFwiYm9sZFwiLFxuICAgICAgICAgICAgICB0aXRsZVNwYWNpbmc6IDIsXG4gICAgICAgICAgICAgIHRpdGxlTWFyZ2luQm90dG9tOiA2LFxuICAgICAgICAgICAgICB0aXRsZUZvbnRDb2xvcjogXCIjZmZmXCIsXG4gICAgICAgICAgICAgIHRpdGxlQWxpZ246IFwibGVmdFwiLFxuICAgICAgICAgICAgICBib2R5U3BhY2luZzogMixcbiAgICAgICAgICAgICAgYm9keUZvbnRDb2xvcjogXCIjZmZmXCIsXG4gICAgICAgICAgICAgIGJvZHlBbGlnbjogXCJsZWZ0XCIsXG4gICAgICAgICAgICAgIGZvb3RlckZvbnRTdHlsZTogXCJib2xkXCIsXG4gICAgICAgICAgICAgIGZvb3RlclNwYWNpbmc6IDIsXG4gICAgICAgICAgICAgIGZvb3Rlck1hcmdpblRvcDogNixcbiAgICAgICAgICAgICAgZm9vdGVyRm9udENvbG9yOiBcIiNmZmZcIixcbiAgICAgICAgICAgICAgZm9vdGVyQWxpZ246IFwibGVmdFwiLFxuICAgICAgICAgICAgICB5UGFkZGluZzogNixcbiAgICAgICAgICAgICAgeFBhZGRpbmc6IDYsXG4gICAgICAgICAgICAgIGNhcmV0U2l6ZTogNSxcbiAgICAgICAgICAgICAgY29ybmVyUmFkaXVzOiA2LFxuICAgICAgICAgICAgICBtdWx0aUtleUJhY2tncm91bmQ6IFwiI2ZmZlwiLFxuICAgICAgICAgICAgICBkaXNwbGF5Q29sb3JzOiAhMCxcbiAgICAgICAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAgICAgYmVmb3JlVGl0bGU6IHMubm9vcCxcbiAgICAgICAgICAgICAgICB0aXRsZTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gXCJcIixcbiAgICAgICAgICAgICAgICAgICAgaSA9IGUubGFiZWxzLFxuICAgICAgICAgICAgICAgICAgICBuID0gaSA/IGkubGVuZ3RoIDogMDtcbiAgICAgICAgICAgICAgICAgIGlmICh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0WzBdO1xuICAgICAgICAgICAgICAgICAgICBvLnhMYWJlbFxuICAgICAgICAgICAgICAgICAgICAgID8gKGEgPSBvLnhMYWJlbClcbiAgICAgICAgICAgICAgICAgICAgICA6IG4gPiAwICYmIG8uaW5kZXggPCBuICYmIChhID0gaVtvLmluZGV4XSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFmdGVyVGl0bGU6IHMubm9vcCxcbiAgICAgICAgICAgICAgICBiZWZvcmVCb2R5OiBzLm5vb3AsXG4gICAgICAgICAgICAgICAgYmVmb3JlTGFiZWw6IHMubm9vcCxcbiAgICAgICAgICAgICAgICBsYWJlbDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gZS5kYXRhc2V0c1t0LmRhdGFzZXRJbmRleF0ubGFiZWwgfHwgXCJcIjtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhICsgXCI6IFwiICsgdC55TGFiZWw7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbENvbG9yOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLmdldERhdGFzZXRNZXRhKHQuZGF0YXNldEluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuZGF0YVt0LmluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkuX3ZpZXc7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogbi5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBuLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZnRlckxhYmVsOiBzLm5vb3AsXG4gICAgICAgICAgICAgICAgYWZ0ZXJCb2R5OiBzLm5vb3AsXG4gICAgICAgICAgICAgICAgYmVmb3JlRm9vdGVyOiBzLm5vb3AsXG4gICAgICAgICAgICAgICAgZm9vdGVyOiBzLm5vb3AsXG4gICAgICAgICAgICAgICAgYWZ0ZXJGb290ZXI6IHMubm9vcCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5Ub29sdGlwID0gdC5FbGVtZW50LmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fbW9kZWwgPSBuKHRoaXMuX29wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VGl0bGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgZSA9IHQuX29wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBlLmNhbGxiYWNrcyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkuYmVmb3JlVGl0bGUuYXBwbHkodCwgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGkudGl0bGUuYXBwbHkodCwgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgciA9IGkuYWZ0ZXJUaXRsZS5hcHBseSh0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICBsID0gW107XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKGwgPSBhKGwsIG4pKSwgKGwgPSBhKGwsIG8pKSwgKGwgPSBhKGwsIHIpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldEJlZm9yZUJvZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fb3B0aW9ucy5jYWxsYmFja3MuYmVmb3JlQm9keS5hcHBseShcbiAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuaXNBcnJheSh0KSA/IHQgOiB2b2lkIDAgIT09IHQgPyBbdF0gOiBbXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldEJvZHk6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLl9vcHRpb25zLmNhbGxiYWNrcyxcbiAgICAgICAgICAgICAgICAgICAgbyA9IFtdO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgcy5lYWNoKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB7IGJlZm9yZTogW10sIGxpbmVzOiBbXSwgYWZ0ZXI6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgYShyLmJlZm9yZSwgbi5iZWZvcmVMYWJlbC5jYWxsKGksIHQsIGUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEoci5saW5lcywgbi5sYWJlbC5jYWxsKGksIHQsIGUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEoci5hZnRlciwgbi5hZnRlckxhYmVsLmNhbGwoaSwgdCwgZSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgby5wdXNoKHIpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgb1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldEFmdGVyQm9keTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9vcHRpb25zLmNhbGxiYWNrcy5hZnRlckJvZHkuYXBwbHkoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzLmlzQXJyYXkodCkgPyB0IDogdm9pZCAwICE9PSB0ID8gW3RdIDogW107XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRGb290ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgZSA9IHQuX29wdGlvbnMuY2FsbGJhY2tzLFxuICAgICAgICAgICAgICAgICAgICBpID0gZS5iZWZvcmVGb290ZXIuYXBwbHkodCwgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGUuZm9vdGVyLmFwcGx5KHQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICAgIG8gPSBlLmFmdGVyRm9vdGVyLmFwcGx5KHQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICAgIHIgPSBbXTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAociA9IGEociwgaSkpLCAociA9IGEociwgbikpLCAociA9IGEociwgbykpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgICAgICAgIHUgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBjID0gdS5fb3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgaCA9IHUuX21vZGVsLFxuICAgICAgICAgICAgICAgICAgICBmID0gKHUuX21vZGVsID0gbihjKSksXG4gICAgICAgICAgICAgICAgICAgIGcgPSB1Ll9hY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIHAgPSB1Ll9kYXRhLFxuICAgICAgICAgICAgICAgICAgICBtID0gdS5fY2hhcnRJbnN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgYiA9IHsgeEFsaWduOiBoLnhBbGlnbiwgeUFsaWduOiBoLnlBbGlnbiB9LFxuICAgICAgICAgICAgICAgICAgICB2ID0geyB4OiBoLngsIHk6IGgueSB9LFxuICAgICAgICAgICAgICAgICAgICB4ID0geyB3aWR0aDogaC53aWR0aCwgaGVpZ2h0OiBoLmhlaWdodCB9LFxuICAgICAgICAgICAgICAgICAgICB5ID0geyB4OiBoLmNhcmV0WCwgeTogaC5jYXJldFkgfTtcbiAgICAgICAgICAgICAgICAgIGlmIChnLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBmLm9wYWNpdHkgPSAxO1xuICAgICAgICAgICAgICAgICAgICB2YXIgayA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB5ID0gdC5Ub29sdGlwLnBvc2l0aW9uZXJzW2MucG9zaXRpb25dKGcsIHUuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgUyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGEgPSAwLCBkID0gZy5sZW5ndGg7IGQgPiBhOyArK2EpIFMucHVzaChpKGdbYV0pKTtcbiAgICAgICAgICAgICAgICAgICAgYy5maWx0ZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoUyA9IFMuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5maWx0ZXIodCwgcCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgIGMuaXRlbVNvcnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChTID0gUy5zb3J0KGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjLml0ZW1Tb3J0KHQsIGUsIHApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgIHMuZWFjaChTLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgay5wdXNoKGMuY2FsbGJhY2tzLmxhYmVsQ29sb3IuY2FsbCh1LCB0LCBtKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgKGYudGl0bGUgPSB1LmdldFRpdGxlKFMsIHApKSxcbiAgICAgICAgICAgICAgICAgICAgICAoZi5iZWZvcmVCb2R5ID0gdS5nZXRCZWZvcmVCb2R5KFMsIHApKSxcbiAgICAgICAgICAgICAgICAgICAgICAoZi5ib2R5ID0gdS5nZXRCb2R5KFMsIHApKSxcbiAgICAgICAgICAgICAgICAgICAgICAoZi5hZnRlckJvZHkgPSB1LmdldEFmdGVyQm9keShTLCBwKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGYuZm9vdGVyID0gdS5nZXRGb290ZXIoUywgcCkpLFxuICAgICAgICAgICAgICAgICAgICAgIChmLnggPSBNYXRoLnJvdW5kKHkueCkpLFxuICAgICAgICAgICAgICAgICAgICAgIChmLnkgPSBNYXRoLnJvdW5kKHkueSkpLFxuICAgICAgICAgICAgICAgICAgICAgIChmLmNhcmV0UGFkZGluZyA9IHMuZ2V0VmFsdWVPckRlZmF1bHQoeS5wYWRkaW5nLCAyKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGYubGFiZWxDb2xvcnMgPSBrKSxcbiAgICAgICAgICAgICAgICAgICAgICAoZi5kYXRhUG9pbnRzID0gUyksXG4gICAgICAgICAgICAgICAgICAgICAgKHggPSBvKHRoaXMsIGYpKSxcbiAgICAgICAgICAgICAgICAgICAgICAoYiA9IHIodGhpcywgeCkpLFxuICAgICAgICAgICAgICAgICAgICAgICh2ID0gbChmLCB4LCBiKSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgZi5vcGFjaXR5ID0gMDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIChmLnhBbGlnbiA9IGIueEFsaWduKSxcbiAgICAgICAgICAgICAgICAgICAgKGYueUFsaWduID0gYi55QWxpZ24pLFxuICAgICAgICAgICAgICAgICAgICAoZi54ID0gdi54KSxcbiAgICAgICAgICAgICAgICAgICAgKGYueSA9IHYueSksXG4gICAgICAgICAgICAgICAgICAgIChmLndpZHRoID0geC53aWR0aCksXG4gICAgICAgICAgICAgICAgICAgIChmLmhlaWdodCA9IHguaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgKGYuY2FyZXRYID0geS54KSxcbiAgICAgICAgICAgICAgICAgICAgKGYuY2FyZXRZID0geS55KSxcbiAgICAgICAgICAgICAgICAgICAgKHUuX21vZGVsID0gZiksXG4gICAgICAgICAgICAgICAgICAgIGUgJiYgYy5jdXN0b20gJiYgYy5jdXN0b20uY2FsbCh1LCBmKSxcbiAgICAgICAgICAgICAgICAgICAgdVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRyYXdDYXJldDogZnVuY3Rpb24gKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuLFxuICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgICB1ID0gdGhpcy5fdmlldyxcbiAgICAgICAgICAgICAgICAgICAgYyA9IHRoaXMuX2NoYXJ0LmN0eCxcbiAgICAgICAgICAgICAgICAgICAgaCA9IHUuY2FyZXRTaXplLFxuICAgICAgICAgICAgICAgICAgICBmID0gdS5jb3JuZXJSYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgIGcgPSB1LnhBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgcCA9IHUueUFsaWduLFxuICAgICAgICAgICAgICAgICAgICBtID0gdC54LFxuICAgICAgICAgICAgICAgICAgICBiID0gdC55LFxuICAgICAgICAgICAgICAgICAgICB2ID0gYS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgeCA9IGEuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgXCJjZW50ZXJcIiA9PT0gcFxuICAgICAgICAgICAgICAgICAgICA/IChcImxlZnRcIiA9PT0gZ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKG4gPSBtKSwgKG8gPSBuIC0gaCksIChyID0gbikpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICgobiA9IG0gKyB2KSwgKG8gPSBuICsgaCksIChyID0gbikpLFxuICAgICAgICAgICAgICAgICAgICAgIChzID0gYiArIHggLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAobCA9IHMgLSBoKSxcbiAgICAgICAgICAgICAgICAgICAgICAoZCA9IHMgKyBoKSlcbiAgICAgICAgICAgICAgICAgICAgOiAoXCJsZWZ0XCIgPT09IGdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKChuID0gbSArIGYpLCAobyA9IG4gKyBoKSwgKHIgPSBvICsgaCkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFwicmlnaHRcIiA9PT0gZ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKG4gPSBtICsgdiAtIGYpLCAobyA9IG4gLSBoKSwgKHIgPSBvIC0gaCkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICgobyA9IG0gKyB2IC8gMiksIChuID0gbyAtIGgpLCAociA9IG8gKyBoKSksXG4gICAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIiA9PT0gcFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKGwgPSBiKSwgKHMgPSBsIC0gaCksIChkID0gbCkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICgobCA9IGIgKyB4KSwgKHMgPSBsICsgaCksIChkID0gbCkpKSxcbiAgICAgICAgICAgICAgICAgICAgKGMuZmlsbFN0eWxlID0gZSh1LmJhY2tncm91bmRDb2xvciwgaSkpLFxuICAgICAgICAgICAgICAgICAgICBjLmJlZ2luUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhuLCBsKSxcbiAgICAgICAgICAgICAgICAgICAgYy5saW5lVG8obywgcyksXG4gICAgICAgICAgICAgICAgICAgIGMubGluZVRvKHIsIGQpLFxuICAgICAgICAgICAgICAgICAgICBjLmNsb3NlUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICBjLmZpbGwoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRyYXdUaXRsZTogZnVuY3Rpb24gKHQsIGEsIGksIG4pIHtcbiAgICAgICAgICAgICAgICAgIHZhciBvID0gYS50aXRsZTtcbiAgICAgICAgICAgICAgICAgIGlmIChvLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAoaS50ZXh0QWxpZ24gPSBhLl90aXRsZUFsaWduKSwgKGkudGV4dEJhc2VsaW5lID0gXCJ0b3BcIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gYS50aXRsZUZvbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgIGwgPSBhLnRpdGxlU3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgKGkuZmlsbFN0eWxlID0gZShhLnRpdGxlRm9udENvbG9yLCBuKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGkuZm9udCA9IHMuZm9udFN0cmluZyhcbiAgICAgICAgICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhLl90aXRsZUZvbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuX3RpdGxlRm9udEZhbWlseVxuICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCwgdTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChkID0gMCwgdSA9IG8ubGVuZ3RoOyB1ID4gZDsgKytkKVxuICAgICAgICAgICAgICAgICAgICAgIGkuZmlsbFRleHQob1tkXSwgdC54LCB0LnkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHQueSArPSByICsgbCksXG4gICAgICAgICAgICAgICAgICAgICAgICBkICsgMSA9PT0gby5sZW5ndGggJiYgKHQueSArPSBhLnRpdGxlTWFyZ2luQm90dG9tIC0gbCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3Qm9keTogZnVuY3Rpb24gKHQsIGEsIGksIG4pIHtcbiAgICAgICAgICAgICAgICAgIHZhciBvID0gYS5ib2R5Rm9udFNpemUsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBhLmJvZHlTcGFjaW5nLFxuICAgICAgICAgICAgICAgICAgICBsID0gYS5ib2R5O1xuICAgICAgICAgICAgICAgICAgKGkudGV4dEFsaWduID0gYS5fYm9keUFsaWduKSwgKGkudGV4dEJhc2VsaW5lID0gXCJ0b3BcIik7XG4gICAgICAgICAgICAgICAgICB2YXIgZCA9IGUoYS5ib2R5Rm9udENvbG9yLCBuKTtcbiAgICAgICAgICAgICAgICAgIChpLmZpbGxTdHlsZSA9IGQpLFxuICAgICAgICAgICAgICAgICAgICAoaS5mb250ID0gcy5mb250U3RyaW5nKFxuICAgICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgICAgYS5fYm9keUZvbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICBhLl9ib2R5Rm9udEZhbWlseVxuICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICAgIHZhciB1ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgYyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaS5maWxsVGV4dChlLCB0LnggKyB1LCB0LnkpLCAodC55ICs9IG8gKyByKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIHMuZWFjaChhLmJlZm9yZUJvZHksIGMpO1xuICAgICAgICAgICAgICAgICAgdmFyIGggPSBhLmRpc3BsYXlDb2xvcnM7XG4gICAgICAgICAgICAgICAgICAodSA9IGggPyBvICsgMiA6IDApLFxuICAgICAgICAgICAgICAgICAgICBzLmVhY2gobCwgZnVuY3Rpb24gKHIsIGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzLmVhY2goci5iZWZvcmUsIGMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcy5lYWNoKHIubGluZXMsIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGkuZmlsbFN0eWxlID0gZShhLmxlZ2VuZENvbG9yQmFja2dyb3VuZCwgbikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuZmlsbFJlY3QodC54LCB0LnksIG8sIG8pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLnN0cm9rZVN0eWxlID0gZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEubGFiZWxDb2xvcnNbbF0uYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zdHJva2VSZWN0KHQueCwgdC55LCBvLCBvKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5maWxsU3R5bGUgPSBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5sYWJlbENvbG9yc1tsXS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5maWxsUmVjdCh0LnggKyAxLCB0LnkgKyAxLCBvIC0gMiwgbyAtIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLmZpbGxTdHlsZSA9IGQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjKHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBzLmVhY2goci5hZnRlciwgYyk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAodSA9IDApLFxuICAgICAgICAgICAgICAgICAgICBzLmVhY2goYS5hZnRlckJvZHksIGMpLFxuICAgICAgICAgICAgICAgICAgICAodC55IC09IHIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHJhd0Zvb3RlcjogZnVuY3Rpb24gKHQsIGEsIGksIG4pIHtcbiAgICAgICAgICAgICAgICAgIHZhciBvID0gYS5mb290ZXI7XG4gICAgICAgICAgICAgICAgICBvLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAoKHQueSArPSBhLmZvb3Rlck1hcmdpblRvcCksXG4gICAgICAgICAgICAgICAgICAgIChpLnRleHRBbGlnbiA9IGEuX2Zvb3RlckFsaWduKSxcbiAgICAgICAgICAgICAgICAgICAgKGkudGV4dEJhc2VsaW5lID0gXCJ0b3BcIiksXG4gICAgICAgICAgICAgICAgICAgIChpLmZpbGxTdHlsZSA9IGUoYS5mb290ZXJGb250Q29sb3IsIG4pKSxcbiAgICAgICAgICAgICAgICAgICAgKGkuZm9udCA9IHMuZm9udFN0cmluZyhcbiAgICAgICAgICAgICAgICAgICAgICBhLmZvb3RlckZvbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgIGEuX2Zvb3RlckZvbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICBhLl9mb290ZXJGb250RmFtaWx5XG4gICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICBzLmVhY2gobywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpLmZpbGxUZXh0KGUsIHQueCwgdC55KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0LnkgKz0gYS5mb290ZXJGb250U2l6ZSArIGEuZm9vdGVyU3BhY2luZyk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRyYXdCYWNrZ3JvdW5kOiBmdW5jdGlvbiAodCwgYSwgaSwgbiwgbykge1xuICAgICAgICAgICAgICAgICAgKGkuZmlsbFN0eWxlID0gZShhLmJhY2tncm91bmRDb2xvciwgbykpLFxuICAgICAgICAgICAgICAgICAgICBzLmRyYXdSb3VuZGVkUmVjdGFuZ2xlKFxuICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgdC54LFxuICAgICAgICAgICAgICAgICAgICAgIHQueSxcbiAgICAgICAgICAgICAgICAgICAgICBuLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgIG4uaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgIGEuY29ybmVyUmFkaXVzXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGkuZmlsbCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9jaGFydC5jdHgsXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLl92aWV3O1xuICAgICAgICAgICAgICAgICAgaWYgKDAgIT09IGUub3BhY2l0eSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHsgd2lkdGg6IGUud2lkdGgsIGhlaWdodDogZS5oZWlnaHQgfSxcbiAgICAgICAgICAgICAgICAgICAgICBpID0geyB4OiBlLngsIHk6IGUueSB9LFxuICAgICAgICAgICAgICAgICAgICAgIG4gPSBNYXRoLmFicyhlLm9wYWNpdHkgPCAwLjAwMSkgPyAwIDogZS5vcGFjaXR5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmVuYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAodGhpcy5kcmF3QmFja2dyb3VuZChpLCBlLCB0LCBhLCBuKSxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdDYXJldChpLCBhLCBuKSxcbiAgICAgICAgICAgICAgICAgICAgICAoaS54ICs9IGUueFBhZGRpbmcpLFxuICAgICAgICAgICAgICAgICAgICAgIChpLnkgKz0gZS55UGFkZGluZyksXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3VGl0bGUoaSwgZSwgdCwgbiksXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3Qm9keShpLCBlLCB0LCBuKSxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdGb290ZXIoaSwgZSwgdCwgbikpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGFuZGxlRXZlbnQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGEgPSBlLl9vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBpID0gITE7XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICgoZS5fbGFzdEFjdGl2ZSA9IGUuX2xhc3RBY3RpdmUgfHwgW10pLFxuICAgICAgICAgICAgICAgICAgICBcIm1vdXNlb3V0XCIgPT09IHQudHlwZVxuICAgICAgICAgICAgICAgICAgICAgID8gKGUuX2FjdGl2ZSA9IFtdKVxuICAgICAgICAgICAgICAgICAgICAgIDogKGUuX2FjdGl2ZSA9IGUuX2NoYXJ0SW5zdGFuY2UuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5tb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKGkgPSAhcy5hcnJheUVxdWFscyhlLl9hY3RpdmUsIGUuX2xhc3RBY3RpdmUpKSxcbiAgICAgICAgICAgICAgICAgICAgKGUuX2xhc3RBY3RpdmUgPSBlLl9hY3RpdmUpLFxuICAgICAgICAgICAgICAgICAgICBhLmVuYWJsZWQgfHwgYS5jdXN0b20pXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgZS5fZXZlbnRQb3NpdGlvbiA9IHMuZ2V0UmVsYXRpdmVQb3NpdGlvbih0LCBlLl9jaGFydCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gZS5fbW9kZWw7XG4gICAgICAgICAgICAgICAgICAgIGUudXBkYXRlKCEwKSxcbiAgICAgICAgICAgICAgICAgICAgICBlLnBpdm90KCksXG4gICAgICAgICAgICAgICAgICAgICAgKGkgfD0gbi54ICE9PSBlLl9tb2RlbC54IHx8IG4ueSAhPT0gZS5fbW9kZWwueSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICh0LlRvb2x0aXAucG9zaXRpb25lcnMgPSB7XG4gICAgICAgICAgICAgICAgYXZlcmFnZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICghdC5sZW5ndGgpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgICAgICAgICAgbiA9IDAsXG4gICAgICAgICAgICAgICAgICAgIG8gPSAwO1xuICAgICAgICAgICAgICAgICAgZm9yIChlID0gMCwgYSA9IHQubGVuZ3RoOyBhID4gZTsgKytlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gdFtlXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIgJiYgci5oYXNWYWx1ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSByLnRvb2x0aXBQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgIChpICs9IGwueCksIChuICs9IGwueSksICsrbztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgeDogTWF0aC5yb3VuZChpIC8gbyksIHk6IE1hdGgucm91bmQobiAvIG8pIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBuZWFyZXN0OiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgIG8gPSBlLngsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBlLnksXG4gICAgICAgICAgICAgICAgICAgIGwgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBuID0gdC5sZW5ndGg7IG4gPiBpOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSB0W2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZCAmJiBkLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGQuZ2V0Q2VudGVyUG9pbnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBzLmRpc3RhbmNlQmV0d2VlblBvaW50cyhlLCB1KTtcbiAgICAgICAgICAgICAgICAgICAgICBsID4gYyAmJiAoKGwgPSBjKSwgKGEgPSBkKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoID0gYS50b29sdGlwUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgKG8gPSBoLngpLCAociA9IGgueSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4geyB4OiBvLCB5OiByIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMzc6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmhlbHBlcnMsXG4gICAgICAgICAgICAgIGEgPSB0LmRlZmF1bHRzLmdsb2JhbDtcbiAgICAgICAgICAgIChhLmVsZW1lbnRzLmFyYyA9IHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBhLmRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwiI2ZmZlwiLFxuICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5lbGVtZW50cy5BcmMgPSB0LkVsZW1lbnQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBpbkxhYmVsUmFuZ2U6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuX3ZpZXc7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZVxuICAgICAgICAgICAgICAgICAgICA/IE1hdGgucG93KHQgLSBlLngsIDIpIDxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucG93KGUucmFkaXVzICsgZS5ob3ZlclJhZGl1cywgMilcbiAgICAgICAgICAgICAgICAgICAgOiAhMTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGluUmFuZ2U6IGZ1bmN0aW9uICh0LCBhKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuX3ZpZXc7XG4gICAgICAgICAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZS5nZXRBbmdsZUZyb21Qb2ludChpLCB7IHg6IHQsIHk6IGEgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gbi5hbmdsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBuLmRpc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IGkuc3RhcnRBbmdsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBpLmVuZEFuZ2xlO1xuICAgICAgICAgICAgICAgICAgICAgIGwgPiBzO1xuXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICBzICs9IDIgKiBNYXRoLlBJO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgbyA+IHM7ICkgbyAtPSAyICogTWF0aC5QSTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGwgPiBvOyApIG8gKz0gMiAqIE1hdGguUEk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gbyA+PSBsICYmIHMgPj0gbyxcbiAgICAgICAgICAgICAgICAgICAgICB1ID0gciA+PSBpLmlubmVyUmFkaXVzICYmIHIgPD0gaS5vdXRlclJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQgJiYgdTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldENlbnRlclBvaW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX3ZpZXcsXG4gICAgICAgICAgICAgICAgICAgIGUgPSAodC5zdGFydEFuZ2xlICsgdC5lbmRBbmdsZSkgLyAyLFxuICAgICAgICAgICAgICAgICAgICBhID0gKHQuaW5uZXJSYWRpdXMgKyB0Lm91dGVyUmFkaXVzKSAvIDI7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geyB4OiB0LnggKyBNYXRoLmNvcyhlKSAqIGEsIHk6IHQueSArIE1hdGguc2luKGUpICogYSB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0QXJlYTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl92aWV3O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5QSSAqXG4gICAgICAgICAgICAgICAgICAgICgodC5lbmRBbmdsZSAtIHQuc3RhcnRBbmdsZSkgLyAoMiAqIE1hdGguUEkpKSAqXG4gICAgICAgICAgICAgICAgICAgIChNYXRoLnBvdyh0Lm91dGVyUmFkaXVzLCAyKSAtIE1hdGgucG93KHQuaW5uZXJSYWRpdXMsIDIpKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXBQb3NpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl92aWV3LFxuICAgICAgICAgICAgICAgICAgICBlID0gdC5zdGFydEFuZ2xlICsgKHQuZW5kQW5nbGUgLSB0LnN0YXJ0QW5nbGUpIC8gMixcbiAgICAgICAgICAgICAgICAgICAgYSA9ICh0Lm91dGVyUmFkaXVzIC0gdC5pbm5lclJhZGl1cykgLyAyICsgdC5pbm5lclJhZGl1cztcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IHQueCArIE1hdGguY29zKGUpICogYSwgeTogdC55ICsgTWF0aC5zaW4oZSkgKiBhIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX2NoYXJ0LmN0eCxcbiAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMuX3ZpZXcsXG4gICAgICAgICAgICAgICAgICAgIGEgPSBlLnN0YXJ0QW5nbGUsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBlLmVuZEFuZ2xlO1xuICAgICAgICAgICAgICAgICAgdC5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgdC5hcmMoZS54LCBlLnksIGUub3V0ZXJSYWRpdXMsIGEsIGkpLFxuICAgICAgICAgICAgICAgICAgICB0LmFyYyhlLngsIGUueSwgZS5pbm5lclJhZGl1cywgaSwgYSwgITApLFxuICAgICAgICAgICAgICAgICAgICB0LmNsb3NlUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAodC5zdHJva2VTdHlsZSA9IGUuYm9yZGVyQ29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAodC5saW5lV2lkdGggPSBlLmJvcmRlcldpZHRoKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuZmlsbFN0eWxlID0gZS5iYWNrZ3JvdW5kQ29sb3IpLFxuICAgICAgICAgICAgICAgICAgICB0LmZpbGwoKSxcbiAgICAgICAgICAgICAgICAgICAgKHQubGluZUpvaW4gPSBcImJldmVsXCIpLFxuICAgICAgICAgICAgICAgICAgICBlLmJvcmRlcldpZHRoICYmIHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDM4OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzLFxuICAgICAgICAgICAgICBhID0gdC5kZWZhdWx0cy5nbG9iYWw7XG4gICAgICAgICAgICAodC5kZWZhdWx0cy5nbG9iYWwuZWxlbWVudHMubGluZSA9IHtcbiAgICAgICAgICAgICAgdGVuc2lvbjogMC40LFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGEuZGVmYXVsdENvbG9yLFxuICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMyxcbiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGEuZGVmYXVsdENvbG9yLFxuICAgICAgICAgICAgICBib3JkZXJDYXBTdHlsZTogXCJidXR0XCIsXG4gICAgICAgICAgICAgIGJvcmRlckRhc2g6IFtdLFxuICAgICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICAgICAgICAgICAgICBib3JkZXJKb2luU3R5bGU6IFwibWl0ZXJcIixcbiAgICAgICAgICAgICAgY2FwQmV6aWVyUG9pbnRzOiAhMCxcbiAgICAgICAgICAgICAgZmlsbDogITAsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKHQuZWxlbWVudHMuTGluZSA9IHQuRWxlbWVudC5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGUuX3ZpZXc7XG4gICAgICAgICAgICAgICAgICAgIGUuX3ZpZXcuc3RlcHBlZExpbmUgPT09ICEwXG4gICAgICAgICAgICAgICAgICAgICAgPyAocy5saW5lVG8oYS54LCB0Ll92aWV3LnkpLCBzLmxpbmVUbyhhLngsIGEueSkpXG4gICAgICAgICAgICAgICAgICAgICAgOiAwID09PSBlLl92aWV3LnRlbnNpb25cbiAgICAgICAgICAgICAgICAgICAgICA/IHMubGluZVRvKGEueCwgYS55KVxuICAgICAgICAgICAgICAgICAgICAgIDogcy5iZXppZXJDdXJ2ZVRvKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0Ll92aWV3LmNvbnRyb2xQb2ludE5leHRYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0Ll92aWV3LmNvbnRyb2xQb2ludE5leHRZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLmNvbnRyb2xQb2ludFByZXZpb3VzWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5jb250cm9sUG9pbnRQcmV2aW91c1ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEueCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS55XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBuID0gaS5fdmlldyxcbiAgICAgICAgICAgICAgICAgICAgbyA9IG4uc3BhbkdhcHMsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBuLnNjYWxlWmVybyxcbiAgICAgICAgICAgICAgICAgICAgbCA9IGkuX2xvb3A7XG4gICAgICAgICAgICAgICAgICBsIHx8XG4gICAgICAgICAgICAgICAgICAgIChcInRvcFwiID09PSBuLmZpbGxcbiAgICAgICAgICAgICAgICAgICAgICA/IChyID0gbi5zY2FsZVRvcClcbiAgICAgICAgICAgICAgICAgICAgICA6IFwiYm90dG9tXCIgPT09IG4uZmlsbCAmJiAociA9IG4uc2NhbGVCb3R0b20pKTtcbiAgICAgICAgICAgICAgICAgIHZhciBzID0gaS5fY2hhcnQuY3R4O1xuICAgICAgICAgICAgICAgICAgcy5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICB2YXIgZCA9IGkuX2NoaWxkcmVuLnNsaWNlKCksXG4gICAgICAgICAgICAgICAgICAgIHUgPSAtMTtcbiAgICAgICAgICAgICAgICAgIGwgJiYgZC5sZW5ndGggJiYgZC5wdXNoKGRbMF0pO1xuICAgICAgICAgICAgICAgICAgdmFyIGMsIGgsIGYsIGc7XG4gICAgICAgICAgICAgICAgICBpZiAoZC5sZW5ndGggJiYgbi5maWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAocy5iZWdpblBhdGgoKSwgYyA9IDA7IGMgPCBkLmxlbmd0aDsgKytjKVxuICAgICAgICAgICAgICAgICAgICAgIChoID0gZFtjXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZiA9IGUucHJldmlvdXNJdGVtKGQsIGMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChnID0gaC5fdmlldyksXG4gICAgICAgICAgICAgICAgICAgICAgICAwID09PSBjXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gKGwgPyBzLm1vdmVUbyhyLngsIHIueSkgOiBzLm1vdmVUbyhnLngsIHIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcuc2tpcCB8fCAoKHUgPSBjKSwgcy5saW5lVG8oZy54LCBnLnkpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoKGYgPSAtMSA9PT0gdSA/IGYgOiBkW3VdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnLnNraXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ICE9PSBjIC0gMSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcy5saW5lVG8oci54LCByLnkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzLmxpbmVUbyhmLl92aWV3LngsIHIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAodSAhPT0gYyAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8gJiYgLTEgIT09IHVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdChmLCBoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHMubGluZVRvKGcueCwgZy55KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAocy5saW5lVG8oZy54LCByKSwgcy5saW5lVG8oZy54LCBnLnkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdChmLCBoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHUgPSBjKSkpO1xuICAgICAgICAgICAgICAgICAgICBsIHx8IC0xID09PSB1IHx8IHMubGluZVRvKGRbdV0uX3ZpZXcueCwgciksXG4gICAgICAgICAgICAgICAgICAgICAgKHMuZmlsbFN0eWxlID0gbi5iYWNrZ3JvdW5kQ29sb3IgfHwgYS5kZWZhdWx0Q29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAgIHMuY2xvc2VQYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgcy5maWxsKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgcCA9IGEuZWxlbWVudHMubGluZTtcbiAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgIHMubGluZUNhcCA9IG4uYm9yZGVyQ2FwU3R5bGUgfHwgcC5ib3JkZXJDYXBTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICBzLnNldExpbmVEYXNoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzLnNldExpbmVEYXNoKG4uYm9yZGVyRGFzaCB8fCBwLmJvcmRlckRhc2gpLFxuICAgICAgICAgICAgICAgICAgICAgIHMubGluZURhc2hPZmZzZXQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgbi5ib3JkZXJEYXNoT2Zmc2V0IHx8IHAuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICBzLmxpbmVKb2luID0gbi5ib3JkZXJKb2luU3R5bGUgfHwgcC5ib3JkZXJKb2luU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgcy5saW5lV2lkdGggPSBuLmJvcmRlcldpZHRoIHx8IHAuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgcy5zdHJva2VTdHlsZSA9IG4uYm9yZGVyQ29sb3IgfHwgYS5kZWZhdWx0Q29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgcy5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICB1ID0gLTEsXG4gICAgICAgICAgICAgICAgICAgICAgYyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGMgPCBkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgKytjXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIChoID0gZFtjXSksXG4gICAgICAgICAgICAgICAgICAgICAgKGYgPSBlLnByZXZpb3VzSXRlbShkLCBjKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGcgPSBoLl92aWV3KSxcbiAgICAgICAgICAgICAgICAgICAgICAwID09PSBjXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGcuc2tpcCB8fCAocy5tb3ZlVG8oZy54LCBnLnkpLCAodSA9IGMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoKGYgPSAtMSA9PT0gdSA/IGYgOiBkW3VdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZy5za2lwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCh1ICE9PSBjIC0gMSAmJiAhbykgfHwgLTEgPT09IHVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcy5tb3ZlVG8oZy54LCBnLnkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHQoZiwgaCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHUgPSBjKSkpO1xuICAgICAgICAgICAgICAgICAgcy5zdHJva2UoKSwgcy5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDM5OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuX3ZpZXc7XG4gICAgICAgICAgICAgIHJldHVybiBlXG4gICAgICAgICAgICAgICAgPyBNYXRoLnBvdyh0IC0gZS54LCAyKSA8IE1hdGgucG93KGUucmFkaXVzICsgZS5oaXRSYWRpdXMsIDIpXG4gICAgICAgICAgICAgICAgOiAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGEodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuX3ZpZXc7XG4gICAgICAgICAgICAgIHJldHVybiBlXG4gICAgICAgICAgICAgICAgPyBNYXRoLnBvdyh0IC0gZS55LCAyKSA8IE1hdGgucG93KGUucmFkaXVzICsgZS5oaXRSYWRpdXMsIDIpXG4gICAgICAgICAgICAgICAgOiAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpID0gdC5oZWxwZXJzLFxuICAgICAgICAgICAgICBuID0gdC5kZWZhdWx0cy5nbG9iYWwsXG4gICAgICAgICAgICAgIG8gPSBuLmRlZmF1bHRDb2xvcjtcbiAgICAgICAgICAgIChuLmVsZW1lbnRzLnBvaW50ID0ge1xuICAgICAgICAgICAgICByYWRpdXM6IDMsXG4gICAgICAgICAgICAgIHBvaW50U3R5bGU6IFwiY2lyY2xlXCIsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogbyxcbiAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBvLFxuICAgICAgICAgICAgICBoaXRSYWRpdXM6IDEsXG4gICAgICAgICAgICAgIGhvdmVyUmFkaXVzOiA0LFxuICAgICAgICAgICAgICBob3ZlckJvcmRlcldpZHRoOiAxLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICh0LmVsZW1lbnRzLlBvaW50ID0gdC5FbGVtZW50LmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgaW5SYW5nZTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5fdmlldztcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhXG4gICAgICAgICAgICAgICAgICAgID8gTWF0aC5wb3codCAtIGEueCwgMikgKyBNYXRoLnBvdyhlIC0gYS55LCAyKSA8XG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhhLmhpdFJhZGl1cyArIGEucmFkaXVzLCAyKVxuICAgICAgICAgICAgICAgICAgICA6ICExO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5MYWJlbFJhbmdlOiBlLFxuICAgICAgICAgICAgICAgIGluWFJhbmdlOiBlLFxuICAgICAgICAgICAgICAgIGluWVJhbmdlOiBhLFxuICAgICAgICAgICAgICAgIGdldENlbnRlclBvaW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX3ZpZXc7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geyB4OiB0LngsIHk6IHQueSB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0QXJlYTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguUEkgKiBNYXRoLnBvdyh0aGlzLl92aWV3LnJhZGl1cywgMik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwUG9zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fdmlldztcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IHQueCwgeTogdC55LCBwYWRkaW5nOiB0LnJhZGl1cyArIHQuYm9yZGVyV2lkdGggfTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5fdmlldyxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHRoaXMuX2NoYXJ0LmN0eCxcbiAgICAgICAgICAgICAgICAgICAgciA9IGUucG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IGUucmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICBzID0gZS54LFxuICAgICAgICAgICAgICAgICAgICBkID0gZS55O1xuICAgICAgICAgICAgICAgICAgZS5za2lwIHx8XG4gICAgICAgICAgICAgICAgICAgICgoYS5zdHJva2VTdHlsZSA9IGUuYm9yZGVyQ29sb3IgfHwgbyksXG4gICAgICAgICAgICAgICAgICAgIChhLmxpbmVXaWR0aCA9IGkuZ2V0VmFsdWVPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgZS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICBuLmVsZW1lbnRzLnBvaW50LmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAoYS5maWxsU3R5bGUgPSBlLmJhY2tncm91bmRDb2xvciB8fCBvKSxcbiAgICAgICAgICAgICAgICAgICAgdC5jYW52YXNIZWxwZXJzLmRyYXdQb2ludChhLCByLCBsLCBzLCBkKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDQwOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0Ll92aWV3LndpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYSh0KSB7XG4gICAgICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgIHIgPSB0Ll92aWV3O1xuICAgICAgICAgICAgICBpZiAoZSh0KSkge1xuICAgICAgICAgICAgICAgIHZhciBsID0gci53aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgKGEgPSByLnggLSBsKSxcbiAgICAgICAgICAgICAgICAgIChpID0gci54ICsgbCksXG4gICAgICAgICAgICAgICAgICAobiA9IE1hdGgubWluKHIueSwgci5iYXNlKSksXG4gICAgICAgICAgICAgICAgICAobyA9IE1hdGgubWF4KHIueSwgci5iYXNlKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSByLmhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgKGEgPSBNYXRoLm1pbihyLngsIHIuYmFzZSkpLFxuICAgICAgICAgICAgICAgICAgKGkgPSBNYXRoLm1heChyLngsIHIuYmFzZSkpLFxuICAgICAgICAgICAgICAgICAgKG4gPSByLnkgLSBzKSxcbiAgICAgICAgICAgICAgICAgIChvID0gci55ICsgcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHsgbGVmdDogYSwgdG9wOiBuLCByaWdodDogaSwgYm90dG9tOiBvIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IHQuZGVmYXVsdHMuZ2xvYmFsO1xuICAgICAgICAgICAgKGkuZWxlbWVudHMucmVjdGFuZ2xlID0ge1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGkuZGVmYXVsdENvbG9yLFxuICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMCxcbiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGkuZGVmYXVsdENvbG9yLFxuICAgICAgICAgICAgICBib3JkZXJTa2lwcGVkOiBcImJvdHRvbVwiLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICh0LmVsZW1lbnRzLlJlY3RhbmdsZSA9IHQuRWxlbWVudC5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc1sodSArIHQpICUgNF07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuX2NoYXJ0LmN0eCxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHRoaXMuX3ZpZXcsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLndpZHRoIC8gMixcbiAgICAgICAgICAgICAgICAgICAgbiA9IGEueCAtIGksXG4gICAgICAgICAgICAgICAgICAgIG8gPSBhLnggKyBpLFxuICAgICAgICAgICAgICAgICAgICByID0gYS5iYXNlIC0gKGEuYmFzZSAtIGEueSksXG4gICAgICAgICAgICAgICAgICAgIGwgPSBhLmJvcmRlcldpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICAgIGEuYm9yZGVyV2lkdGggJiYgKChuICs9IGwpLCAobyAtPSBsKSwgKHIgKz0gbCkpLFxuICAgICAgICAgICAgICAgICAgICBlLmJlZ2luUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAoZS5maWxsU3R5bGUgPSBhLmJhY2tncm91bmRDb2xvciksXG4gICAgICAgICAgICAgICAgICAgIChlLnN0cm9rZVN0eWxlID0gYS5ib3JkZXJDb2xvciksXG4gICAgICAgICAgICAgICAgICAgIChlLmxpbmVXaWR0aCA9IGEuYm9yZGVyV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgdmFyIHMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgW24sIGEuYmFzZV0sXG4gICAgICAgICAgICAgICAgICAgICAgW24sIHJdLFxuICAgICAgICAgICAgICAgICAgICAgIFtvLCByXSxcbiAgICAgICAgICAgICAgICAgICAgICBbbywgYS5iYXNlXSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgZCA9IFtcImJvdHRvbVwiLCBcImxlZnRcIiwgXCJ0b3BcIiwgXCJyaWdodFwiXSxcbiAgICAgICAgICAgICAgICAgICAgdSA9IGQuaW5kZXhPZihhLmJvcmRlclNraXBwZWQsIDApO1xuICAgICAgICAgICAgICAgICAgLTEgPT09IHUgJiYgKHUgPSAwKTtcbiAgICAgICAgICAgICAgICAgIHZhciBjID0gdCgwKTtcbiAgICAgICAgICAgICAgICAgIGUubW92ZVRvKGNbMF0sIGNbMV0pO1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaCA9IDE7IDQgPiBoOyBoKyspIChjID0gdChoKSksIGUubGluZVRvKGNbMF0sIGNbMV0pO1xuICAgICAgICAgICAgICAgICAgZS5maWxsKCksIGEuYm9yZGVyV2lkdGggJiYgZS5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl92aWV3O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuYmFzZSAtIHQueTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGluUmFuZ2U6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9ICExO1xuICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBhKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpID1cbiAgICAgICAgICAgICAgICAgICAgICB0ID49IG4ubGVmdCAmJlxuICAgICAgICAgICAgICAgICAgICAgIHQgPD0gbi5yaWdodCAmJlxuICAgICAgICAgICAgICAgICAgICAgIGUgPj0gbi50b3AgJiZcbiAgICAgICAgICAgICAgICAgICAgICBlIDw9IG4uYm90dG9tO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbkxhYmVsUmFuZ2U6IGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICBpZiAoIW4uX3ZpZXcpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgIHZhciBvID0gITEsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBhKG4pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChvID0gZShuKVxuICAgICAgICAgICAgICAgICAgICA/IHQgPj0gci5sZWZ0ICYmIHQgPD0gci5yaWdodFxuICAgICAgICAgICAgICAgICAgICA6IGkgPj0gci50b3AgJiYgaSA8PSByLmJvdHRvbSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpblhSYW5nZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gYSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0ID49IGUubGVmdCAmJiB0IDw9IGUucmlnaHQ7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbllSYW5nZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gYSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0ID49IGUudG9wICYmIHQgPD0gZS5ib3R0b207XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRDZW50ZXJQb2ludDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLl92aWV3O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZSh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgID8gKCh0ID0gaS54KSwgKGEgPSAoaS55ICsgaS5iYXNlKSAvIDIpKVxuICAgICAgICAgICAgICAgICAgICAgIDogKCh0ID0gKGkueCArIGkuYmFzZSkgLyAyKSwgKGEgPSBpLnkpKSxcbiAgICAgICAgICAgICAgICAgICAgeyB4OiB0LCB5OiBhIH1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRBcmVhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX3ZpZXc7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdC53aWR0aCAqIE1hdGguYWJzKHQueSAtIHQuYmFzZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwUG9zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fdmlldztcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IHQueCwgeTogdC55IH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDQxOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzLFxuICAgICAgICAgICAgICBhID0geyBwb3NpdGlvbjogXCJib3R0b21cIiB9LFxuICAgICAgICAgICAgICBpID0gdC5TY2FsZS5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGdldExhYmVsczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmNoYXJ0LmRhdGE7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5pc0hvcml6b250YWwoKSA/IHQueExhYmVscyA6IHQueUxhYmVscykgfHwgdC5sYWJlbHNcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGEgPSB0LmdldExhYmVscygpO1xuICAgICAgICAgICAgICAgICAgKHQubWluSW5kZXggPSAwKSwgKHQubWF4SW5kZXggPSBhLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHQub3B0aW9ucy50aWNrcy5taW4gJiZcbiAgICAgICAgICAgICAgICAgICAgKChpID0gZS5pbmRleE9mKGEsIHQub3B0aW9ucy50aWNrcy5taW4pKSxcbiAgICAgICAgICAgICAgICAgICAgKHQubWluSW5kZXggPSAtMSAhPT0gaSA/IGkgOiB0Lm1pbkluZGV4KSksXG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gdC5vcHRpb25zLnRpY2tzLm1heCAmJlxuICAgICAgICAgICAgICAgICAgICAgICgoaSA9IGUuaW5kZXhPZihhLCB0Lm9wdGlvbnMudGlja3MubWF4KSksXG4gICAgICAgICAgICAgICAgICAgICAgKHQubWF4SW5kZXggPSAtMSAhPT0gaSA/IGkgOiB0Lm1heEluZGV4KSksXG4gICAgICAgICAgICAgICAgICAgICh0Lm1pbiA9IGFbdC5taW5JbmRleF0pLFxuICAgICAgICAgICAgICAgICAgICAodC5tYXggPSBhW3QubWF4SW5kZXhdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ1aWxkVGlja3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgZSA9IHQuZ2V0TGFiZWxzKCk7XG4gICAgICAgICAgICAgICAgICB0LnRpY2tzID1cbiAgICAgICAgICAgICAgICAgICAgMCA9PT0gdC5taW5JbmRleCAmJiB0Lm1heEluZGV4ID09PSBlLmxlbmd0aCAtIDFcbiAgICAgICAgICAgICAgICAgICAgICA/IGVcbiAgICAgICAgICAgICAgICAgICAgICA6IGUuc2xpY2UodC5taW5JbmRleCwgdC5tYXhJbmRleCArIDEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuY2hhcnQuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGEuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKGkueExhYmVscyAmJiBuKSB8fCAoaS55TGFiZWxzICYmICFuKVxuICAgICAgICAgICAgICAgICAgICA/IGEuZ2V0UmlnaHRWYWx1ZShpLmRhdGFzZXRzW2VdLmRhdGFbdF0pXG4gICAgICAgICAgICAgICAgICAgIDogYS50aWNrc1t0XTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFBpeGVsRm9yVmFsdWU6IGZ1bmN0aW9uICh0LCBlLCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICBuLm1heEluZGV4ICtcbiAgICAgICAgICAgICAgICAgICAgICAgIDEgLVxuICAgICAgICAgICAgICAgICAgICAgICAgbi5taW5JbmRleCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAobi5vcHRpb25zLmdyaWRMaW5lcy5vZmZzZXRHcmlkTGluZXMgPyAwIDogMSksXG4gICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gdCAmJiBpc05hTihlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IG4uZ2V0TGFiZWxzKCksXG4gICAgICAgICAgICAgICAgICAgICAgbCA9IHIuaW5kZXhPZih0KTtcbiAgICAgICAgICAgICAgICAgICAgZSA9IC0xICE9PSBsID8gbCA6IGU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAobi5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IG4ud2lkdGggLSAobi5wYWRkaW5nTGVmdCArIG4ucGFkZGluZ1JpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgICBkID0gcyAvIG8sXG4gICAgICAgICAgICAgICAgICAgICAgdSA9IGQgKiAoZSAtIG4ubWluSW5kZXgpICsgbi5wYWRkaW5nTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAoKG4ub3B0aW9ucy5ncmlkTGluZXMub2Zmc2V0R3JpZExpbmVzICYmIGkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAobi5tYXhJbmRleCA9PT0gbi5taW5JbmRleCAmJiBpKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ICs9IGQgLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICBuLmxlZnQgKyBNYXRoLnJvdW5kKHUpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgYyA9IG4uaGVpZ2h0IC0gKG4ucGFkZGluZ1RvcCArIG4ucGFkZGluZ0JvdHRvbSksXG4gICAgICAgICAgICAgICAgICAgIGggPSBjIC8gbyxcbiAgICAgICAgICAgICAgICAgICAgZiA9IGggKiAoZSAtIG4ubWluSW5kZXgpICsgbi5wYWRkaW5nVG9wO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgbi5vcHRpb25zLmdyaWRMaW5lcy5vZmZzZXRHcmlkTGluZXMgJiYgaSAmJiAoZiArPSBoIC8gMiksXG4gICAgICAgICAgICAgICAgICAgIG4udG9wICsgTWF0aC5yb3VuZChmKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGlja3NbdF0sXG4gICAgICAgICAgICAgICAgICAgIHQgKyB0aGlzLm1pbkluZGV4LFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWVGb3JQaXhlbDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgIGEudGlja3MubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgICAgICAgIChhLm9wdGlvbnMuZ3JpZExpbmVzLm9mZnNldEdyaWRMaW5lcyA/IDAgOiAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG4gPSBhLmlzSG9yaXpvbnRhbCgpLFxuICAgICAgICAgICAgICAgICAgICBvID0gblxuICAgICAgICAgICAgICAgICAgICAgID8gYS53aWR0aCAtIChhLnBhZGRpbmdMZWZ0ICsgYS5wYWRkaW5nUmlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgOiBhLmhlaWdodCAtIChhLnBhZGRpbmdUb3AgKyBhLnBhZGRpbmdCb3R0b20pLFxuICAgICAgICAgICAgICAgICAgICByID0gbyAvIGk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAodCAtPSBuID8gYS5sZWZ0IDogYS50b3ApLFxuICAgICAgICAgICAgICAgICAgICBhLm9wdGlvbnMuZ3JpZExpbmVzLm9mZnNldEdyaWRMaW5lcyAmJiAodCAtPSByIC8gMiksXG4gICAgICAgICAgICAgICAgICAgICh0IC09IG4gPyBhLnBhZGRpbmdMZWZ0IDogYS5wYWRkaW5nVG9wKSxcbiAgICAgICAgICAgICAgICAgICAgKGUgPSAwID49IHQgPyAwIDogTWF0aC5yb3VuZCh0IC8gcikpXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0QmFzZVBpeGVsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ib3R0b207XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0LnNjYWxlU2VydmljZS5yZWdpc3RlclNjYWxlVHlwZShcImNhdGVnb3J5XCIsIGksIGEpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDQyOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzLFxuICAgICAgICAgICAgICBhID0ge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcImxlZnRcIixcbiAgICAgICAgICAgICAgICB0aWNrczogeyBjYWxsYmFjazogdC5UaWNrcy5mb3JtYXR0ZXJzLmxpbmVhciB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBpID0gdC5MaW5lYXJTY2FsZUJhc2UuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGwgPyB0LnhBeGlzSUQgPT09IGEuaWQgOiB0LnlBeGlzSUQgPT09IGEuaWQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBhLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICBvID0gbi5kYXRhLFxuICAgICAgICAgICAgICAgICAgICByID0gby5kYXRhc2V0cyxcbiAgICAgICAgICAgICAgICAgICAgbCA9IGEuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoKChhLm1pbiA9IG51bGwpLCAoYS5tYXggPSBudWxsKSwgaS5zdGFja2VkKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBlLmVhY2gociwgZnVuY3Rpb24gKG8sIHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IG4uZ2V0RGF0YXNldE1ldGEocik7XG4gICAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBzW2wudHlwZV0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChzW2wudHlwZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aXZlVmFsdWVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmVnYXRpdmVWYWx1ZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBzW2wudHlwZV0ucG9zaXRpdmVWYWx1ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB1ID0gc1tsLnR5cGVdLm5lZ2F0aXZlVmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICAgIG4uaXNEYXRhc2V0VmlzaWJsZShyKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdChsKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZS5lYWNoKG8uZGF0YSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSArYS5nZXRSaWdodFZhbHVlKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpc05hTihuKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuZGF0YVtlXS5oaWRkZW4gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGRbZV0gPSBkW2VdIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1W2VdID0gdVtlXSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnJlbGF0aXZlUG9pbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChkW2VdID0gMTAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwID4gblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAodVtlXSArPSBuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoZFtlXSArPSBuKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgZS5lYWNoKHMsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHQucG9zaXRpdmVWYWx1ZXMuY29uY2F0KHQubmVnYXRpdmVWYWx1ZXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gZS5taW4oaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBlLm1heChpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChhLm1pbiA9IG51bGwgPT09IGEubWluID8gbiA6IE1hdGgubWluKGEubWluLCBuKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChhLm1heCA9IG51bGwgPT09IGEubWF4ID8gbyA6IE1hdGgubWF4KGEubWF4LCBvKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKHIsIGZ1bmN0aW9uIChpLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBuLmdldERhdGFzZXRNZXRhKG8pO1xuICAgICAgICAgICAgICAgICAgICAgIG4uaXNEYXRhc2V0VmlzaWJsZShvKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdChyKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGkuZGF0YSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSArYS5nZXRSaWdodFZhbHVlKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpc05hTihpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuZGF0YVtlXS5oaWRkZW4gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PT0gYS5taW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGEubWluID0gaSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaSA8IGEubWluICYmIChhLm1pbiA9IGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT09IGEubWF4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChhLm1heCA9IGkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGkgPiBhLm1heCAmJiAoYS5tYXggPSBpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFRpY2tMaW1pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBuID0gaS5vcHRpb25zLnRpY2tzO1xuICAgICAgICAgICAgICAgICAgaWYgKGkuaXNIb3Jpem9udGFsKCkpXG4gICAgICAgICAgICAgICAgICAgIGEgPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAgICAgICBuLm1heFRpY2tzTGltaXQgPyBuLm1heFRpY2tzTGltaXQgOiAxMSxcbiAgICAgICAgICAgICAgICAgICAgICBNYXRoLmNlaWwoaS53aWR0aCAvIDUwKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICBuLmZvbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgIHQuZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250U2l6ZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBhID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgICAgICAgbi5tYXhUaWNrc0xpbWl0ID8gbi5tYXhUaWNrc0xpbWl0IDogMTEsXG4gICAgICAgICAgICAgICAgICAgICAgTWF0aC5jZWlsKGkuaGVpZ2h0IC8gKDIgKiBvKSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGFuZGxlRGlyZWN0aW9uYWxDaGFuZ2VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmlzSG9yaXpvbnRhbCgpIHx8IHRoaXMudGlja3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiArdGhpcy5nZXRSaWdodFZhbHVlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZV0uZGF0YVt0XVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFBpeGVsRm9yVmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLnBhZGRpbmdMZWZ0LFxuICAgICAgICAgICAgICAgICAgICBvID0gaS5wYWRkaW5nQm90dG9tLFxuICAgICAgICAgICAgICAgICAgICByID0gaS5zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgbCA9ICtpLmdldFJpZ2h0VmFsdWUodCksXG4gICAgICAgICAgICAgICAgICAgIHMgPSBpLmVuZCAtIHI7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaS5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgICAgICAgICA/ICgoYSA9IGkud2lkdGggLSAobiArIGkucGFkZGluZ1JpZ2h0KSksXG4gICAgICAgICAgICAgICAgICAgICAgKGUgPSBpLmxlZnQgKyAoYSAvIHMpICogKGwgLSByKSksXG4gICAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZChlICsgbikpXG4gICAgICAgICAgICAgICAgICAgIDogKChhID0gaS5oZWlnaHQgLSAoaS5wYWRkaW5nVG9wICsgbykpLFxuICAgICAgICAgICAgICAgICAgICAgIChlID0gaS5ib3R0b20gLSBvIC0gKGEgLyBzKSAqIChsIC0gcikpLFxuICAgICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQoZSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWVGb3JQaXhlbDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgYSA9IGUuaXNIb3Jpem9udGFsKCksXG4gICAgICAgICAgICAgICAgICAgIGkgPSBlLnBhZGRpbmdMZWZ0LFxuICAgICAgICAgICAgICAgICAgICBuID0gZS5wYWRkaW5nQm90dG9tLFxuICAgICAgICAgICAgICAgICAgICBvID0gYVxuICAgICAgICAgICAgICAgICAgICAgID8gZS53aWR0aCAtIChpICsgZS5wYWRkaW5nUmlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgOiBlLmhlaWdodCAtIChlLnBhZGRpbmdUb3AgKyBuKSxcbiAgICAgICAgICAgICAgICAgICAgciA9IChhID8gdCAtIGUubGVmdCAtIGkgOiBlLmJvdHRvbSAtIG4gLSB0KSAvIG87XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZS5zdGFydCArIChlLmVuZCAtIGUuc3RhcnQpICogcjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGhpcy50aWNrc0FzTnVtYmVyc1t0XSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0LnNjYWxlU2VydmljZS5yZWdpc3RlclNjYWxlVHlwZShcImxpbmVhclwiLCBpLCBhKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICA0MzogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycyxcbiAgICAgICAgICAgICAgYSA9IGUubm9vcDtcbiAgICAgICAgICAgIHQuTGluZWFyU2NhbGVCYXNlID0gdC5TY2FsZS5leHRlbmQoe1xuICAgICAgICAgICAgICBoYW5kbGVUaWNrUmFuZ2VPcHRpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgYSA9IHQub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgIGkgPSBhLnRpY2tzO1xuICAgICAgICAgICAgICAgIGlmIChpLmJlZ2luQXRaZXJvKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IGUuc2lnbih0Lm1pbiksXG4gICAgICAgICAgICAgICAgICAgIG8gPSBlLnNpZ24odC5tYXgpO1xuICAgICAgICAgICAgICAgICAgMCA+IG4gJiYgMCA+IG8gPyAodC5tYXggPSAwKSA6IG4gPiAwICYmIG8gPiAwICYmICh0Lm1pbiA9IDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGkubWluXG4gICAgICAgICAgICAgICAgICA/ICh0Lm1pbiA9IGkubWluKVxuICAgICAgICAgICAgICAgICAgOiB2b2lkIDAgIT09IGkuc3VnZ2VzdGVkTWluICYmXG4gICAgICAgICAgICAgICAgICAgICh0Lm1pbiA9IE1hdGgubWluKHQubWluLCBpLnN1Z2dlc3RlZE1pbikpLFxuICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBpLm1heFxuICAgICAgICAgICAgICAgICAgICA/ICh0Lm1heCA9IGkubWF4KVxuICAgICAgICAgICAgICAgICAgICA6IHZvaWQgMCAhPT0gaS5zdWdnZXN0ZWRNYXggJiZcbiAgICAgICAgICAgICAgICAgICAgICAodC5tYXggPSBNYXRoLm1heCh0Lm1heCwgaS5zdWdnZXN0ZWRNYXgpKSxcbiAgICAgICAgICAgICAgICAgIHQubWluID09PSB0Lm1heCAmJiAodC5tYXgrKywgaS5iZWdpbkF0WmVybyB8fCB0Lm1pbi0tKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZ2V0VGlja0xpbWl0OiBhLFxuICAgICAgICAgICAgICBoYW5kbGVEaXJlY3Rpb25hbENoYW5nZXM6IGEsXG4gICAgICAgICAgICAgIGJ1aWxkVGlja3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICBpID0gYS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgbiA9IGkudGlja3MsXG4gICAgICAgICAgICAgICAgICBvID0gYS5nZXRUaWNrTGltaXQoKTtcbiAgICAgICAgICAgICAgICBvID0gTWF0aC5tYXgoMiwgbyk7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSB7XG4gICAgICAgICAgICAgICAgICAgIG1heFRpY2tzOiBvLFxuICAgICAgICAgICAgICAgICAgICBtaW46IG4ubWluLFxuICAgICAgICAgICAgICAgICAgICBtYXg6IG4ubWF4LFxuICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZTogZS5nZXRWYWx1ZU9yRGVmYXVsdChuLmZpeGVkU3RlcFNpemUsIG4uc3RlcFNpemUpLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGwgPSAoYS50aWNrcyA9IHQuVGlja3MuZ2VuZXJhdG9ycy5saW5lYXIociwgYSkpO1xuICAgICAgICAgICAgICAgIGEuaGFuZGxlRGlyZWN0aW9uYWxDaGFuZ2VzKCksXG4gICAgICAgICAgICAgICAgICAoYS5tYXggPSBlLm1heChsKSksXG4gICAgICAgICAgICAgICAgICAoYS5taW4gPSBlLm1pbihsKSksXG4gICAgICAgICAgICAgICAgICBuLnJldmVyc2VcbiAgICAgICAgICAgICAgICAgICAgPyAobC5yZXZlcnNlKCksIChhLnN0YXJ0ID0gYS5tYXgpLCAoYS5lbmQgPSBhLm1pbikpXG4gICAgICAgICAgICAgICAgICAgIDogKChhLnN0YXJ0ID0gYS5taW4pLCAoYS5lbmQgPSBhLm1heCkpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjb252ZXJ0VGlja3NUb0xhYmVsczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgICAgICAgICAoZS50aWNrc0FzTnVtYmVycyA9IGUudGlja3Muc2xpY2UoKSksXG4gICAgICAgICAgICAgICAgICAoZS56ZXJvTGluZUluZGV4ID0gZS50aWNrcy5pbmRleE9mKDApKSxcbiAgICAgICAgICAgICAgICAgIHQuU2NhbGUucHJvdG90eXBlLmNvbnZlcnRUaWNrc1RvTGFiZWxzLmNhbGwoZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICA0NDogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycyxcbiAgICAgICAgICAgICAgYSA9IHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJsZWZ0XCIsXG4gICAgICAgICAgICAgICAgdGlja3M6IHsgY2FsbGJhY2s6IHQuVGlja3MuZm9ybWF0dGVycy5sb2dhcml0aG1pYyB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBpID0gdC5TY2FsZS5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGRldGVybWluZURhdGFMaW1pdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZCA/IHQueEF4aXNJRCA9PT0gYS5pZCA6IHQueUF4aXNJRCA9PT0gYS5pZDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkudGlja3MsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBhLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICByID0gby5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBsID0gci5kYXRhc2V0cyxcbiAgICAgICAgICAgICAgICAgICAgcyA9IGUuZ2V0VmFsdWVPckRlZmF1bHQsXG4gICAgICAgICAgICAgICAgICAgIGQgPSBhLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAoKGEubWluID0gbnVsbCksXG4gICAgICAgICAgICAgICAgICAgIChhLm1heCA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAoYS5taW5Ob3RaZXJvID0gbnVsbCksXG4gICAgICAgICAgICAgICAgICAgIGkuc3RhY2tlZClcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBlLmVhY2gobCwgZnVuY3Rpb24gKG4sIHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IG8uZ2V0RGF0YXNldE1ldGEocik7XG4gICAgICAgICAgICAgICAgICAgICAgby5pc0RhdGFzZXRWaXNpYmxlKHIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0KGwpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAodm9pZCAwID09PSB1W2wudHlwZV0gJiYgKHVbbC50eXBlXSA9IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChuLmRhdGEsIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdVtsLnR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSArYS5nZXRSaWdodFZhbHVlKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpc05hTihvKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuZGF0YVtlXS5oaWRkZW4gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKG5bZV0gPSBuW2VdIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkucmVsYXRpdmVQb2ludHMgPyAobltlXSA9IDEwMCkgOiAobltlXSArPSBvKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaCh1LCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlLm1pbih0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGUubWF4KHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKGEubWluID0gbnVsbCA9PT0gYS5taW4gPyBpIDogTWF0aC5taW4oYS5taW4sIGkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGEubWF4ID0gbnVsbCA9PT0gYS5tYXggPyBuIDogTWF0aC5tYXgoYS5tYXgsIG4pKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBlLmVhY2gobCwgZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IG8uZ2V0RGF0YXNldE1ldGEobik7XG4gICAgICAgICAgICAgICAgICAgICAgby5pc0RhdGFzZXRWaXNpYmxlKG4pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0KHIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmVhY2goaS5kYXRhLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9ICthLmdldFJpZ2h0VmFsdWUodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlzTmFOKGkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5kYXRhW2VdLmhpZGRlbiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09PSBhLm1pblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoYS5taW4gPSBpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpIDwgYS5taW4gJiYgKGEubWluID0gaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA9PT0gYS5tYXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGEubWF4ID0gaSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaSA+IGEubWF4ICYmIChhLm1heCA9IGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgIT09IGkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09PSBhLm1pbk5vdFplcm8gfHwgaSA8IGEubWluTm90WmVybykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhLm1pbk5vdFplcm8gPSBpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAoYS5taW4gPSBzKG4ubWluLCBhLm1pbikpLFxuICAgICAgICAgICAgICAgICAgICAoYS5tYXggPSBzKG4ubWF4LCBhLm1heCkpLFxuICAgICAgICAgICAgICAgICAgICBhLm1pbiA9PT0gYS5tYXggJiZcbiAgICAgICAgICAgICAgICAgICAgICAoMCAhPT0gYS5taW4gJiYgbnVsbCAhPT0gYS5taW5cbiAgICAgICAgICAgICAgICAgICAgICAgID8gKChhLm1pbiA9IE1hdGgucG93KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoZS5sb2cxMChhLm1pbikpIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGEubWF4ID0gTWF0aC5wb3coXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihlLmxvZzEwKGEubWF4KSkgKyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoKGEubWluID0gMSksIChhLm1heCA9IDEwKSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnVpbGRUaWNrczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gYS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBuID0gaS50aWNrcyxcbiAgICAgICAgICAgICAgICAgICAgbyA9IHsgbWluOiBuLm1pbiwgbWF4OiBuLm1heCB9LFxuICAgICAgICAgICAgICAgICAgICByID0gKGEudGlja3MgPSB0LlRpY2tzLmdlbmVyYXRvcnMubG9nYXJpdGhtaWMobywgYSkpO1xuICAgICAgICAgICAgICAgICAgYS5pc0hvcml6b250YWwoKSB8fCByLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgKGEubWF4ID0gZS5tYXgocikpLFxuICAgICAgICAgICAgICAgICAgICAoYS5taW4gPSBlLm1pbihyKSksXG4gICAgICAgICAgICAgICAgICAgIG4ucmV2ZXJzZVxuICAgICAgICAgICAgICAgICAgICAgID8gKHIucmV2ZXJzZSgpLCAoYS5zdGFydCA9IGEubWF4KSwgKGEuZW5kID0gYS5taW4pKVxuICAgICAgICAgICAgICAgICAgICAgIDogKChhLnN0YXJ0ID0gYS5taW4pLCAoYS5lbmQgPSBhLm1heCkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICh0aGlzLnRpY2tWYWx1ZXMgPSB0aGlzLnRpY2tzLnNsaWNlKCkpLFxuICAgICAgICAgICAgICAgICAgICB0LlNjYWxlLnByb3RvdHlwZS5jb252ZXJ0VGlja3NUb0xhYmVscy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiArdGhpcy5nZXRSaWdodFZhbHVlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZV0uZGF0YVt0XVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGhpcy50aWNrVmFsdWVzW3RdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFBpeGVsRm9yVmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgICAgbyA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBvLnN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBsID0gK28uZ2V0UmlnaHRWYWx1ZSh0KSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IG8ucGFkZGluZ1RvcCxcbiAgICAgICAgICAgICAgICAgICAgZCA9IG8ucGFkZGluZ0JvdHRvbSxcbiAgICAgICAgICAgICAgICAgICAgdSA9IG8ucGFkZGluZ0xlZnQsXG4gICAgICAgICAgICAgICAgICAgIGMgPSBvLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGggPSBjLnRpY2tzO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgby5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgICAgICAgICAgID8gKChuID0gZS5sb2cxMChvLmVuZCkgLSBlLmxvZzEwKHIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAgPT09IGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoaSA9IG8ubGVmdCArIHUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogKChhID0gby53aWR0aCAtICh1ICsgby5wYWRkaW5nUmlnaHQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaSA9IG8ubGVmdCArIChhIC8gbikgKiAoZS5sb2cxMChsKSAtIGUubG9nMTAocikpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaSArPSB1KSkpXG4gICAgICAgICAgICAgICAgICAgICAgOiAoKGEgPSBvLmhlaWdodCAtIChzICsgZCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgMCAhPT0gciB8fCBoLnJldmVyc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAwID09PSBvLmVuZCAmJiBoLnJldmVyc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgobiA9IGUubG9nMTAoby5zdGFydCkgLSBlLmxvZzEwKG8ubWluTm90WmVybykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID09PSBvLmVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gby50b3AgKyBzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsID09PSBvLm1pbk5vdFplcm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8udG9wICsgcyArIDAuMDIgKiBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBvLnRvcCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMDIgKiBhICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoMC45OCAqIGEpIC8gbikgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZS5sb2cxMChsKSAtIGUubG9nMTAoby5taW5Ob3RaZXJvKSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKChuID0gZS5sb2cxMChvLmVuZCkgLSBlLmxvZzEwKHIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhID0gby5oZWlnaHQgLSAocyArIGQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5ib3R0b20gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGEgLyBuKSAqIChlLmxvZzEwKGwpIC0gZS5sb2cxMChyKSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgobiA9IGUubG9nMTAoby5lbmQpIC0gZS5sb2cxMChvLm1pbk5vdFplcm8pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID09PSByXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gby5ib3R0b20gLSBkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbCA9PT0gby5taW5Ob3RaZXJvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gby5ib3R0b20gLSBkIC0gMC4wMiAqIGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBvLmJvdHRvbSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wMiAqIGEgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoMC45OCAqIGEpIC8gbikgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUubG9nMTAobCkgLSBlLmxvZzEwKG8ubWluTm90WmVybykpKSkpLFxuICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWVGb3JQaXhlbDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBuID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGUubG9nMTAobi5lbmQpIC0gZS5sb2cxMChuLnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIG4uaXNIb3Jpem9udGFsKClcbiAgICAgICAgICAgICAgICAgICAgICA/ICgoaSA9IG4ud2lkdGggLSAobi5wYWRkaW5nTGVmdCArIG4ucGFkZGluZ1JpZ2h0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG4uc3RhcnQgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdygxMCwgKCh0IC0gbi5sZWZ0IC0gbi5wYWRkaW5nTGVmdCkgKiBvKSAvIGkpKSlcbiAgICAgICAgICAgICAgICAgICAgICA6ICgoaSA9IG4uaGVpZ2h0IC0gKG4ucGFkZGluZ1RvcCArIG4ucGFkZGluZ0JvdHRvbSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGEgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKG4uYm90dG9tIC0gbi5wYWRkaW5nQm90dG9tIC0gdCkgKiBvKSAvIGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSAvIG4uc3RhcnQpKSxcbiAgICAgICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHQuc2NhbGVTZXJ2aWNlLnJlZ2lzdGVyU2NhbGVUeXBlKFwibG9nYXJpdGhtaWNcIiwgaSwgYSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgNDU6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmhlbHBlcnMsXG4gICAgICAgICAgICAgIGEgPSB0LmRlZmF1bHRzLmdsb2JhbCxcbiAgICAgICAgICAgICAgaSA9IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAhMCxcbiAgICAgICAgICAgICAgICBhbmltYXRlOiAhMCxcbiAgICAgICAgICAgICAgICBsaW5lQXJjOiAhMSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJjaGFydEFyZWFcIixcbiAgICAgICAgICAgICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiAhMCxcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiBcInJnYmEoMCwgMCwgMCwgMC4xKVwiLFxuICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgIHNob3dMYWJlbEJhY2tkcm9wOiAhMCxcbiAgICAgICAgICAgICAgICAgIGJhY2tkcm9wQ29sb3I6IFwicmdiYSgyNTUsMjU1LDI1NSwwLjc1KVwiLFxuICAgICAgICAgICAgICAgICAgYmFja2Ryb3BQYWRkaW5nWTogMixcbiAgICAgICAgICAgICAgICAgIGJhY2tkcm9wUGFkZGluZ1g6IDIsXG4gICAgICAgICAgICAgICAgICBjYWxsYmFjazogdC5UaWNrcy5mb3JtYXR0ZXJzLmxpbmVhcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBvaW50TGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTAsXG4gICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG4gPSB0LkxpbmVhclNjYWxlQmFzZS5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGdldFZhbHVlQ291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmRhdGEubGFiZWxzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkudGlja3M7XG4gICAgICAgICAgICAgICAgICAodC53aWR0aCA9IHQubWF4V2lkdGgpLFxuICAgICAgICAgICAgICAgICAgICAodC5oZWlnaHQgPSB0Lm1heEhlaWdodCksXG4gICAgICAgICAgICAgICAgICAgICh0LnhDZW50ZXIgPSBNYXRoLnJvdW5kKHQud2lkdGggLyAyKSksXG4gICAgICAgICAgICAgICAgICAgICh0LnlDZW50ZXIgPSBNYXRoLnJvdW5kKHQuaGVpZ2h0IC8gMikpO1xuICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlLm1pbihbdC5oZWlnaHQsIHQud2lkdGhdKSxcbiAgICAgICAgICAgICAgICAgICAgciA9IGUuZ2V0VmFsdWVPckRlZmF1bHQobi5mb250U2l6ZSwgYS5kZWZhdWx0Rm9udFNpemUpO1xuICAgICAgICAgICAgICAgICAgdC5kcmF3aW5nQXJlYSA9IGkuZGlzcGxheVxuICAgICAgICAgICAgICAgICAgICA/IG8gLyAyIC0gKHIgLyAyICsgbi5iYWNrZHJvcFBhZGRpbmdZKVxuICAgICAgICAgICAgICAgICAgICA6IG8gLyAyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGV0ZXJtaW5lRGF0YUxpbWl0czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhID0gdC5jaGFydDtcbiAgICAgICAgICAgICAgICAgICh0Lm1pbiA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAodC5tYXggPSBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGEuZGF0YS5kYXRhc2V0cywgZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYS5pc0RhdGFzZXRWaXNpYmxlKG4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGEuZ2V0RGF0YXNldE1ldGEobik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmVhY2goaS5kYXRhLCBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9ICt0LmdldFJpZ2h0VmFsdWUoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlzTmFOKGkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgby5kYXRhW2FdLmhpZGRlbiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09PSB0Lm1pblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAodC5taW4gPSBpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpIDwgdC5taW4gJiYgKHQubWluID0gaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA9PT0gdC5tYXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKHQubWF4ID0gaSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaSA+IHQubWF4ICYmICh0Lm1heCA9IGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHQuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VGlja0xpbWl0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMub3B0aW9ucy50aWNrcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGUuZ2V0VmFsdWVPckRlZmF1bHQodC5mb250U2l6ZSwgYS5kZWZhdWx0Rm9udFNpemUpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKFxuICAgICAgICAgICAgICAgICAgICB0Lm1heFRpY2tzTGltaXQgPyB0Lm1heFRpY2tzTGltaXQgOiAxMSxcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5jZWlsKHRoaXMuZHJhd2luZ0FyZWEgLyAoMS41ICogaSkpXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIHQuTGluZWFyU2NhbGVCYXNlLnByb3RvdHlwZS5jb252ZXJ0VGlja3NUb0xhYmVscy5jYWxsKGUpLFxuICAgICAgICAgICAgICAgICAgICAoZS5wb2ludExhYmVscyA9IGUuY2hhcnQuZGF0YS5sYWJlbHMubWFwKFxuICAgICAgICAgICAgICAgICAgICAgIGUub3B0aW9ucy5wb2ludExhYmVscy5jYWxsYmFjayxcbiAgICAgICAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiArdGhpcy5nZXRSaWdodFZhbHVlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZV0uZGF0YVt0XVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZpdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgICAgIGwsXG4gICAgICAgICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgICAgICAgIHUsXG4gICAgICAgICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICAgIGYsXG4gICAgICAgICAgICAgICAgICAgIGcgPSB0aGlzLm9wdGlvbnMucG9pbnRMYWJlbHMsXG4gICAgICAgICAgICAgICAgICAgIHAgPSBlLmdldFZhbHVlT3JEZWZhdWx0KGcuZm9udFNpemUsIGEuZGVmYXVsdEZvbnRTaXplKSxcbiAgICAgICAgICAgICAgICAgICAgbSA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoZy5mb250U3R5bGUsIGEuZGVmYXVsdEZvbnRTdHlsZSksXG4gICAgICAgICAgICAgICAgICAgIGIgPSBlLmdldFZhbHVlT3JEZWZhdWx0KGcuZm9udEZhbWlseSwgYS5kZWZhdWx0Rm9udEZhbWlseSksXG4gICAgICAgICAgICAgICAgICAgIHYgPSBlLmZvbnRTdHJpbmcocCwgbSwgYiksXG4gICAgICAgICAgICAgICAgICAgIHggPSBlLm1pbihbdGhpcy5oZWlnaHQgLyAyIC0gcCAtIDUsIHRoaXMud2lkdGggLyAyXSksXG4gICAgICAgICAgICAgICAgICAgIHkgPSB0aGlzLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBrID0gMDtcbiAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LmZvbnQgPSB2LCBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaSA8IHRoaXMuZ2V0VmFsdWVDb3VudCgpO1xuICAgICAgICAgICAgICAgICAgICBpKytcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAodCA9IHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpLCB4KSksXG4gICAgICAgICAgICAgICAgICAgICAgKG4gPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHgubWVhc3VyZVRleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRMYWJlbHNbaV0gPyB0aGlzLnBvaW50TGFiZWxzW2ldIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKS53aWR0aCArIDUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgUyA9IHRoaXMuZ2V0SW5kZXhBbmdsZShpKSArIE1hdGguUEkgLyAyLFxuICAgICAgICAgICAgICAgICAgICAgIHcgPSAoKDM2MCAqIFMpIC8gKDIgKiBNYXRoLlBJKSkgJSAzNjA7XG4gICAgICAgICAgICAgICAgICAgIDAgPT09IHcgfHwgMTgwID09PSB3XG4gICAgICAgICAgICAgICAgICAgICAgPyAoKG8gPSBuIC8gMiksXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnggKyBvID4geSAmJiAoKHkgPSB0LnggKyBvKSwgKHIgPSBpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnggLSBvIDwgayAmJiAoKGsgPSB0LnggLSBvKSwgKHMgPSBpKSkpXG4gICAgICAgICAgICAgICAgICAgICAgOiAxODAgPiB3XG4gICAgICAgICAgICAgICAgICAgICAgPyB0LnggKyBuID4geSAmJiAoKHkgPSB0LnggKyBuKSwgKHIgPSBpKSlcbiAgICAgICAgICAgICAgICAgICAgICA6IHQueCAtIG4gPCBrICYmICgoayA9IHQueCAtIG4pLCAocyA9IGkpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICh1ID0gayksXG4gICAgICAgICAgICAgICAgICAgIChjID0gTWF0aC5jZWlsKHkgLSB0aGlzLndpZHRoKSksXG4gICAgICAgICAgICAgICAgICAgIChsID0gdGhpcy5nZXRJbmRleEFuZ2xlKHIpKSxcbiAgICAgICAgICAgICAgICAgICAgKGQgPSB0aGlzLmdldEluZGV4QW5nbGUocykpLFxuICAgICAgICAgICAgICAgICAgICAoaCA9IGMgLyBNYXRoLnNpbihsICsgTWF0aC5QSSAvIDIpKSxcbiAgICAgICAgICAgICAgICAgICAgKGYgPSB1IC8gTWF0aC5zaW4oZCArIE1hdGguUEkgLyAyKSksXG4gICAgICAgICAgICAgICAgICAgIChoID0gZS5pc051bWJlcihoKSA/IGggOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgKGYgPSBlLmlzTnVtYmVyKGYpID8gZiA6IDApLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5kcmF3aW5nQXJlYSA9IE1hdGgucm91bmQoeCAtIChmICsgaCkgLyAyKSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2VudGVyUG9pbnQoZiwgaCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXRDZW50ZXJQb2ludDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEud2lkdGggLSBlIC0gYS5kcmF3aW5nQXJlYSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHQgKyBhLmRyYXdpbmdBcmVhO1xuICAgICAgICAgICAgICAgICAgKGEueENlbnRlciA9IE1hdGgucm91bmQoKG4gKyBpKSAvIDIgKyBhLmxlZnQpKSxcbiAgICAgICAgICAgICAgICAgICAgKGEueUNlbnRlciA9IE1hdGgucm91bmQoYS5oZWlnaHQgLyAyICsgYS50b3ApKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldEluZGV4QW5nbGU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9ICgyICogTWF0aC5QSSkgLyB0aGlzLmdldFZhbHVlQ291bnQoKSxcbiAgICAgICAgICAgICAgICAgICAgYSA9XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydC5vcHRpb25zICYmIHRoaXMuY2hhcnQub3B0aW9ucy5zdGFydEFuZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuY2hhcnQub3B0aW9ucy5zdGFydEFuZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgICAgICAgICAgICAgIGkgPSAoYSAqIE1hdGguUEkgKiAyKSAvIDM2MDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0ICogZSAtIE1hdGguUEkgLyAyICsgaTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IHQpIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLmRyYXdpbmdBcmVhIC8gKGUubWF4IC0gZS5taW4pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGUub3B0aW9ucy5yZXZlcnNlID8gKGUubWF4IC0gdCkgKiBhIDogKHQgLSBlLm1pbikgKiBhO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0UG9pbnRQb3NpdGlvbjogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuZ2V0SW5kZXhBbmdsZSh0KTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHg6IE1hdGgucm91bmQoTWF0aC5jb3MoaSkgKiBlKSArIGEueENlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgeTogTWF0aC5yb3VuZChNYXRoLnNpbihpKSAqIGUpICsgYS55Q2VudGVyLFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgIHQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUoZSlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRCYXNlUG9zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgZSA9IHQubWluLFxuICAgICAgICAgICAgICAgICAgICBhID0gdC5tYXg7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdC5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIHQuYmVnaW5BdFplcm9cbiAgICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgICA6IDAgPiBlICYmIDAgPiBhXG4gICAgICAgICAgICAgICAgICAgICAgPyBhXG4gICAgICAgICAgICAgICAgICAgICAgOiBlID4gMCAmJiBhID4gMFxuICAgICAgICAgICAgICAgICAgICAgID8gZVxuICAgICAgICAgICAgICAgICAgICAgIDogMFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkuZ3JpZExpbmVzLFxuICAgICAgICAgICAgICAgICAgICBvID0gaS50aWNrcyxcbiAgICAgICAgICAgICAgICAgICAgciA9IGkuYW5nbGVMaW5lcyxcbiAgICAgICAgICAgICAgICAgICAgbCA9IGkucG9pbnRMYWJlbHMsXG4gICAgICAgICAgICAgICAgICAgIHMgPSBlLmdldFZhbHVlT3JEZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgaWYgKGkuZGlzcGxheSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IHQuY3R4LFxuICAgICAgICAgICAgICAgICAgICAgIHUgPSBzKG8uZm9udFNpemUsIGEuZGVmYXVsdEZvbnRTaXplKSxcbiAgICAgICAgICAgICAgICAgICAgICBjID0gcyhvLmZvbnRTdHlsZSwgYS5kZWZhdWx0Rm9udFN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICBoID0gcyhvLmZvbnRGYW1pbHksIGEuZGVmYXVsdEZvbnRGYW1pbHkpLFxuICAgICAgICAgICAgICAgICAgICAgIGYgPSBlLmZvbnRTdHJpbmcodSwgYywgaCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAoZS5lYWNoKHQudGlja3MsIGZ1bmN0aW9uIChyLCBsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobCA+IDAgfHwgaS5yZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gdC5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQudGlja3NBc051bWJlcnNbbF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSB0LnlDZW50ZXIgLSBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobi5kaXNwbGF5ICYmIDAgIT09IGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChkLnN0cm9rZVN0eWxlID0gZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkLmxpbmVXaWR0aCA9IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmxpbmVXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5saW5lQXJjKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuYmVnaW5QYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuYXJjKHQueENlbnRlciwgdC55Q2VudGVyLCBjLCAwLCAyICogTWF0aC5QSSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuY2xvc2VQYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZyA9IDA7IGcgPCB0LmdldFZhbHVlQ291bnQoKTsgZysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gdC5nZXRQb2ludFBvc2l0aW9uKGcsIGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwID09PSBnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBkLm1vdmVUbyhwLngsIHAueSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQubGluZVRvKHAueCwgcC55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuY2xvc2VQYXRoKCksIGQuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoby5kaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBzKG8uZm9udENvbG9yLCBhLmRlZmF1bHRGb250Q29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoKGQuZm9udCA9IGYpLCBvLnNob3dMYWJlbEJhY2tkcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBkLm1lYXN1cmVUZXh0KHIpLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQuZmlsbFN0eWxlID0gby5iYWNrZHJvcENvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5maWxsUmVjdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnhDZW50ZXIgLSBiIC8gMiAtIG8uYmFja2Ryb3BQYWRkaW5nWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoIC0gdSAvIDIgLSBvLmJhY2tkcm9wUGFkZGluZ1ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiArIDIgKiBvLmJhY2tkcm9wUGFkZGluZ1gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSArIDIgKiBvLmJhY2tkcm9wUGFkZGluZ1lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQudGV4dEFsaWduID0gXCJjZW50ZXJcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZC50ZXh0QmFzZWxpbmUgPSBcIm1pZGRsZVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkLmZpbGxTdHlsZSA9IG0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5maWxsVGV4dChyLCB0LnhDZW50ZXIsIGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgIWkubGluZUFyYylcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgKGQubGluZVdpZHRoID0gci5saW5lV2lkdGgpLCAoZC5zdHJva2VTdHlsZSA9IHIuY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IHQuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5yZXZlcnNlID8gdC5taW4gOiB0Lm1heFxuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gcyhsLmZvbnRTaXplLCBhLmRlZmF1bHRGb250U2l6ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBzKGwuZm9udFN0eWxlLCBhLmRlZmF1bHRGb250U3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gcyhsLmZvbnRGYW1pbHksIGEuZGVmYXVsdEZvbnRGYW1pbHkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gZS5mb250U3RyaW5nKHAsIG0sIGIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gdC5nZXRWYWx1ZUNvdW50KCkgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgeC0tXG4gICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoci5kaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ID0gdC5nZXRQb2ludFBvc2l0aW9uKHgsIGcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkLmJlZ2luUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubW92ZVRvKHQueENlbnRlciwgdC55Q2VudGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmxpbmVUbyh5LngsIHkueSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5zdHJva2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGsgPSB0LmdldFBvaW50UG9zaXRpb24oeCwgZyArIDUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBTID0gcyhsLmZvbnRDb2xvciwgYS5kZWZhdWx0Rm9udENvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChkLmZvbnQgPSB2KSwgKGQuZmlsbFN0eWxlID0gUyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdyA9IHQucG9pbnRMYWJlbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIE0gPSB0aGlzLmdldEluZGV4QW5nbGUoeCkgKyBNYXRoLlBJIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgQyA9ICgoMzYwICogTSkgLyAoMiAqIE1hdGguUEkpKSAlIDM2MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIDAgPT09IEMgfHwgMTgwID09PSBDXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gKGQudGV4dEFsaWduID0gXCJjZW50ZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxODAgPiBDXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gKGQudGV4dEFsaWduID0gXCJsZWZ0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogKGQudGV4dEFsaWduID0gXCJyaWdodFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOTAgPT09IEMgfHwgMjcwID09PSBDXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoZC50ZXh0QmFzZWxpbmUgPSBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogQyA+IDI3MCB8fCA5MCA+IENcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChkLnRleHRCYXNlbGluZSA9IFwiYm90dG9tXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoZC50ZXh0QmFzZWxpbmUgPSBcInRvcFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZC5maWxsVGV4dCh3W3hdID8gd1t4XSA6IFwiXCIsIGsueCwgay55KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHQuc2NhbGVTZXJ2aWNlLnJlZ2lzdGVyU2NhbGVUeXBlKFwicmFkaWFsTGluZWFyXCIsIG4sIGkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDQ2OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgdmFyIGkgPSB0KDEpO1xuICAgICAgICAgIChpID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBpID8gaSA6IHdpbmRvdy5tb21lbnQpLFxuICAgICAgICAgICAgKGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzLFxuICAgICAgICAgICAgICAgIGEgPSB7XG4gICAgICAgICAgICAgICAgICB1bml0czogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtaWxsaXNlY29uZFwiLFxuICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzOiBbMSwgMiwgNSwgMTAsIDIwLCA1MCwgMTAwLCAyNTAsIDUwMF0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJzZWNvbmRcIiwgc3RlcHM6IFsxLCAyLCA1LCAxMCwgMzBdIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJtaW51dGVcIiwgc3RlcHM6IFsxLCAyLCA1LCAxMCwgMzBdIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJob3VyXCIsIHN0ZXBzOiBbMSwgMiwgMywgNiwgMTJdIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJkYXlcIiwgc3RlcHM6IFsxLCAyLCA1XSB9LFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFwid2Vla1wiLCBtYXhTdGVwOiA0IH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJtb250aFwiLCBtYXhTdGVwOiAzIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJxdWFydGVyXCIsIG1heFN0ZXA6IDQgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBcInllYXJcIiwgbWF4U3RlcDogITEgfSxcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBuID0ge1xuICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYm90dG9tXCIsXG4gICAgICAgICAgICAgICAgICB0aW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlcjogITEsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogITEsXG4gICAgICAgICAgICAgICAgICAgIHVuaXQ6ICExLFxuICAgICAgICAgICAgICAgICAgICByb3VuZDogITEsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlGb3JtYXQ6ICExLFxuICAgICAgICAgICAgICAgICAgICBpc29XZWVrZGF5OiAhMSxcbiAgICAgICAgICAgICAgICAgICAgbWluVW5pdDogXCJtaWxsaXNlY29uZFwiLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5Rm9ybWF0czoge1xuICAgICAgICAgICAgICAgICAgICAgIG1pbGxpc2Vjb25kOiBcImg6bW06c3MuU1NTIGFcIixcbiAgICAgICAgICAgICAgICAgICAgICBzZWNvbmQ6IFwiaDptbTpzcyBhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgbWludXRlOiBcImg6bW06c3MgYVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGhvdXI6IFwiTU1NIEQsIGhBXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZGF5OiBcImxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgd2VlazogXCJsbFwiLFxuICAgICAgICAgICAgICAgICAgICAgIG1vbnRoOiBcIk1NTSBZWVlZXCIsXG4gICAgICAgICAgICAgICAgICAgICAgcXVhcnRlcjogXCJbUV1RIC0gWVlZWVwiLFxuICAgICAgICAgICAgICAgICAgICAgIHllYXI6IFwiWVlZWVwiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHRpY2tzOiB7IGF1dG9Ta2lwOiAhMSB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbyA9IHQuU2NhbGUuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpKVxuICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2hhcnQuanMgLSBNb21lbnQuanMgY291bGQgbm90IGJlIGZvdW5kISBZb3UgbXVzdCBpbmNsdWRlIGl0IGJlZm9yZSBDaGFydC5qcyB0byB1c2UgdGhlIHRpbWUgc2NhbGUuIERvd25sb2FkIGF0IGh0dHBzOi8vbW9tZW50anMuY29tXCJcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB0LlNjYWxlLnByb3RvdHlwZS5pbml0aWFsaXplLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ2V0TGFiZWxNb21lbnQ6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09PSB0IHx8IG51bGwgPT09IGVcbiAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHRoaXMubGFiZWxNb21lbnRzW3RdXG4gICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmxhYmVsTW9tZW50c1t0XVtlXVxuICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBnZXRMYWJlbERpZmY6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IHQgfHwgbnVsbCA9PT0gZVxuICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgIDogKHZvaWQgMCA9PT0gYS5sYWJlbERpZmZzICYmIGEuYnVpbGRMYWJlbERpZmZzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBhLmxhYmVsRGlmZnNbdF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhLmxhYmVsRGlmZnNbdF1bZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBnZXRNb21lbnRTdGFydE9mOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIndlZWtcIiA9PT0gZS5vcHRpb25zLnRpbWUudW5pdCAmJlxuICAgICAgICAgICAgICAgICAgICAgIGUub3B0aW9ucy50aW1lLmlzb1dlZWtkYXkgIT09ICExXG4gICAgICAgICAgICAgICAgICAgICAgPyB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9uZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5zdGFydE9mKFwiaXNvV2Vla1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuaXNvV2Vla2RheShlLm9wdGlvbnMudGltZS5pc29XZWVrZGF5KVxuICAgICAgICAgICAgICAgICAgICAgIDogdC5jbG9uZSgpLnN0YXJ0T2YoZS50aWNrVW5pdCk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lRGF0YUxpbWl0czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHQubGFiZWxNb21lbnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gW107XG4gICAgICAgICAgICAgICAgICAgIHQuY2hhcnQuZGF0YS5sYWJlbHMgJiYgdC5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgICAgICAgPyAoZS5lYWNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0LmNoYXJ0LmRhdGEubGFiZWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gdC5wYXJzZVRpbWUoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0Lm9wdGlvbnMudGltZS5yb3VuZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnN0YXJ0T2YodC5vcHRpb25zLnRpbWUucm91bmQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5wdXNoKGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0LmZpcnN0VGljayA9IGkubWluLmNhbGwodCwgYSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHQubGFzdFRpY2sgPSBpLm1heC5jYWxsKHQsIGEpKSlcbiAgICAgICAgICAgICAgICAgICAgICA6ICgodC5maXJzdFRpY2sgPSBudWxsKSwgKHQubGFzdFRpY2sgPSBudWxsKSksXG4gICAgICAgICAgICAgICAgICAgICAgZS5lYWNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGFydC5kYXRhLmRhdGFzZXRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKG4sIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdC5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9iamVjdFwiID09IHR5cGVvZiBuLmRhdGFbMF0gJiYgbnVsbCAhPT0gbi5kYXRhWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlLmVhY2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHQucGFyc2VUaW1lKHQuZ2V0UmlnaHRWYWx1ZShlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0Lm9wdGlvbnMudGltZS5yb3VuZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnN0YXJ0T2YodC5vcHRpb25zLnRpbWUucm91bmQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5wdXNoKGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHQuZmlyc3RUaWNrID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9PSB0LmZpcnN0VGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLm1pbih0LmZpcnN0VGljaywgYSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0Lmxhc3RUaWNrID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9PSB0Lmxhc3RUaWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGkubWF4KHQubGFzdFRpY2ssIGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGEpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChyID0gYSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5sYWJlbE1vbWVudHMucHVzaChyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICB0Lm9wdGlvbnMudGltZS5taW4gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh0LmZpcnN0VGljayA9IHQucGFyc2VUaW1lKHQub3B0aW9ucy50aW1lLm1pbikpLFxuICAgICAgICAgICAgICAgICAgICAgIHQub3B0aW9ucy50aW1lLm1heCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHQubGFzdFRpY2sgPSB0LnBhcnNlVGltZSh0Lm9wdGlvbnMudGltZS5tYXgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC5maXJzdFRpY2sgPSAodC5maXJzdFRpY2sgfHwgaSgpKS5jbG9uZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC5sYXN0VGljayA9ICh0Lmxhc3RUaWNrIHx8IGkoKSkuY2xvbmUoKSk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgYnVpbGRMYWJlbERpZmZzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdC5sYWJlbERpZmZzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gW107XG4gICAgICAgICAgICAgICAgICAgIHQuY2hhcnQuZGF0YS5sYWJlbHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICB0LmNoYXJ0LmRhdGEubGFiZWxzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICBlLmVhY2goXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmNoYXJ0LmRhdGEubGFiZWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0LnBhcnNlVGltZShlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaS5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodC5vcHRpb25zLnRpbWUucm91bmQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc3RhcnRPZih0Lm9wdGlvbnMudGltZS5yb3VuZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5wdXNoKGkuZGlmZih0LmZpcnN0VGljaywgdC50aWNrVW5pdCwgITApKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgZS5lYWNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGFydC5kYXRhLmRhdGFzZXRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PSB0eXBlb2YgaS5kYXRhWzBdICYmIG51bGwgIT09IGkuZGF0YVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZS5lYWNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0LnBhcnNlVGltZSh0LmdldFJpZ2h0VmFsdWUoZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodC5vcHRpb25zLnRpbWUucm91bmQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zdGFydE9mKHQub3B0aW9ucy50aW1lLnJvdW5kKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5kaWZmKHQuZmlyc3RUaWNrLCB0LnRpY2tVbml0LCAhMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAobiA9IGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubGFiZWxEaWZmcy5wdXNoKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGJ1aWxkVGlja3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBpLmN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGkub3B0aW9ucy50aWNrcy5mb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250U2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgbyA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMudGlja3MuZm9udFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5kZWZhdWx0cy5nbG9iYWwuZGVmYXVsdEZvbnRTdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgciA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMudGlja3MuZm9udEZhbWlseSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250RmFtaWx5XG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBsID0gZS5mb250U3RyaW5nKG4sIG8sIHIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgKChpLmN0eC5mb250ID0gbCksXG4gICAgICAgICAgICAgICAgICAgICAgKGkudGlja3MgPSBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgKGkudW5pdFNjYWxlID0gMSksXG4gICAgICAgICAgICAgICAgICAgICAgKGkuc2NhbGVTaXplSW5Vbml0cyA9IDApLFxuICAgICAgICAgICAgICAgICAgICAgIGkub3B0aW9ucy50aW1lLnVuaXQpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAoaS50aWNrVW5pdCA9IGkub3B0aW9ucy50aW1lLnVuaXQgfHwgXCJkYXlcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAoaS5kaXNwbGF5Rm9ybWF0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHNbaS50aWNrVW5pdF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGkuc2NhbGVTaXplSW5Vbml0cyA9IGkubGFzdFRpY2suZGlmZihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaS5maXJzdFRpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkudGlja1VuaXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChpLnVuaXRTY2FsZSA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkub3B0aW9ucy50aW1lLnVuaXRTdGVwU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gaS5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IGkud2lkdGggLSAoaS5wYWRkaW5nTGVmdCArIGkucGFkZGluZ1JpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGkuaGVpZ2h0IC0gKGkucGFkZGluZ1RvcCArIGkucGFkZGluZ0JvdHRvbSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gaS50aWNrRm9ybWF0RnVuY3Rpb24oaS5maXJzdFRpY2ssIDAsIFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBpLmN0eC5tZWFzdXJlVGV4dChkKS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBNYXRoLmNvcyhlLnRvUmFkaWFucyhpLm9wdGlvbnMudGlja3MubWF4Um90YXRpb24pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGggPSBNYXRoLnNpbihlLnRvUmFkaWFucyhpLm9wdGlvbnMudGlja3MubWF4Um90YXRpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICB1ID0gdSAqIGMgKyBuICogaDtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IHMgLyB1O1xuICAgICAgICAgICAgICAgICAgICAgIChpLnRpY2tVbml0ID0gaS5vcHRpb25zLnRpbWUubWluVW5pdCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoaS5zY2FsZVNpemVJblVuaXRzID0gaS5sYXN0VGljay5kaWZmKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpLmZpcnN0VGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaS50aWNrVW5pdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgITBcbiAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGkuZGlzcGxheUZvcm1hdCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkub3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXRzW2kudGlja1VuaXRdKTtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBnID0gMCwgcCA9IGEudW5pdHNbZ107IGcgPCBhLnVuaXRzLmxlbmd0aDsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoaS51bml0U2NhbGUgPSAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZS5pc0FycmF5KHAuc3RlcHMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jZWlsKGkuc2NhbGVTaXplSW5Vbml0cyAvIGYpIDwgZS5tYXgocC5zdGVwcykpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbSA9IDA7IG0gPCBwLnN0ZXBzLmxlbmd0aDsgKyttKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuc3RlcHNbbV0gPj0gTWF0aC5jZWlsKGkuc2NhbGVTaXplSW5Vbml0cyAvIGYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnVuaXRTY2FsZSA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkub3B0aW9ucy50aW1lLnVuaXRTdGVwU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5zdGVwc1ttXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHAubWF4U3RlcCA9PT0gITEgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jZWlsKGkuc2NhbGVTaXplSW5Vbml0cyAvIGYpIDwgcC5tYXhTdGVwXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaS51bml0U2NhbGUgPSBlLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkub3B0aW9ucy50aW1lLnVuaXRTdGVwU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmNlaWwoaS5zY2FsZVNpemVJblVuaXRzIC8gZilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICArK2csIChwID0gYS51bml0c1tnXSksIChpLnRpY2tVbml0ID0gcC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gaS5maXJzdFRpY2suZGlmZihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmdldE1vbWVudFN0YXJ0T2YoaS5maXJzdFRpY2spLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkudGlja1VuaXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgITBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9IGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0TW9tZW50U3RhcnRPZihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkubGFzdFRpY2suY2xvbmUoKS5hZGQoMSwgaS50aWNrVW5pdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRpZmYoaS5sYXN0VGljaywgaS50aWNrVW5pdCwgITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgKGkuc2NhbGVTaXplSW5Vbml0cyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkubGFzdFRpY2suZGlmZihpLmZpcnN0VGljaywgaS50aWNrVW5pdCwgITApICsgYiArIHYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5kaXNwbGF5Rm9ybWF0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMudGltZS5kaXNwbGF5Rm9ybWF0c1twLm5hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAoaS5vcHRpb25zLnRpbWUubWluXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICh4ID0gaS5nZXRNb21lbnRTdGFydE9mKGkuZmlyc3RUaWNrKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKChpLmZpcnN0VGljayA9IGkuZ2V0TW9tZW50U3RhcnRPZihpLmZpcnN0VGljaykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoeCA9IGkuZmlyc3RUaWNrKSksXG4gICAgICAgICAgICAgICAgICAgICAgIWkub3B0aW9ucy50aW1lLm1heClcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBpLmdldE1vbWVudFN0YXJ0T2YoaS5sYXN0VGljayksXG4gICAgICAgICAgICAgICAgICAgICAgICBrID0geS5kaWZmKGkubGFzdFRpY2ssIGkudGlja1VuaXQsICEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAwID4ga1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAoaS5sYXN0VGljayA9IGkuZ2V0TW9tZW50U3RhcnRPZihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmxhc3RUaWNrLmFkZCgxLCBpLnRpY2tVbml0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBrID49IDAgJiYgKGkubGFzdFRpY2sgPSB5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChpLnNjYWxlU2l6ZUluVW5pdHMgPSBpLmxhc3RUaWNrLmRpZmYoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkuZmlyc3RUaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpLnRpY2tVbml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaS5vcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdCAmJlxuICAgICAgICAgICAgICAgICAgICAgIChpLmRpc3BsYXlGb3JtYXQgPSBpLm9wdGlvbnMudGltZS5kaXNwbGF5Rm9ybWF0KSxcbiAgICAgICAgICAgICAgICAgICAgICBpLnRpY2tzLnB1c2goaS5maXJzdFRpY2suY2xvbmUoKSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIFMgPSAxOyBTIDw9IGkuc2NhbGVTaXplSW5Vbml0czsgKytTKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSB4LmNsb25lKCkuYWRkKFMsIGkudGlja1VuaXQpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGkub3B0aW9ucy50aW1lLm1heCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdy5kaWZmKGkubGFzdFRpY2ssIGkudGlja1VuaXQsICEwKSA+PSAwXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgUyAlIGkudW5pdFNjYWxlID09PSAwICYmIGkudGlja3MucHVzaCh3KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgTSA9IGkudGlja3NbaS50aWNrcy5sZW5ndGggLSAxXS5kaWZmKFxuICAgICAgICAgICAgICAgICAgICAgIGkubGFzdFRpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgaS50aWNrVW5pdFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAoMCAhPT0gTSB8fCAwID09PSBpLnNjYWxlU2l6ZUluVW5pdHMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgKGkub3B0aW9ucy50aW1lLm1heFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoaS50aWNrcy5wdXNoKGkubGFzdFRpY2suY2xvbmUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChpLnNjYWxlU2l6ZUluVW5pdHMgPSBpLmxhc3RUaWNrLmRpZmYoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS50aWNrc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnRpY2tVbml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoaS50aWNrcy5wdXNoKGkubGFzdFRpY2suY2xvbmUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChpLnNjYWxlU2l6ZUluVW5pdHMgPSBpLmxhc3RUaWNrLmRpZmYoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5maXJzdFRpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS50aWNrVW5pdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICAgICAgICAgICAgICApKSkpLFxuICAgICAgICAgICAgICAgICAgICAgIGkuY3R4LnJlc3RvcmUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAoaS5sYWJlbERpZmZzID0gdm9pZCAwKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBnZXRMYWJlbEZvckluZGV4OiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgaSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmNoYXJ0LmRhdGEubGFiZWxzICYmIHQgPCBhLmNoYXJ0LmRhdGEubGFiZWxzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IGEuY2hhcnQuZGF0YS5sYWJlbHNbdF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIGEuY2hhcnQuZGF0YS5kYXRhc2V0c1tlXS5kYXRhWzBdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoaSA9IGEuZ2V0UmlnaHRWYWx1ZShhLmNoYXJ0LmRhdGEuZGF0YXNldHNbZV0uZGF0YVt0XSkpLFxuICAgICAgICAgICAgICAgICAgICAgIGEub3B0aW9ucy50aW1lLnRvb2x0aXBGb3JtYXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChpID0gYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAucGFyc2VUaW1lKGkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JtYXQoYS5vcHRpb25zLnRpbWUudG9vbHRpcEZvcm1hdCkpLFxuICAgICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB0aWNrRm9ybWF0RnVuY3Rpb246IGZ1bmN0aW9uICh0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gdC5mb3JtYXQodGhpcy5kaXNwbGF5Rm9ybWF0KSxcbiAgICAgICAgICAgICAgICAgICAgICBvID0gdGhpcy5vcHRpb25zLnRpY2tzLFxuICAgICAgICAgICAgICAgICAgICAgIHIgPSBlLmdldFZhbHVlT3JEZWZhdWx0KG8uY2FsbGJhY2ssIG8udXNlckNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgPyByKG4sIGEsIGkpIDogbjtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBjb252ZXJ0VGlja3NUb0xhYmVsczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICh0LnRpY2tNb21lbnRzID0gdC50aWNrcyksXG4gICAgICAgICAgICAgICAgICAgICAgKHQudGlja3MgPSB0LnRpY2tzLm1hcCh0LnRpY2tGb3JtYXRGdW5jdGlvbiwgdCkpO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGdldFBpeGVsRm9yVmFsdWU6IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICBuID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICh2b2lkIDAgIT09IGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gYSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKG4gPSBpLmdldExhYmVsRGlmZihhLCBlKSksXG4gICAgICAgICAgICAgICAgICAgICAgbnVsbCA9PT0gbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCh0ICYmIHQuaXNWYWxpZCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHQgPSBpLnBhcnNlVGltZShpLmdldFJpZ2h0VmFsdWUodCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdC5pc1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChuID0gdC5kaWZmKGkuZmlyc3RUaWNrLCBpLnRpY2tVbml0LCAhMCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICBudWxsICE9PSBuKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IDAgIT09IG4gPyBuIC8gaS5zY2FsZVNpemVJblVuaXRzIDogbjtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaS5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBpLndpZHRoIC0gKGkucGFkZGluZ0xlZnQgKyBpLnBhZGRpbmdSaWdodCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSByICogbyArIGkucGFkZGluZ0xlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS5sZWZ0ICsgTWF0aC5yb3VuZChsKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBpLmhlaWdodCAtIChpLnBhZGRpbmdUb3AgKyBpLnBhZGRpbmdCb3R0b20pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IHMgKiBvICsgaS5wYWRkaW5nVG9wO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLnRvcCArIE1hdGgucm91bmQoZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBnZXRQaXhlbEZvclRpY2s6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy50aWNrTW9tZW50c1t0XSxcbiAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBnZXRWYWx1ZUZvclBpeGVsOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgYSA9IGUuaXNIb3Jpem9udGFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZS53aWR0aCAtIChlLnBhZGRpbmdMZWZ0ICsgZS5wYWRkaW5nUmlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGUuaGVpZ2h0IC0gKGUucGFkZGluZ1RvcCArIGUucGFkZGluZ0JvdHRvbSksXG4gICAgICAgICAgICAgICAgICAgICAgbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICAodCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChlLmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlLmxlZnQgKyBlLnBhZGRpbmdMZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlLnRvcCArIGUucGFkZGluZ1RvcCkpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgIGE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgKG4gKj0gZS5zY2FsZVNpemVJblVuaXRzKSxcbiAgICAgICAgICAgICAgICAgICAgICBlLmZpcnN0VGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgLmNsb25lKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGQoaS5kdXJhdGlvbihuLCBlLnRpY2tVbml0KS5hc1NlY29uZHMoKSwgXCJzZWNvbmRzXCIpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgcGFyc2VUaW1lOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiBlLm9wdGlvbnMudGltZS5wYXJzZXJcbiAgICAgICAgICAgICAgICAgICAgICA/IGkodCwgZS5vcHRpb25zLnRpbWUucGFyc2VyKVxuICAgICAgICAgICAgICAgICAgICAgIDogXCJmdW5jdGlvblwiID09IHR5cGVvZiBlLm9wdGlvbnMudGltZS5wYXJzZXJcbiAgICAgICAgICAgICAgICAgICAgICA/IGUub3B0aW9ucy50aW1lLnBhcnNlcih0KVxuICAgICAgICAgICAgICAgICAgICAgIDogXCJmdW5jdGlvblwiID09IHR5cGVvZiB0LmdldE1vbnRoIHx8IFwibnVtYmVyXCIgPT0gdHlwZW9mIHRcbiAgICAgICAgICAgICAgICAgICAgICA/IGkodClcbiAgICAgICAgICAgICAgICAgICAgICA6IHQuaXNWYWxpZCAmJiB0LmlzVmFsaWQoKVxuICAgICAgICAgICAgICAgICAgICAgID8gdFxuICAgICAgICAgICAgICAgICAgICAgIDogXCJzdHJpbmdcIiAhPSB0eXBlb2YgZS5vcHRpb25zLnRpbWUuZm9ybWF0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBlLm9wdGlvbnMudGltZS5mb3JtYXQuY2FsbFxuICAgICAgICAgICAgICAgICAgICAgID8gKGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcHRpb25zLnRpbWUuZm9ybWF0IGlzIGRlcHJlY2F0ZWQgYW5kIHJlcGxhY2VkIGJ5IG9wdGlvbnMudGltZS5wYXJzZXIuIFNlZSBodHRwOi8vbm5uaWNrLmdpdGh1Yi5pby9DaGFydC5qcy9kb2NzLXYyLyNzY2FsZXMtdGltZS1zY2FsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5vcHRpb25zLnRpbWUuZm9ybWF0KHQpKVxuICAgICAgICAgICAgICAgICAgICAgIDogaSh0LCBlLm9wdGlvbnMudGltZS5mb3JtYXQpO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdC5zY2FsZVNlcnZpY2UucmVnaXN0ZXJTY2FsZVR5cGUoXCJ0aW1lXCIsIG8sIG4pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHsgMTogMSB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIHt9LFxuICAgIFs3XVxuICApKDcpO1xufSk7XG4iXSwibmFtZXMiOlsidCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJlIiwid2luZG93IiwiZ2xvYmFsIiwic2VsZiIsIkNoYXJ0IiwiYSIsImkiLCJuIiwiciIsImwiLCJzIiwicmVxdWlyZSIsIm8iLCJkIiwiRXJyb3IiLCJjb2RlIiwidSIsImNhbGwiLCJsZW5ndGgiLCJtYXRjaCIsInBhcnNlSW50Iiwic2xpY2UiLCJwYXJzZUZsb2F0IiwiTWF0aCIsInJvdW5kIiwieSIsInYiLCJpc05hTiIsIngiLCJjIiwiaCIsImYiLCJnIiwicCIsIm0iLCJiIiwiayIsIm1pbiIsIm1heCIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJnZXRSZ2JhIiwiZ2V0SHNsYSIsImdldFJnYiIsImdldEhzbCIsImdldEh3YiIsImdldEFscGhhIiwiaGV4U3RyaW5nIiwicmdiU3RyaW5nIiwicmdiYVN0cmluZyIsInBlcmNlbnRTdHJpbmciLCJwZXJjZW50YVN0cmluZyIsImhzbFN0cmluZyIsImhzbGFTdHJpbmciLCJod2JTdHJpbmciLCJrZXl3b3JkIiwiUyIsInZhbHVlcyIsInJnYiIsImhzbCIsImhzdiIsImh3YiIsImNteWsiLCJhbHBoYSIsInNldFZhbHVlcyIsInJlZCIsImxpZ2h0bmVzcyIsInZhbHVlIiwidyIsIndoaXRlbmVzcyIsImN5YW4iLCJKU09OIiwic3RyaW5naWZ5IiwicHJvdG90eXBlIiwic2V0U3BhY2UiLCJhcmd1bWVudHMiLCJyZ2JBcnJheSIsImhzbEFycmF5IiwiaHN2QXJyYXkiLCJod2JBcnJheSIsImNvbmNhdCIsImNteWtBcnJheSIsInJnYmFBcnJheSIsImhzbGFBcnJheSIsInNldENoYW5uZWwiLCJncmVlbiIsImJsdWUiLCJodWUiLCJzYXR1cmF0aW9uIiwic2F0dXJhdGlvbnYiLCJibGFja25lc3MiLCJtYWdlbnRhIiwieWVsbG93IiwiYmxhY2siLCJyZ2JOdW1iZXIiLCJsdW1pbm9zaXR5IiwicG93IiwiY29udHJhc3QiLCJsZXZlbCIsImRhcmsiLCJsaWdodCIsIm5lZ2F0ZSIsImxpZ2h0ZW4iLCJkYXJrZW4iLCJzYXR1cmF0ZSIsImRlc2F0dXJhdGUiLCJ3aGl0ZW4iLCJibGFja2VuIiwiZ3JleXNjYWxlIiwiY2xlYXJlciIsIm9wYXF1ZXIiLCJyb3RhdGUiLCJtaXgiLCJ0b0pTT04iLCJjbG9uZSIsImhhc093blByb3BlcnR5IiwiY29uc29sZSIsImVycm9yIiwic3BhY2VzIiwibWF4ZXMiLCJnZXRWYWx1ZXMiLCJjaGFyQXQiLCJBcnJheSIsIkNvbG9yIiwiRyIsIlciLCJmbG9vciIsIk0iLCJDIiwiRCIsIkkiLCJBIiwiVCIsIlAiLCJGIiwiXyIsIlIiLCJWIiwiTCIsIk8iLCJCIiwiYXRhbjIiLCJQSSIsInNxcnQiLCJ6IiwiTiIsImNvcyIsInNpbiIsIkUiLCJIIiwiVSIsIloiLCJqIiwicSIsIlkiLCJYIiwiSyIsIkoiLCJyZ2IyaHNsIiwicmdiMmhzdiIsInJnYjJod2IiLCJyZ2IyY215ayIsInJnYjJrZXl3b3JkIiwicmdiMnh5eiIsInJnYjJsYWIiLCJyZ2IybGNoIiwiaHNsMnJnYiIsImhzbDJoc3YiLCJoc2wyaHdiIiwiaHNsMmNteWsiLCJoc2wya2V5d29yZCIsImhzdjJyZ2IiLCJoc3YyaHNsIiwiaHN2Mmh3YiIsImhzdjJjbXlrIiwiaHN2MmtleXdvcmQiLCJod2IycmdiIiwiaHdiMmhzbCIsImh3YjJoc3YiLCJod2IyY215ayIsImh3YjJrZXl3b3JkIiwiY215azJyZ2IiLCJjbXlrMmhzbCIsImNteWsyaHN2IiwiY215azJod2IiLCJjbXlrMmtleXdvcmQiLCJrZXl3b3JkMnJnYiIsImtleXdvcmQyaHNsIiwia2V5d29yZDJoc3YiLCJrZXl3b3JkMmh3YiIsImtleXdvcmQyY215ayIsImtleXdvcmQybGFiIiwia2V5d29yZDJ4eXoiLCJ4eXoycmdiIiwieHl6MmxhYiIsInh5ejJsY2giLCJsYWIyeHl6IiwibGFiMnJnYiIsImxhYjJsY2giLCJsY2gybGFiIiwibGNoMnh5eiIsImxjaDJyZ2IiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFuY2hlZGFsbW9uZCIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvd2dyZWVuIiwiUSIsImV4ZWMiLCJjb252cyIsInJvdXRlU3BhY2UiLCJzcGFjZSIsImZvckVhY2giLCJCYXIiLCJ0eXBlIiwiQnViYmxlIiwiRG91Z2hudXQiLCJMaW5lIiwiUG9sYXJBcmVhIiwiUmFkYXIiLCJob3ZlciIsIm1vZGUiLCJzY2FsZXMiLCJ4QXhlcyIsInBvc2l0aW9uIiwiaWQiLCJ5QXhlcyIsInRvb2x0aXBzIiwiY2FsbGJhY2tzIiwidGl0bGUiLCJsYWJlbCIsInhMYWJlbCIsInlMYWJlbCIsImRlZmF1bHRzIiwic2NhdHRlciIsImNvbnRyb2xsZXJzIiwibGluZSIsIlNjYXR0ZXIiLCJoZWxwZXJzIiwiYmFyIiwiY2F0ZWdvcnlQZXJjZW50YWdlIiwiYmFyUGVyY2VudGFnZSIsImdyaWRMaW5lcyIsIm9mZnNldEdyaWRMaW5lcyIsIkRhdGFzZXRDb250cm9sbGVyIiwiZXh0ZW5kIiwiZGF0YUVsZW1lbnRUeXBlIiwiZWxlbWVudHMiLCJSZWN0YW5nbGUiLCJpbml0aWFsaXplIiwiZ2V0TWV0YSIsImdldEJhckNvdW50IiwiZWFjaCIsImNoYXJ0IiwiZGF0YSIsImRhdGFzZXRzIiwiZ2V0RGF0YXNldE1ldGEiLCJpc0RhdGFzZXRWaXNpYmxlIiwidXBkYXRlIiwidXBkYXRlRWxlbWVudCIsImdldFNjYWxlRm9ySWQiLCJ4QXhpc0lEIiwieUF4aXNJRCIsImdldEJhc2VQaXhlbCIsIm9wdGlvbnMiLCJyZWN0YW5nbGUiLCJjdXN0b20iLCJnZXREYXRhc2V0IiwiX3hTY2FsZSIsIl95U2NhbGUiLCJfZGF0YXNldEluZGV4IiwiaW5kZXgiLCJfaW5kZXgiLCJnZXRSdWxlciIsIl9tb2RlbCIsImNhbGN1bGF0ZUJhclgiLCJjYWxjdWxhdGVCYXJZIiwibGFiZWxzIiwiZGF0YXNldExhYmVsIiwiYmFzZSIsImNhbGN1bGF0ZUJhckJhc2UiLCJ3aWR0aCIsImNhbGN1bGF0ZUJhcldpZHRoIiwiYmFja2dyb3VuZENvbG9yIiwiZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0IiwiYm9yZGVyU2tpcHBlZCIsImJvcmRlckNvbG9yIiwiYm9yZGVyV2lkdGgiLCJwaXZvdCIsInN0YWNrZWQiLCJOdW1iZXIiLCJnZXRQaXhlbEZvclZhbHVlIiwiZ2V0UGl4ZWxGb3JUaWNrIiwidGlja3MiLCJkYXRhc2V0Q291bnQiLCJ0aWNrV2lkdGgiLCJjYXRlZ29yeVdpZHRoIiwiY2F0ZWdvcnlTcGFjaW5nIiwiZnVsbEJhcldpZHRoIiwiYmFyV2lkdGgiLCJiYXJTcGFjaW5nIiwiYmFyVGhpY2tuZXNzIiwiZ2V0QmFySW5kZXgiLCJpc0NvbWJvIiwiZHJhdyIsInRyYW5zaXRpb24iLCJzZXRIb3ZlclN0eWxlIiwiaG92ZXJCYWNrZ3JvdW5kQ29sb3IiLCJnZXRIb3ZlckNvbG9yIiwiaG92ZXJCb3JkZXJDb2xvciIsImhvdmVyQm9yZGVyV2lkdGgiLCJyZW1vdmVIb3ZlclN0eWxlIiwiaG9yaXpvbnRhbEJhciIsImRhdGFzZXRJbmRleCIsImhlaWdodCIsImNhbGN1bGF0ZUJhckhlaWdodCIsIl9jaGFydCIsImN0eCIsIl92aWV3IiwiYmVnaW5QYXRoIiwiZmlsbFN0eWxlIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJpbmRleE9mIiwibW92ZVRvIiwiYXBwbHkiLCJsaW5lVG8iLCJmaWxsIiwic3Ryb2tlIiwidGlja0hlaWdodCIsImNhdGVnb3J5SGVpZ2h0IiwiZnVsbEJhckhlaWdodCIsImJhckhlaWdodCIsImJ1YmJsZSIsIlBvaW50IiwicG9pbnQiLCJnZXRQaXhlbEZvckRlY2ltYWwiLCJOYU4iLCJyYWRpdXMiLCJnZXRSYWRpdXMiLCJoaXRSYWRpdXMiLCJza2lwIiwiaG92ZXJSYWRpdXMiLCJkb3VnaG51dCIsImFuaW1hdGlvbiIsImFuaW1hdGVSb3RhdGUiLCJhbmltYXRlU2NhbGUiLCJhc3BlY3RSYXRpbyIsImxlZ2VuZENhbGxiYWNrIiwicHVzaCIsImpvaW4iLCJsZWdlbmQiLCJnZW5lcmF0ZUxhYmVscyIsIm1hcCIsImFyYyIsInRleHQiLCJoaWRkZW4iLCJvbkNsaWNrIiwiY3V0b3V0UGVyY2VudGFnZSIsInJvdGF0aW9uIiwiY2lyY3VtZmVyZW5jZSIsImlzQXJyYXkiLCJwaWUiLCJBcmMiLCJsaW5rU2NhbGVzIiwibm9vcCIsImdldFJpbmdJbmRleCIsImNoYXJ0QXJlYSIsInJpZ2h0IiwibGVmdCIsImJvdHRvbSIsInRvcCIsImdldE1heEJvcmRlcldpZHRoIiwib3V0ZXJSYWRpdXMiLCJpbm5lclJhZGl1cyIsInJhZGl1c0xlbmd0aCIsImdldFZpc2libGVEYXRhc2V0Q291bnQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInRvdGFsIiwiY2FsY3VsYXRlVG90YWwiLCJjYWxjdWxhdGVDaXJjdW1mZXJlbmNlIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiYWJzIiwiY29uZmlnIiwiZ2V0VmFsdWVPckRlZmF1bHQiLCJzaG93TGluZSIsInNob3dMaW5lcyIsInNwYW5HYXBzIiwiZGF0YXNldEVsZW1lbnRUeXBlIiwiZGF0YXNldCIsInRlbnNpb24iLCJsaW5lVGVuc2lvbiIsIl9zY2FsZSIsIl9jaGlsZHJlbiIsImJvcmRlckNhcFN0eWxlIiwiYm9yZGVyRGFzaCIsImJvcmRlckRhc2hPZmZzZXQiLCJib3JkZXJKb2luU3R5bGUiLCJzdGVwcGVkTGluZSIsInN0ZXBwZWQiLCJjdWJpY0ludGVycG9sYXRpb25Nb2RlIiwic2NhbGVUb3AiLCJzY2FsZUJvdHRvbSIsInNjYWxlWmVybyIsInVwZGF0ZUJlemllckNvbnRyb2xQb2ludHMiLCJnZXRQb2ludEJhY2tncm91bmRDb2xvciIsInBvaW50QmFja2dyb3VuZENvbG9yIiwiZ2V0UG9pbnRCb3JkZXJDb2xvciIsInBvaW50Qm9yZGVyQ29sb3IiLCJnZXRQb2ludEJvcmRlcldpZHRoIiwicG9pbnRCb3JkZXJXaWR0aCIsInBvaW50UmFkaXVzIiwicG9pbnRIaXRSYWRpdXMiLCJjYWxjdWxhdGVQb2ludFkiLCJwb2ludFN0eWxlIiwiZ2V0UmlnaHRWYWx1ZSIsImZpbHRlciIsInNwbGluZUN1cnZlTW9ub3RvbmUiLCJzcGxpbmVDdXJ2ZSIsInByZXZpb3VzSXRlbSIsIm5leHRJdGVtIiwiY29udHJvbFBvaW50UHJldmlvdXNYIiwicHJldmlvdXMiLCJjb250cm9sUG9pbnRQcmV2aW91c1kiLCJjb250cm9sUG9pbnROZXh0WCIsIm5leHQiLCJjb250cm9sUG9pbnROZXh0WSIsImNhcEJlemllclBvaW50cyIsInBvaW50SG92ZXJSYWRpdXMiLCJwb2ludEhvdmVyQmFja2dyb3VuZENvbG9yIiwicG9pbnRIb3ZlckJvcmRlckNvbG9yIiwicG9pbnRIb3ZlckJvcmRlcldpZHRoIiwicG9sYXJBcmVhIiwic2NhbGUiLCJsaW5lQXJjIiwiYmVnaW5BdFplcm8iLCJjb3VudCIsImNvdW50VmlzaWJsZUVsZW1lbnRzIiwieENlbnRlciIsInlDZW50ZXIiLCJnZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSIsInJhZGFyIiwiX2xvb3AiLCJnZXRCYXNlUG9zaXRpb24iLCJnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUiLCJkdXJhdGlvbiIsImVhc2luZyIsIm9uUHJvZ3Jlc3MiLCJvbkNvbXBsZXRlIiwiQW5pbWF0aW9uIiwiRWxlbWVudCIsImN1cnJlbnRTdGVwIiwibnVtU3RlcHMiLCJyZW5kZXIiLCJvbkFuaW1hdGlvblByb2dyZXNzIiwib25BbmltYXRpb25Db21wbGV0ZSIsImFuaW1hdGlvblNlcnZpY2UiLCJmcmFtZUR1cmF0aW9uIiwiYW5pbWF0aW9ucyIsImRyb3BGcmFtZXMiLCJyZXF1ZXN0IiwiYWRkQW5pbWF0aW9uIiwiYW5pbWF0aW5nIiwiY2hhcnRJbnN0YW5jZSIsImFuaW1hdGlvbk9iamVjdCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbiIsImZpbmRJbmRleCIsInNwbGljZSIsInJlcXVlc3RBbmltRnJhbWUiLCJzdGFydERpZ2VzdCIsIkRhdGUiLCJub3ciLCJjYW52YXNIZWxwZXJzIiwiZHJhd1BvaW50IiwiZHJhd0ltYWdlIiwiY2xvc2VQYXRoIiwiU1FSVDIiLCJmaWxsUmVjdCIsInN0cm9rZVJlY3QiLCJnZXRTdHlsZSIsInN0eWxlIiwiZ2V0QXR0cmlidXRlIiwiX2NoYXJ0anMiLCJpbml0aWFsIiwiZGlzcGxheSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjYW52YXMiLCJIVE1MQ2FudmFzRWxlbWVudCIsImdldENvbnRleHQiLCJDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQiLCJjb25maWdNZXJnZSIsInR5cGVzIiwiaW5zdGFuY2VzIiwiQ29udHJvbGxlciIsInVpZCIsIl9idWZmZXJlZFJlbmRlciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwicmV0aW5hU2NhbGUiLCJyZXNwb25zaXZlIiwiYWRkUmVzaXplTGlzdGVuZXIiLCJwYXJlbnROb2RlIiwicmVzaXplIiwicGx1Z2lucyIsIm5vdGlmeSIsImJpbmRFdmVudHMiLCJlbnN1cmVTY2FsZXNIYXZlSURzIiwiYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzIiwiYnVpbGRTY2FsZXMiLCJ1cGRhdGVMYXlvdXQiLCJyZXNldEVsZW1lbnRzIiwiaW5pdFRvb2xUaXAiLCJjbGVhciIsInN0b3AiLCJtYWludGFpbkFzcGVjdFJhdGlvIiwiZ2V0TWF4aW11bVdpZHRoIiwiZ2V0TWF4aW11bUhlaWdodCIsIm9uUmVzaXplIiwicmVzcG9uc2l2ZUFuaW1hdGlvbkR1cmF0aW9uIiwiZHR5cGUiLCJpc0RlZmF1bHQiLCJzY2FsZVNlcnZpY2UiLCJnZXRTY2FsZUNvbnN0cnVjdG9yIiwiYWRkU2NhbGVzVG9MYXlvdXQiLCJsYXlvdXRTZXJ2aWNlIiwiY29udHJvbGxlciIsInVwZGF0ZUluZGV4IiwicmVzZXQiLCJ0b29sdGlwIiwiX2RhdGEiLCJidWlsZE9yVXBkYXRlRWxlbWVudHMiLCJ1cGRhdGVEYXRhc2V0cyIsIl9idWZmZXJlZFJlcXVlc3QiLCJsYXp5IiwiZWFzaW5nRWZmZWN0cyIsImJveGVzIiwiZ2V0RWxlbWVudEF0RXZlbnQiLCJJbnRlcmFjdGlvbiIsIm1vZGVzIiwic2luZ2xlIiwiZ2V0RWxlbWVudHNBdEV2ZW50IiwiaW50ZXJzZWN0IiwiZ2V0RWxlbWVudHNBdFhBeGlzIiwiZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZSIsImdldERhdGFzZXRBdEV2ZW50IiwiX21ldGEiLCJnZW5lcmF0ZUxlZ2VuZCIsImRlc3Ryb3kiLCJ1bmJpbmRFdmVudHMiLCJldmVudHMiLCJyZW1vdmVSZXNpemVMaXN0ZW5lciIsInRvQmFzZTY0SW1hZ2UiLCJ0b0RhdGFVUkwiLCJUb29sdGlwIiwiX2NoYXJ0SW5zdGFuY2UiLCJfb3B0aW9ucyIsImV2ZW50SGFuZGxlciIsInVwZGF0ZUhvdmVyU3R5bGUiLCJoYW5kbGVFdmVudCIsImFuaW1hdGlvbkR1cmF0aW9uIiwibGFzdEFjdGl2ZSIsImFjdGl2ZSIsIm9uSG92ZXIiLCJhcnJheUVxdWFscyIsImxpc3RlbmVycyIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJhZGRFbGVtZW50cyIsImNyZWF0ZU1ldGFEYXRhc2V0IiwiY3JlYXRlTWV0YURhdGEiLCJhZGRFbGVtZW50QW5kUmVzZXQiLCJyZXN5bmNFbGVtZW50cyIsImluc2VydEVsZW1lbnRzIiwib25EYXRhUHVzaCIsIm9uRGF0YVBvcCIsInBvcCIsIm9uRGF0YVNoaWZ0Iiwic2hpZnQiLCJvbkRhdGFTcGxpY2UiLCJvbkRhdGFVbnNoaWZ0IiwiaW5oZXJpdHMiLCJfc3RhcnQiLCJjb2xvciIsInRvb2x0aXBQb3NpdGlvbiIsImhhc1ZhbHVlIiwiaXNOdW1iZXIiLCJkZWZhdWx0VmlldyIsImdldENvbXB1dGVkU3R5bGUiLCJQT1NJVElWRV9JTkZJTklUWSIsImtleXMiLCJzY2FsZU1lcmdlIiwiZ2V0U2NhbGVEZWZhdWx0cyIsIndoZXJlIiwiZmluZE5leHRXaGVyZSIsImZpbmRQcmV2aW91c1doZXJlIiwiY29uc3RydWN0b3IiLCJfX3N1cGVyX18iLCJpc0Zpbml0ZSIsImFsbW9zdEVxdWFscyIsInJlZHVjZSIsIk5FR0FUSVZFX0lORklOSVRZIiwic2lnbiIsImxvZzEwIiwibG9nIiwiTE4xMCIsInRvUmFkaWFucyIsInRvRGVncmVlcyIsImdldEFuZ2xlRnJvbVBvaW50IiwiYW5nbGUiLCJkaXN0YW5jZSIsImRpc3RhbmNlQmV0d2VlblBvaW50cyIsImFsaWFzUGl4ZWwiLCJFUFNJTE9OIiwibW9kZWwiLCJkZWx0YUsiLCJtSyIsIm5pY2VOdW0iLCJsaW5lYXIiLCJlYXNlSW5RdWFkIiwiZWFzZU91dFF1YWQiLCJlYXNlSW5PdXRRdWFkIiwiZWFzZUluQ3ViaWMiLCJlYXNlT3V0Q3ViaWMiLCJlYXNlSW5PdXRDdWJpYyIsImVhc2VJblF1YXJ0IiwiZWFzZU91dFF1YXJ0IiwiZWFzZUluT3V0UXVhcnQiLCJlYXNlSW5RdWludCIsImVhc2VPdXRRdWludCIsImVhc2VJbk91dFF1aW50IiwiZWFzZUluU2luZSIsImVhc2VPdXRTaW5lIiwiZWFzZUluT3V0U2luZSIsImVhc2VJbkV4cG8iLCJlYXNlT3V0RXhwbyIsImVhc2VJbk91dEV4cG8iLCJlYXNlSW5DaXJjIiwiZWFzZU91dENpcmMiLCJlYXNlSW5PdXRDaXJjIiwiZWFzZUluRWxhc3RpYyIsImFzaW4iLCJlYXNlT3V0RWxhc3RpYyIsImVhc2VJbk91dEVsYXN0aWMiLCJlYXNlSW5CYWNrIiwiZWFzZU91dEJhY2siLCJlYXNlSW5PdXRCYWNrIiwiZWFzZUluQm91bmNlIiwiZWFzZU91dEJvdW5jZSIsImVhc2VJbk91dEJvdW5jZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJjYW5jZWxBbmltRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJvQ2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtc0NhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJUaW1lb3V0IiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsIm9yaWdpbmFsRXZlbnQiLCJjdXJyZW50VGFyZ2V0Iiwic3JjRWxlbWVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsImN1cnJlbnREZXZpY2VQaXhlbFJhdGlvIiwiYWRkRXZlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImdldENvbnN0cmFpbnRXaWR0aCIsImdldENvbnN0cmFpbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImN1cnJlbnRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJkZXZpY2VQaXhlbFJhdGlvIiwiY2xlYXJSZWN0IiwiZm9udFN0cmluZyIsImxvbmdlc3RUZXh0IiwiZ2FyYmFnZUNvbGxlY3QiLCJmb250IiwibWVhc3VyZVRleHQiLCJudW1iZXJPZkxhYmVsTGluZXMiLCJkcmF3Um91bmRlZFJlY3RhbmdsZSIsInF1YWRyYXRpY0N1cnZlVG8iLCJDYW52YXNHcmFkaWVudCIsImRlZmF1bHRDb2xvciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJjc3NUZXh0IiwidGFiSW5kZXgiLCJyZXNpemVyIiwidGlja2luZyIsImNvbnRlbnRXaW5kb3ciLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJjYWxsQ2FsbGJhY2siLCJDYW52YXNQYXR0ZXJuIiwiaW5SYW5nZSIsImdldENlbnRlclBvaW50IiwibmVhcmVzdCIsInNvcnQiLCJnZXRBcmVhIiwiaW5YUmFuZ2UiLCJpbllSYW5nZSIsImRlZmF1bHRGb250Q29sb3IiLCJkZWZhdWx0Rm9udEZhbWlseSIsImRlZmF1bHRGb250U2l6ZSIsImRlZmF1bHRGb250U3R5bGUiLCJhZGRCb3giLCJyZW1vdmVCb3giLCJpc0hvcml6b250YWwiLCJmdWxsV2lkdGgiLCJob3Jpem9udGFsIiwibWluU2l6ZSIsImJveCIsImxheW91dCIsInBhZGRpbmciLCJ1c2VQb2ludFN0eWxlIiwiYm94V2lkdGgiLCJyZXZlcnNlIiwibGluZUNhcCIsImxpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJsaW5lSm9pbiIsIkxlZ2VuZCIsImxlZ2VuZEhpdEJveGVzIiwiZG91Z2hudXRNb2RlIiwiYmVmb3JlVXBkYXRlIiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJtYXJnaW5zIiwiYmVmb3JlU2V0RGltZW5zaW9ucyIsInNldERpbWVuc2lvbnMiLCJhZnRlclNldERpbWVuc2lvbnMiLCJiZWZvcmVCdWlsZExhYmVscyIsImJ1aWxkTGFiZWxzIiwiYWZ0ZXJCdWlsZExhYmVscyIsImJlZm9yZUZpdCIsImZpdCIsImFmdGVyRml0IiwiYWZ0ZXJVcGRhdGUiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwibGVnZW5kSXRlbXMiLCJmb250U2l6ZSIsImZvbnRTdHlsZSIsImZvbnRGYW1pbHkiLCJsaW5lV2lkdGhzIiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwiY29sdW1uV2lkdGhzIiwiZm9udENvbG9yIiwic2F2ZSIsInNldExpbmVEYXNoIiwicmVzdG9yZSIsImZpbGxUZXh0IiwicmVnaXN0ZXIiLCJiZWZvcmVJbml0IiwiX3BsdWdpbnMiLCJ1bnJlZ2lzdGVyIiwiZ2V0QWxsIiwiUGx1Z2luQmFzZSIsImFmdGVySW5pdCIsImJlZm9yZURyYXciLCJhZnRlckRyYXciLCJwbHVnaW5TZXJ2aWNlIiwiZHJhd0JvcmRlciIsImRyYXdPbkNoYXJ0QXJlYSIsImRyYXdUaWNrcyIsInRpY2tNYXJrTGVuZ3RoIiwiemVyb0xpbmVXaWR0aCIsInplcm9MaW5lQ29sb3IiLCJzY2FsZUxhYmVsIiwibGFiZWxTdHJpbmciLCJtaW5Sb3RhdGlvbiIsIm1heFJvdGF0aW9uIiwibWlycm9yIiwiYXV0b1NraXAiLCJhdXRvU2tpcFBhZGRpbmciLCJsYWJlbE9mZnNldCIsImNhbGxiYWNrIiwiVGlja3MiLCJmb3JtYXR0ZXJzIiwiU2NhbGUiLCJiZWZvcmVEYXRhTGltaXRzIiwiZGV0ZXJtaW5lRGF0YUxpbWl0cyIsImFmdGVyRGF0YUxpbWl0cyIsImJlZm9yZUJ1aWxkVGlja3MiLCJidWlsZFRpY2tzIiwiYWZ0ZXJCdWlsZFRpY2tzIiwiYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uIiwiY29udmVydFRpY2tzVG9MYWJlbHMiLCJhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiIsImJlZm9yZUNhbGN1bGF0ZVRpY2tSb3RhdGlvbiIsImNhbGN1bGF0ZVRpY2tSb3RhdGlvbiIsImFmdGVyQ2FsY3VsYXRlVGlja1JvdGF0aW9uIiwidXNlckNhbGxiYWNrIiwibGFiZWxSb3RhdGlvbiIsImxvbmdlc3RUZXh0Q2FjaGUiLCJ5TGFiZWxXaWR0aCIsImlzRnVsbFdpZHRoIiwibG9uZ2VzdExhYmVsV2lkdGgiLCJpc1ZhbGlkIiwiZ2V0TGFiZWxGb3JJbmRleCIsImdldFZhbHVlRm9yUGl4ZWwiLCJtYXhUaWNrc0xpbWl0IiwiemVyb0xpbmVJbmRleCIsInR4MSIsInR5MSIsInR4MiIsInR5MiIsIngxIiwieTEiLCJ4MiIsInkyIiwibGFiZWxYIiwibGFiZWxZIiwiZ2xXaWR0aCIsImdsQ29sb3IiLCJnbEJvcmRlckRhc2giLCJnbEJvcmRlckRhc2hPZmZzZXQiLCJ0cmFuc2xhdGUiLCJjb25zdHJ1Y3RvcnMiLCJyZWdpc3RlclNjYWxlVHlwZSIsInVwZGF0ZVNjYWxlRGVmYXVsdHMiLCJnZW5lcmF0b3JzIiwic3RlcFNpemUiLCJtYXhUaWNrcyIsImNlaWwiLCJsb2dhcml0aG1pYyIsIm1pbk5vdFplcm8iLCJ0b0ZpeGVkIiwidG9FeHBvbmVudGlhbCIsIlRpdGxlIiwidGl0bGVCbG9jayIsInhQYWRkaW5nIiwieVBhZGRpbmciLCJ4QWxpZ24iLCJ5QWxpZ24iLCJib2R5Rm9udENvbG9yIiwiX2JvZHlGb250RmFtaWx5IiwiYm9keUZvbnRGYW1pbHkiLCJfYm9keUZvbnRTdHlsZSIsImJvZHlGb250U3R5bGUiLCJfYm9keUFsaWduIiwiYm9keUFsaWduIiwiYm9keUZvbnRTaXplIiwiYm9keVNwYWNpbmciLCJ0aXRsZUZvbnRDb2xvciIsIl90aXRsZUZvbnRGYW1pbHkiLCJ0aXRsZUZvbnRGYW1pbHkiLCJfdGl0bGVGb250U3R5bGUiLCJ0aXRsZUZvbnRTdHlsZSIsInRpdGxlRm9udFNpemUiLCJfdGl0bGVBbGlnbiIsInRpdGxlQWxpZ24iLCJ0aXRsZVNwYWNpbmciLCJ0aXRsZU1hcmdpbkJvdHRvbSIsImZvb3RlckZvbnRDb2xvciIsIl9mb290ZXJGb250RmFtaWx5IiwiZm9vdGVyRm9udEZhbWlseSIsIl9mb290ZXJGb250U3R5bGUiLCJmb290ZXJGb250U3R5bGUiLCJmb290ZXJGb250U2l6ZSIsIl9mb290ZXJBbGlnbiIsImZvb3RlckFsaWduIiwiZm9vdGVyU3BhY2luZyIsImZvb3Rlck1hcmdpblRvcCIsImNhcmV0U2l6ZSIsImNvcm5lclJhZGl1cyIsIm9wYWNpdHkiLCJsZWdlbmRDb2xvckJhY2tncm91bmQiLCJtdWx0aUtleUJhY2tncm91bmQiLCJkaXNwbGF5Q29sb3JzIiwiYm9keSIsImJlZm9yZSIsImxpbmVzIiwiYWZ0ZXIiLCJiZWZvcmVCb2R5IiwiYWZ0ZXJCb2R5IiwiZm9vdGVyIiwiY2FyZXRQYWRkaW5nIiwiZW5hYmxlZCIsImJlZm9yZVRpdGxlIiwiYWZ0ZXJUaXRsZSIsImJlZm9yZUxhYmVsIiwibGFiZWxDb2xvciIsImFmdGVyTGFiZWwiLCJiZWZvcmVGb290ZXIiLCJhZnRlckZvb3RlciIsImdldFRpdGxlIiwiZ2V0QmVmb3JlQm9keSIsImdldEJvZHkiLCJnZXRBZnRlckJvZHkiLCJnZXRGb290ZXIiLCJfYWN0aXZlIiwiY2FyZXRYIiwiY2FyZXRZIiwicG9zaXRpb25lcnMiLCJfZXZlbnRQb3NpdGlvbiIsIml0ZW1Tb3J0IiwibGFiZWxDb2xvcnMiLCJkYXRhUG9pbnRzIiwiZHJhd0NhcmV0IiwiZHJhd1RpdGxlIiwiZHJhd0JvZHkiLCJkcmF3Rm9vdGVyIiwiZHJhd0JhY2tncm91bmQiLCJfbGFzdEFjdGl2ZSIsImF2ZXJhZ2UiLCJpbkxhYmVsUmFuZ2UiLCJiZXppZXJDdXJ2ZVRvIiwiZ2V0TGFiZWxzIiwieExhYmVscyIsInlMYWJlbHMiLCJtaW5JbmRleCIsIm1heEluZGV4IiwiTGluZWFyU2NhbGVCYXNlIiwicG9zaXRpdmVWYWx1ZXMiLCJuZWdhdGl2ZVZhbHVlcyIsInJlbGF0aXZlUG9pbnRzIiwiaGFuZGxlVGlja1JhbmdlT3B0aW9ucyIsImdldFRpY2tMaW1pdCIsImhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlcyIsInN0YXJ0IiwiZW5kIiwidGlja3NBc051bWJlcnMiLCJzdWdnZXN0ZWRNaW4iLCJzdWdnZXN0ZWRNYXgiLCJmaXhlZFN0ZXBTaXplIiwidGlja1ZhbHVlcyIsImFuaW1hdGUiLCJhbmdsZUxpbmVzIiwic2hvd0xhYmVsQmFja2Ryb3AiLCJiYWNrZHJvcENvbG9yIiwiYmFja2Ryb3BQYWRkaW5nWSIsImJhY2tkcm9wUGFkZGluZ1giLCJwb2ludExhYmVscyIsImdldFZhbHVlQ291bnQiLCJkcmF3aW5nQXJlYSIsImdldFBvaW50UG9zaXRpb24iLCJnZXRJbmRleEFuZ2xlIiwic2V0Q2VudGVyUG9pbnQiLCJtb21lbnQiLCJ1bml0cyIsIm5hbWUiLCJzdGVwcyIsIm1heFN0ZXAiLCJ0aW1lIiwicGFyc2VyIiwiZm9ybWF0IiwidW5pdCIsImRpc3BsYXlGb3JtYXQiLCJpc29XZWVrZGF5IiwibWluVW5pdCIsImRpc3BsYXlGb3JtYXRzIiwibWlsbGlzZWNvbmQiLCJzZWNvbmQiLCJtaW51dGUiLCJob3VyIiwiZGF5Iiwid2VlayIsIm1vbnRoIiwicXVhcnRlciIsInllYXIiLCJnZXRMYWJlbE1vbWVudCIsImxhYmVsTW9tZW50cyIsImdldExhYmVsRGlmZiIsImxhYmVsRGlmZnMiLCJidWlsZExhYmVsRGlmZnMiLCJnZXRNb21lbnRTdGFydE9mIiwic3RhcnRPZiIsInRpY2tVbml0IiwicGFyc2VUaW1lIiwiZmlyc3RUaWNrIiwibGFzdFRpY2siLCJkaWZmIiwidW5pdFNjYWxlIiwic2NhbGVTaXplSW5Vbml0cyIsInVuaXRTdGVwU2l6ZSIsInRpY2tGb3JtYXRGdW5jdGlvbiIsImFkZCIsInRvb2x0aXBGb3JtYXQiLCJ0aWNrTW9tZW50cyIsImFzU2Vjb25kcyIsImdldE1vbnRoIiwid2FybiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4213\n");

/***/ }),

/***/ 1635:
/***/ ((module) => {

eval("module.exports = {\n  type: \"bar\",\n  data: {\n    labels: [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\"],\n    datasets: [{\n      label: \"# of Votes\",\n      data: [58, 80, 44, 76, 54, 50, 45, 90, 57, 48, 54, 49, 63, 77, 67, 83, 95],\n      backgroundColor: [\"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\"],\n      //borderColor: [\n      //    'rgba(255,99,132,1)',\n      //    'rgba(54, 162, 235, 1)',\n      //    'rgba(255, 206, 86, 1)',\n      //    'rgba(75, 192, 192, 1)',\n      //    'rgba(153, 102, 255, 1)',\n      //    'rgba(255, 159, 64, 1)'\n      //],\n      borderWidth: 0\n    }]\n  },\n  options: {\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        display: false\n      }],\n      yAxes: [{\n        display: false\n      }]\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1ib2lsZXItcGxhdGUvLi9zcmMvbGliL0NoYXJ0L0NvbmZpZy5qcz9hMDE0Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiZGF0YSIsImxhYmVscyIsImRhdGFzZXRzIiwibGFiZWwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJXaWR0aCIsIm9wdGlvbnMiLCJtYWludGFpbkFzcGVjdFJhdGlvIiwibGVnZW5kIiwiZGlzcGxheSIsInNjYWxlcyIsInhBeGVzIiwieUF4ZXMiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkMsRUFBQUEsSUFBSSxFQUFFLEtBRFM7QUFFZkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLE1BQU0sRUFBRSxDQUNOLEdBRE0sRUFFTixHQUZNLEVBR04sR0FITSxFQUlOLEdBSk0sRUFLTixHQUxNLEVBTU4sR0FOTSxFQU9OLEdBUE0sRUFRTixHQVJNLEVBU04sR0FUTSxFQVVOLEdBVk0sRUFXTixHQVhNLEVBWU4sR0FaTSxFQWFOLEdBYk0sRUFjTixHQWRNLEVBZU4sR0FmTSxFQWdCTixHQWhCTSxFQWlCTixHQWpCTSxDQURKO0FBb0JKQyxJQUFBQSxRQUFRLEVBQUUsQ0FDUjtBQUNFQyxNQUFBQSxLQUFLLEVBQUUsWUFEVDtBQUVFSCxNQUFBQSxJQUFJLEVBQUUsQ0FDSixFQURJLEVBQ0EsRUFEQSxFQUNJLEVBREosRUFDUSxFQURSLEVBQ1ksRUFEWixFQUNnQixFQURoQixFQUNvQixFQURwQixFQUN3QixFQUR4QixFQUM0QixFQUQ1QixFQUNnQyxFQURoQyxFQUNvQyxFQURwQyxFQUN3QyxFQUR4QyxFQUM0QyxFQUQ1QyxFQUNnRCxFQURoRCxFQUNvRCxFQURwRCxFQUN3RCxFQUR4RCxFQUM0RCxFQUQ1RCxDQUZSO0FBS0VJLE1BQUFBLGVBQWUsRUFBRSxDQUNmLDBCQURlLEVBRWYsMEJBRmUsRUFHZiwwQkFIZSxFQUlmLDBCQUplLEVBS2YsMEJBTGUsRUFNZiwwQkFOZSxFQU9mLDBCQVBlLEVBUWYsMEJBUmUsRUFTZiwwQkFUZSxFQVVmLDBCQVZlLEVBV2YsMEJBWGUsRUFZZiwwQkFaZSxFQWFmLDBCQWJlLEVBY2YsMEJBZGUsRUFlZiwwQkFmZSxFQWdCZiwwQkFoQmUsRUFpQmYsMEJBakJlLENBTG5CO0FBd0JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsTUFBQUEsV0FBVyxFQUFFO0FBaENmLEtBRFE7QUFwQk4sR0FGUztBQTJEZkMsRUFBQUEsT0FBTyxFQUFFO0FBQ1BDLElBQUFBLG1CQUFtQixFQUFFLEtBRGQ7QUFFUEMsSUFBQUEsTUFBTSxFQUFFO0FBQ05DLE1BQUFBLE9BQU8sRUFBRTtBQURILEtBRkQ7QUFLUEMsSUFBQUEsTUFBTSxFQUFFO0FBQ05DLE1BQUFBLEtBQUssRUFBRSxDQUNMO0FBQ0VGLFFBQUFBLE9BQU8sRUFBRTtBQURYLE9BREssQ0FERDtBQU1ORyxNQUFBQSxLQUFLLEVBQUUsQ0FDTDtBQUNFSCxRQUFBQSxPQUFPLEVBQUU7QUFEWCxPQURLO0FBTkQ7QUFMRDtBQTNETSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICB0eXBlOiBcImJhclwiLFxuICBkYXRhOiB7XG4gICAgbGFiZWxzOiBbXG4gICAgICBcIkFcIixcbiAgICAgIFwiQlwiLFxuICAgICAgXCJDXCIsXG4gICAgICBcIkRcIixcbiAgICAgIFwiRVwiLFxuICAgICAgXCJGXCIsXG4gICAgICBcIkdcIixcbiAgICAgIFwiSFwiLFxuICAgICAgXCJJXCIsXG4gICAgICBcIkpcIixcbiAgICAgIFwiS1wiLFxuICAgICAgXCJMXCIsXG4gICAgICBcIk1cIixcbiAgICAgIFwiTlwiLFxuICAgICAgXCJPXCIsXG4gICAgICBcIlBcIixcbiAgICAgIFwiUVwiLFxuICAgIF0sXG4gICAgZGF0YXNldHM6IFtcbiAgICAgIHtcbiAgICAgICAgbGFiZWw6IFwiIyBvZiBWb3Rlc1wiLFxuICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgNTgsIDgwLCA0NCwgNzYsIDU0LCA1MCwgNDUsIDkwLCA1NywgNDgsIDU0LCA0OSwgNjMsIDc3LCA2NywgODMsIDk1LFxuICAgICAgICBdLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFtcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXG4gICAgICAgIF0sXG4gICAgICAgIC8vYm9yZGVyQ29sb3I6IFtcbiAgICAgICAgLy8gICAgJ3JnYmEoMjU1LDk5LDEzMiwxKScsXG4gICAgICAgIC8vICAgICdyZ2JhKDU0LCAxNjIsIDIzNSwgMSknLFxuICAgICAgICAvLyAgICAncmdiYSgyNTUsIDIwNiwgODYsIDEpJyxcbiAgICAgICAgLy8gICAgJ3JnYmEoNzUsIDE5MiwgMTkyLCAxKScsXG4gICAgICAgIC8vICAgICdyZ2JhKDE1MywgMTAyLCAyNTUsIDEpJyxcbiAgICAgICAgLy8gICAgJ3JnYmEoMjU1LCAxNTksIDY0LCAxKSdcbiAgICAgICAgLy9dLFxuICAgICAgICBib3JkZXJXaWR0aDogMCxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAgb3B0aW9uczoge1xuICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxuICAgIGxlZ2VuZDoge1xuICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgfSxcbiAgICBzY2FsZXM6IHtcbiAgICAgIHhBeGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICB5QXhlczogW1xuICAgICAgICB7XG4gICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gIH0sXG59O1xuIl0sImZpbGUiOiIxNjM1LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1635\n");

/***/ })

}]);